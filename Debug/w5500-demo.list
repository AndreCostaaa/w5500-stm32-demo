
w5500-demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000075bc  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002fc  0800774c  0800774c  0000874c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007a48  08007a48  000090a8  2**0
                  CONTENTS
  4 .ARM          00000008  08007a48  08007a48  00008a48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007a50  08007a50  000090a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007a50  08007a50  00008a50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007a54  08007a54  00008a54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000a8  20000000  08007a58  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ad0  200000a8  08007b00  000090a8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000b78  08007b00  00009b78  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000090a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014314  00000000  00000000  000090d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d2e  00000000  00000000  0001d3ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001458  00000000  00000000  00020120  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000fec  00000000  00000000  00021578  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028921  00000000  00000000  00022564  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017122  00000000  00000000  0004ae85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000faae9  00000000  00000000  00061fa7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015ca90  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005d98  00000000  00000000  0015cad4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  0016286c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000a8 	.word	0x200000a8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007734 	.word	0x08007734

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000ac 	.word	0x200000ac
 80001cc:	08007734 	.word	0x08007734

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <__io_putchar>:
// 				   .dhcp_mode = NETINFO_DHCP };
static wiz_NetTimeout wiznet_timeout = { .retry_cnt = 3, .time_100us = 2000 };

//Used by _write syscall (printf)
int __io_putchar(int byte)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b082      	sub	sp, #8
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]
	return HAL_UART_Transmit(&console_uart, (uint8_t *)&byte, 1, 100);
 8000568:	1d39      	adds	r1, r7, #4
 800056a:	2364      	movs	r3, #100	@ 0x64
 800056c:	2201      	movs	r2, #1
 800056e:	4804      	ldr	r0, [pc, #16]	@ (8000580 <__io_putchar+0x20>)
 8000570:	f003 fefe 	bl	8004370 <HAL_UART_Transmit>
 8000574:	4603      	mov	r3, r0
}
 8000576:	4618      	mov	r0, r3
 8000578:	3708      	adds	r7, #8
 800057a:	46bd      	mov	sp, r7
 800057c:	bd80      	pop	{r7, pc}
 800057e:	bf00      	nop
 8000580:	20000128 	.word	0x20000128

08000584 <crit_section_enter>:

void crit_section_enter(void)
{
 8000584:	b480      	push	{r7}
 8000586:	b083      	sub	sp, #12
 8000588:	af00      	add	r7, sp, #0
 800058a:	2301      	movs	r3, #1
 800058c:	607b      	str	r3, [r7, #4]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	f383 8810 	msr	PRIMASK, r3
}
 8000594:	bf00      	nop
	__set_PRIMASK(1);
}
 8000596:	bf00      	nop
 8000598:	370c      	adds	r7, #12
 800059a:	46bd      	mov	sp, r7
 800059c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a0:	4770      	bx	lr

080005a2 <crit_section_leave>:

void crit_section_leave(void)
{
 80005a2:	b480      	push	{r7}
 80005a4:	b083      	sub	sp, #12
 80005a6:	af00      	add	r7, sp, #0
 80005a8:	2300      	movs	r3, #0
 80005aa:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	f383 8810 	msr	PRIMASK, r3
}
 80005b2:	bf00      	nop
	__set_PRIMASK(0);
}
 80005b4:	bf00      	nop
 80005b6:	370c      	adds	r7, #12
 80005b8:	46bd      	mov	sp, r7
 80005ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005be:	4770      	bx	lr

080005c0 <spi_cs_select>:

void spi_cs_select(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 80005c4:	2200      	movs	r2, #0
 80005c6:	2140      	movs	r1, #64	@ 0x40
 80005c8:	4802      	ldr	r0, [pc, #8]	@ (80005d4 <spi_cs_select+0x14>)
 80005ca:	f001 f973 	bl	80018b4 <HAL_GPIO_WritePin>
}
 80005ce:	bf00      	nop
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	48000400 	.word	0x48000400

080005d8 <spi_cs_deselect>:
void spi_cs_deselect(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 80005dc:	2201      	movs	r2, #1
 80005de:	2140      	movs	r1, #64	@ 0x40
 80005e0:	4802      	ldr	r0, [pc, #8]	@ (80005ec <spi_cs_deselect+0x14>)
 80005e2:	f001 f967 	bl	80018b4 <HAL_GPIO_WritePin>
}
 80005e6:	bf00      	nop
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop
 80005ec:	48000400 	.word	0x48000400

080005f0 <spi_read>:
void spi_read(uint8_t *buf, uint16_t size)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b084      	sub	sp, #16
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
 80005f8:	460b      	mov	r3, r1
 80005fa:	807b      	strh	r3, [r7, #2]
	HAL_StatusTypeDef ret = HAL_SPI_Receive(&w5500_spi, buf, size, 100);
 80005fc:	887a      	ldrh	r2, [r7, #2]
 80005fe:	2364      	movs	r3, #100	@ 0x64
 8000600:	6879      	ldr	r1, [r7, #4]
 8000602:	4807      	ldr	r0, [pc, #28]	@ (8000620 <spi_read+0x30>)
 8000604:	f002 fea6 	bl	8003354 <HAL_SPI_Receive>
 8000608:	4603      	mov	r3, r0
 800060a:	73fb      	strb	r3, [r7, #15]
	if (ret != HAL_OK) {
 800060c:	7bfb      	ldrb	r3, [r7, #15]
 800060e:	2b00      	cmp	r3, #0
 8000610:	d002      	beq.n	8000618 <spi_read+0x28>
		printf("Failed to read\r\n");
 8000612:	4804      	ldr	r0, [pc, #16]	@ (8000624 <spi_read+0x34>)
 8000614:	f006 fa2a 	bl	8006a6c <puts>
		//Handle error
	}
}
 8000618:	bf00      	nop
 800061a:	3710      	adds	r7, #16
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}
 8000620:	200000c4 	.word	0x200000c4
 8000624:	0800774c 	.word	0x0800774c

08000628 <spi_write>:
void spi_write(uint8_t *buf, uint16_t size)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b084      	sub	sp, #16
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
 8000630:	460b      	mov	r3, r1
 8000632:	807b      	strh	r3, [r7, #2]
	HAL_StatusTypeDef ret = HAL_SPI_Transmit(&w5500_spi, buf, size, 100);
 8000634:	887a      	ldrh	r2, [r7, #2]
 8000636:	2364      	movs	r3, #100	@ 0x64
 8000638:	6879      	ldr	r1, [r7, #4]
 800063a:	4807      	ldr	r0, [pc, #28]	@ (8000658 <spi_write+0x30>)
 800063c:	f002 fd15 	bl	800306a <HAL_SPI_Transmit>
 8000640:	4603      	mov	r3, r0
 8000642:	73fb      	strb	r3, [r7, #15]
	if (ret != HAL_OK) {
 8000644:	7bfb      	ldrb	r3, [r7, #15]
 8000646:	2b00      	cmp	r3, #0
 8000648:	d002      	beq.n	8000650 <spi_write+0x28>
		printf("Failed to read\r\n");
 800064a:	4804      	ldr	r0, [pc, #16]	@ (800065c <spi_write+0x34>)
 800064c:	f006 fa0e 	bl	8006a6c <puts>
		//Handle error
	}
}
 8000650:	bf00      	nop
 8000652:	3710      	adds	r7, #16
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}
 8000658:	200000c4 	.word	0x200000c4
 800065c:	0800774c 	.word	0x0800774c

08000660 <spi_read_byte>:
uint8_t spi_read_byte(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b082      	sub	sp, #8
 8000664:	af00      	add	r7, sp, #0
	uint8_t data;

	spi_read(&data, 1);
 8000666:	1dfb      	adds	r3, r7, #7
 8000668:	2101      	movs	r1, #1
 800066a:	4618      	mov	r0, r3
 800066c:	f7ff ffc0 	bl	80005f0 <spi_read>
	return data;
 8000670:	79fb      	ldrb	r3, [r7, #7]
}
 8000672:	4618      	mov	r0, r3
 8000674:	3708      	adds	r7, #8
 8000676:	46bd      	mov	sp, r7
 8000678:	bd80      	pop	{r7, pc}

0800067a <spi_write_byte>:
void spi_write_byte(uint8_t data)
{
 800067a:	b580      	push	{r7, lr}
 800067c:	b082      	sub	sp, #8
 800067e:	af00      	add	r7, sp, #0
 8000680:	4603      	mov	r3, r0
 8000682:	71fb      	strb	r3, [r7, #7]
	spi_write(&data, 1);
 8000684:	1dfb      	adds	r3, r7, #7
 8000686:	2101      	movs	r1, #1
 8000688:	4618      	mov	r0, r3
 800068a:	f7ff ffcd 	bl	8000628 <spi_write>
}
 800068e:	bf00      	nop
 8000690:	3708      	adds	r7, #8
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}
	...

08000698 <register_callbacks>:

void register_callbacks(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	af00      	add	r7, sp, #0
	//critical section
	reg_wizchip_cris_cbfunc(crit_section_enter, crit_section_leave);
 800069c:	4908      	ldr	r1, [pc, #32]	@ (80006c0 <register_callbacks+0x28>)
 800069e:	4809      	ldr	r0, [pc, #36]	@ (80006c4 <register_callbacks+0x2c>)
 80006a0:	f005 fb42 	bl	8005d28 <reg_wizchip_cris_cbfunc>
	//chip select
	reg_wizchip_cs_cbfunc(spi_cs_select, spi_cs_deselect);
 80006a4:	4908      	ldr	r1, [pc, #32]	@ (80006c8 <register_callbacks+0x30>)
 80006a6:	4809      	ldr	r0, [pc, #36]	@ (80006cc <register_callbacks+0x34>)
 80006a8:	f005 fb64 	bl	8005d74 <reg_wizchip_cs_cbfunc>
	//spi
	reg_wizchip_spi_cbfunc(spi_read_byte, spi_write_byte);
 80006ac:	4908      	ldr	r1, [pc, #32]	@ (80006d0 <register_callbacks+0x38>)
 80006ae:	4809      	ldr	r0, [pc, #36]	@ (80006d4 <register_callbacks+0x3c>)
 80006b0:	f005 fb86 	bl	8005dc0 <reg_wizchip_spi_cbfunc>
	//spi burst
	reg_wizchip_spiburst_cbfunc(spi_read, spi_write);
 80006b4:	4908      	ldr	r1, [pc, #32]	@ (80006d8 <register_callbacks+0x40>)
 80006b6:	4809      	ldr	r0, [pc, #36]	@ (80006dc <register_callbacks+0x44>)
 80006b8:	f005 fbae 	bl	8005e18 <reg_wizchip_spiburst_cbfunc>
}
 80006bc:	bf00      	nop
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	080005a3 	.word	0x080005a3
 80006c4:	08000585 	.word	0x08000585
 80006c8:	080005d9 	.word	0x080005d9
 80006cc:	080005c1 	.word	0x080005c1
 80006d0:	0800067b 	.word	0x0800067b
 80006d4:	08000661 	.word	0x08000661
 80006d8:	08000629 	.word	0x08000629
 80006dc:	080005f1 	.word	0x080005f1

080006e0 <get_chip_id>:

void get_chip_id(char *buffer)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b082      	sub	sp, #8
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
	ctlwizchip(CW_GET_ID, (void *)buffer);
 80006e8:	6879      	ldr	r1, [r7, #4]
 80006ea:	2008      	movs	r0, #8
 80006ec:	f005 fbc0 	bl	8005e70 <ctlwizchip>
}
 80006f0:	bf00      	nop
 80006f2:	3708      	adds	r7, #8
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}

080006f8 <get_network_info>:
void get_network_info(wiz_NetInfo *info)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b082      	sub	sp, #8
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
	ctlnetwork(CN_GET_NETINFO, info);
 8000700:	6879      	ldr	r1, [r7, #4]
 8000702:	2001      	movs	r0, #1
 8000704:	f005 fc94 	bl	8006030 <ctlnetwork>
}
 8000708:	bf00      	nop
 800070a:	3708      	adds	r7, #8
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}

08000710 <get_timeout_info>:
void get_timeout_info(wiz_NetTimeout *timeout)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b082      	sub	sp, #8
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
	ctlnetwork(CN_GET_TIMEOUT, timeout);
 8000718:	6879      	ldr	r1, [r7, #4]
 800071a:	2005      	movs	r0, #5
 800071c:	f005 fc88 	bl	8006030 <ctlnetwork>
}
 8000720:	bf00      	nop
 8000722:	3708      	adds	r7, #8
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}

08000728 <print_network_info>:

void print_network_info(const char *chip_id, const wiz_NetInfo *info,
			const wiz_NetTimeout *timeout)
{
 8000728:	b5b0      	push	{r4, r5, r7, lr}
 800072a:	b088      	sub	sp, #32
 800072c:	af04      	add	r7, sp, #16
 800072e:	60f8      	str	r0, [r7, #12]
 8000730:	60b9      	str	r1, [r7, #8]
 8000732:	607a      	str	r2, [r7, #4]
	printf("TIMEOUT: %d, %d\r\n", timeout->retry_cnt, timeout->time_100us);
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	781b      	ldrb	r3, [r3, #0]
 8000738:	4619      	mov	r1, r3
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	885b      	ldrh	r3, [r3, #2]
 800073e:	461a      	mov	r2, r3
 8000740:	4833      	ldr	r0, [pc, #204]	@ (8000810 <print_network_info+0xe8>)
 8000742:	f006 f92b 	bl	800699c <iprintf>

	printf("\r\n=== %s NET CONF ===\r\n", chip_id);
 8000746:	68f9      	ldr	r1, [r7, #12]
 8000748:	4832      	ldr	r0, [pc, #200]	@ (8000814 <print_network_info+0xec>)
 800074a:	f006 f927 	bl	800699c <iprintf>
	printf("MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n", info->mac[0],
 800074e:	68bb      	ldr	r3, [r7, #8]
 8000750:	781b      	ldrb	r3, [r3, #0]
 8000752:	4618      	mov	r0, r3
	       info->mac[1], info->mac[2], info->mac[3], info->mac[4],
 8000754:	68bb      	ldr	r3, [r7, #8]
 8000756:	785b      	ldrb	r3, [r3, #1]
	printf("MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n", info->mac[0],
 8000758:	461c      	mov	r4, r3
	       info->mac[1], info->mac[2], info->mac[3], info->mac[4],
 800075a:	68bb      	ldr	r3, [r7, #8]
 800075c:	789b      	ldrb	r3, [r3, #2]
	printf("MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n", info->mac[0],
 800075e:	461d      	mov	r5, r3
	       info->mac[1], info->mac[2], info->mac[3], info->mac[4],
 8000760:	68bb      	ldr	r3, [r7, #8]
 8000762:	78db      	ldrb	r3, [r3, #3]
	printf("MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n", info->mac[0],
 8000764:	461a      	mov	r2, r3
	       info->mac[1], info->mac[2], info->mac[3], info->mac[4],
 8000766:	68bb      	ldr	r3, [r7, #8]
 8000768:	791b      	ldrb	r3, [r3, #4]
	printf("MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n", info->mac[0],
 800076a:	4619      	mov	r1, r3
	       info->mac[5]);
 800076c:	68bb      	ldr	r3, [r7, #8]
 800076e:	795b      	ldrb	r3, [r3, #5]
	printf("MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n", info->mac[0],
 8000770:	9302      	str	r3, [sp, #8]
 8000772:	9101      	str	r1, [sp, #4]
 8000774:	9200      	str	r2, [sp, #0]
 8000776:	462b      	mov	r3, r5
 8000778:	4622      	mov	r2, r4
 800077a:	4601      	mov	r1, r0
 800077c:	4826      	ldr	r0, [pc, #152]	@ (8000818 <print_network_info+0xf0>)
 800077e:	f006 f90d 	bl	800699c <iprintf>
	printf("IP: %d.%d.%d.%d\r\n", info->ip[0], info->ip[1], info->ip[2],
 8000782:	68bb      	ldr	r3, [r7, #8]
 8000784:	799b      	ldrb	r3, [r3, #6]
 8000786:	4619      	mov	r1, r3
 8000788:	68bb      	ldr	r3, [r7, #8]
 800078a:	79db      	ldrb	r3, [r3, #7]
 800078c:	461a      	mov	r2, r3
 800078e:	68bb      	ldr	r3, [r7, #8]
 8000790:	7a1b      	ldrb	r3, [r3, #8]
 8000792:	4618      	mov	r0, r3
	       info->ip[3]);
 8000794:	68bb      	ldr	r3, [r7, #8]
 8000796:	7a5b      	ldrb	r3, [r3, #9]
	printf("IP: %d.%d.%d.%d\r\n", info->ip[0], info->ip[1], info->ip[2],
 8000798:	9300      	str	r3, [sp, #0]
 800079a:	4603      	mov	r3, r0
 800079c:	481f      	ldr	r0, [pc, #124]	@ (800081c <print_network_info+0xf4>)
 800079e:	f006 f8fd 	bl	800699c <iprintf>
	printf("GATEWAY: %d.%d.%d.%d\r\n", info->gw[0], info->gw[1], info->gw[2],
 80007a2:	68bb      	ldr	r3, [r7, #8]
 80007a4:	7b9b      	ldrb	r3, [r3, #14]
 80007a6:	4619      	mov	r1, r3
 80007a8:	68bb      	ldr	r3, [r7, #8]
 80007aa:	7bdb      	ldrb	r3, [r3, #15]
 80007ac:	461a      	mov	r2, r3
 80007ae:	68bb      	ldr	r3, [r7, #8]
 80007b0:	7c1b      	ldrb	r3, [r3, #16]
 80007b2:	4618      	mov	r0, r3
	       info->gw[3]);
 80007b4:	68bb      	ldr	r3, [r7, #8]
 80007b6:	7c5b      	ldrb	r3, [r3, #17]
	printf("GATEWAY: %d.%d.%d.%d\r\n", info->gw[0], info->gw[1], info->gw[2],
 80007b8:	9300      	str	r3, [sp, #0]
 80007ba:	4603      	mov	r3, r0
 80007bc:	4818      	ldr	r0, [pc, #96]	@ (8000820 <print_network_info+0xf8>)
 80007be:	f006 f8ed 	bl	800699c <iprintf>
	printf("MASK: %d.%d.%d.%d\r\n", info->sn[0], info->sn[1], info->sn[2],
 80007c2:	68bb      	ldr	r3, [r7, #8]
 80007c4:	7a9b      	ldrb	r3, [r3, #10]
 80007c6:	4619      	mov	r1, r3
 80007c8:	68bb      	ldr	r3, [r7, #8]
 80007ca:	7adb      	ldrb	r3, [r3, #11]
 80007cc:	461a      	mov	r2, r3
 80007ce:	68bb      	ldr	r3, [r7, #8]
 80007d0:	7b1b      	ldrb	r3, [r3, #12]
 80007d2:	4618      	mov	r0, r3
	       info->sn[3]);
 80007d4:	68bb      	ldr	r3, [r7, #8]
 80007d6:	7b5b      	ldrb	r3, [r3, #13]
	printf("MASK: %d.%d.%d.%d\r\n", info->sn[0], info->sn[1], info->sn[2],
 80007d8:	9300      	str	r3, [sp, #0]
 80007da:	4603      	mov	r3, r0
 80007dc:	4811      	ldr	r0, [pc, #68]	@ (8000824 <print_network_info+0xfc>)
 80007de:	f006 f8dd 	bl	800699c <iprintf>
	printf("DNS: %d.%d.%d.%d\r\n", info->dns[0], info->dns[1], info->dns[2],
 80007e2:	68bb      	ldr	r3, [r7, #8]
 80007e4:	7c9b      	ldrb	r3, [r3, #18]
 80007e6:	4619      	mov	r1, r3
 80007e8:	68bb      	ldr	r3, [r7, #8]
 80007ea:	7cdb      	ldrb	r3, [r3, #19]
 80007ec:	461a      	mov	r2, r3
 80007ee:	68bb      	ldr	r3, [r7, #8]
 80007f0:	7d1b      	ldrb	r3, [r3, #20]
 80007f2:	4618      	mov	r0, r3
	       info->dns[3]);
 80007f4:	68bb      	ldr	r3, [r7, #8]
 80007f6:	7d5b      	ldrb	r3, [r3, #21]
	printf("DNS: %d.%d.%d.%d\r\n", info->dns[0], info->dns[1], info->dns[2],
 80007f8:	9300      	str	r3, [sp, #0]
 80007fa:	4603      	mov	r3, r0
 80007fc:	480a      	ldr	r0, [pc, #40]	@ (8000828 <print_network_info+0x100>)
 80007fe:	f006 f8cd 	bl	800699c <iprintf>
	printf("======================\r\n");
 8000802:	480a      	ldr	r0, [pc, #40]	@ (800082c <print_network_info+0x104>)
 8000804:	f006 f932 	bl	8006a6c <puts>
}
 8000808:	bf00      	nop
 800080a:	3710      	adds	r7, #16
 800080c:	46bd      	mov	sp, r7
 800080e:	bdb0      	pop	{r4, r5, r7, pc}
 8000810:	0800775c 	.word	0x0800775c
 8000814:	08007770 	.word	0x08007770
 8000818:	08007788 	.word	0x08007788
 800081c:	080077b0 	.word	0x080077b0
 8000820:	080077c4 	.word	0x080077c4
 8000824:	080077dc 	.word	0x080077dc
 8000828:	080077f0 	.word	0x080077f0
 800082c:	08007804 	.word	0x08007804

08000830 <network_init>:
void network_init(wiz_NetInfo *info, wiz_NetTimeout *timeout)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b082      	sub	sp, #8
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
 8000838:	6039      	str	r1, [r7, #0]
	ctlnetwork(CN_SET_TIMEOUT, (void *)timeout);
 800083a:	6839      	ldr	r1, [r7, #0]
 800083c:	2004      	movs	r0, #4
 800083e:	f005 fbf7 	bl	8006030 <ctlnetwork>
	ctlnetwork(CN_SET_NETINFO, (void *)info);
 8000842:	6879      	ldr	r1, [r7, #4]
 8000844:	2000      	movs	r0, #0
 8000846:	f005 fbf3 	bl	8006030 <ctlnetwork>
}
 800084a:	bf00      	nop
 800084c:	3708      	adds	r7, #8
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}
	...

08000854 <handle_tcp_connection>:
		break;
	}
	old_dhcp_ret = dhcp_ret;
}
void handle_tcp_connection(void)
{
 8000854:	b590      	push	{r4, r7, lr}
 8000856:	b087      	sub	sp, #28
 8000858:	af02      	add	r7, sp, #8
	int32_t size, size_tx_sent = 0;
 800085a:	2300      	movs	r3, #0
 800085c:	60bb      	str	r3, [r7, #8]
	static uint16_t current_port = 50000;
	switch (getSn_SR(TCP_SOCKET)) {
 800085e:	f44f 704a 	mov.w	r0, #808	@ 0x328
 8000862:	f004 fadd 	bl	8004e20 <WIZCHIP_READ>
 8000866:	4603      	mov	r3, r0
 8000868:	2b1c      	cmp	r3, #28
 800086a:	f200 80f2 	bhi.w	8000a52 <handle_tcp_connection+0x1fe>
 800086e:	a201      	add	r2, pc, #4	@ (adr r2, 8000874 <handle_tcp_connection+0x20>)
 8000870:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000874:	08000a03 	.word	0x08000a03
 8000878:	08000a53 	.word	0x08000a53
 800087c:	08000a53 	.word	0x08000a53
 8000880:	08000a53 	.word	0x08000a53
 8000884:	08000a53 	.word	0x08000a53
 8000888:	08000a53 	.word	0x08000a53
 800088c:	08000a53 	.word	0x08000a53
 8000890:	08000a53 	.word	0x08000a53
 8000894:	08000a53 	.word	0x08000a53
 8000898:	08000a53 	.word	0x08000a53
 800089c:	08000a53 	.word	0x08000a53
 80008a0:	08000a53 	.word	0x08000a53
 80008a4:	08000a53 	.word	0x08000a53
 80008a8:	08000a53 	.word	0x08000a53
 80008ac:	08000a53 	.word	0x08000a53
 80008b0:	08000a53 	.word	0x08000a53
 80008b4:	08000a53 	.word	0x08000a53
 80008b8:	08000a53 	.word	0x08000a53
 80008bc:	08000a53 	.word	0x08000a53
 80008c0:	080009bf 	.word	0x080009bf
 80008c4:	08000a53 	.word	0x08000a53
 80008c8:	08000a53 	.word	0x08000a53
 80008cc:	08000a53 	.word	0x08000a53
 80008d0:	080008e9 	.word	0x080008e9
 80008d4:	08000a53 	.word	0x08000a53
 80008d8:	08000a53 	.word	0x08000a53
 80008dc:	08000a53 	.word	0x08000a53
 80008e0:	08000a53 	.word	0x08000a53
 80008e4:	080009ab 	.word	0x080009ab
	case SOCK_ESTABLISHED:

		if (getSn_IR(TCP_SOCKET) & Sn_IR_CON) { // Interrupt flag
 80008e8:	f44f 700a 	mov.w	r0, #552	@ 0x228
 80008ec:	f004 fa98 	bl	8004e20 <WIZCHIP_READ>
 80008f0:	4603      	mov	r3, r0
 80008f2:	f003 0301 	and.w	r3, r3, #1
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d004      	beq.n	8000904 <handle_tcp_connection+0xb0>
			setSn_IR(TCP_SOCKET, Sn_IR_CON); // clear interrupt flag
 80008fa:	2101      	movs	r1, #1
 80008fc:	f44f 700a 	mov.w	r0, #552	@ 0x228
 8000900:	f004 fada 	bl	8004eb8 <WIZCHIP_WRITE>
		}
		if ((size = getSn_RX_RSR(TCP_SOCKET)) <= 0) {
 8000904:	2001      	movs	r0, #1
 8000906:	f004 fc2e 	bl	8005166 <getSn_RX_RSR>
 800090a:	4603      	mov	r3, r0
 800090c:	60fb      	str	r3, [r7, #12]
 800090e:	68fb      	ldr	r3, [r7, #12]
 8000910:	2b00      	cmp	r3, #0
 8000912:	f340 8095 	ble.w	8000a40 <handle_tcp_connection+0x1ec>
			break;
		}
		if (size > TCP_BUFFER_SIZE) {
 8000916:	68fb      	ldr	r3, [r7, #12]
 8000918:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800091c:	dd02      	ble.n	8000924 <handle_tcp_connection+0xd0>
			size = TCP_BUFFER_SIZE;
 800091e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000922:	60fb      	str	r3, [r7, #12]
		}
		size = recv(TCP_SOCKET, tcp_buffer, size);
 8000924:	68fb      	ldr	r3, [r7, #12]
 8000926:	b29b      	uxth	r3, r3
 8000928:	461a      	mov	r2, r3
 800092a:	494b      	ldr	r1, [pc, #300]	@ (8000a58 <handle_tcp_connection+0x204>)
 800092c:	2001      	movs	r0, #1
 800092e:	f005 f8e3 	bl	8005af8 <recv>
 8000932:	60f8      	str	r0, [r7, #12]
		if (size <= 0) {
 8000934:	68fb      	ldr	r3, [r7, #12]
 8000936:	2b00      	cmp	r3, #0
 8000938:	dc04      	bgt.n	8000944 <handle_tcp_connection+0xf0>
			printf("Received failed %d\r\n", size);
 800093a:	68f9      	ldr	r1, [r7, #12]
 800093c:	4847      	ldr	r0, [pc, #284]	@ (8000a5c <handle_tcp_connection+0x208>)
 800093e:	f006 f82d 	bl	800699c <iprintf>
			break;
 8000942:	e086      	b.n	8000a52 <handle_tcp_connection+0x1fe>
		}
		for (int32_t i = 0; i < size; ++i) {
 8000944:	2300      	movs	r3, #0
 8000946:	607b      	str	r3, [r7, #4]
 8000948:	e00d      	b.n	8000966 <handle_tcp_connection+0x112>
			tcp_buffer[i]++;
 800094a:	4a43      	ldr	r2, [pc, #268]	@ (8000a58 <handle_tcp_connection+0x204>)
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	4413      	add	r3, r2
 8000950:	781b      	ldrb	r3, [r3, #0]
 8000952:	3301      	adds	r3, #1
 8000954:	b2d9      	uxtb	r1, r3
 8000956:	4a40      	ldr	r2, [pc, #256]	@ (8000a58 <handle_tcp_connection+0x204>)
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	4413      	add	r3, r2
 800095c:	460a      	mov	r2, r1
 800095e:	701a      	strb	r2, [r3, #0]
		for (int32_t i = 0; i < size; ++i) {
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	3301      	adds	r3, #1
 8000964:	607b      	str	r3, [r7, #4]
 8000966:	687a      	ldr	r2, [r7, #4]
 8000968:	68fb      	ldr	r3, [r7, #12]
 800096a:	429a      	cmp	r2, r3
 800096c:	dbed      	blt.n	800094a <handle_tcp_connection+0xf6>
		}
		while (size_tx_sent < size) {
 800096e:	e017      	b.n	80009a0 <handle_tcp_connection+0x14c>
			size_tx_sent += send(TCP_SOCKET,
 8000970:	68bb      	ldr	r3, [r7, #8]
 8000972:	4a39      	ldr	r2, [pc, #228]	@ (8000a58 <handle_tcp_connection+0x204>)
 8000974:	4413      	add	r3, r2
 8000976:	68fa      	ldr	r2, [r7, #12]
 8000978:	b292      	uxth	r2, r2
 800097a:	4619      	mov	r1, r3
 800097c:	2001      	movs	r0, #1
 800097e:	f004 ffc3 	bl	8005908 <send>
 8000982:	4602      	mov	r2, r0
 8000984:	68bb      	ldr	r3, [r7, #8]
 8000986:	4413      	add	r3, r2
 8000988:	60bb      	str	r3, [r7, #8]
					     tcp_buffer + size_tx_sent, size);
			if (size_tx_sent < 0) {
 800098a:	68bb      	ldr	r3, [r7, #8]
 800098c:	2b00      	cmp	r3, #0
 800098e:	da07      	bge.n	80009a0 <handle_tcp_connection+0x14c>
				printf("Send Error %d. Closing socket\r\n",
 8000990:	68b9      	ldr	r1, [r7, #8]
 8000992:	4833      	ldr	r0, [pc, #204]	@ (8000a60 <handle_tcp_connection+0x20c>)
 8000994:	f006 f802 	bl	800699c <iprintf>
				       size_tx_sent);
				close(TCP_SOCKET);
 8000998:	2001      	movs	r0, #1
 800099a:	f004 fdf5 	bl	8005588 <close>
				return;
 800099e:	e058      	b.n	8000a52 <handle_tcp_connection+0x1fe>
		while (size_tx_sent < size) {
 80009a0:	68ba      	ldr	r2, [r7, #8]
 80009a2:	68fb      	ldr	r3, [r7, #12]
 80009a4:	429a      	cmp	r2, r3
 80009a6:	dbe3      	blt.n	8000970 <handle_tcp_connection+0x11c>
			}
		}
		break;
 80009a8:	e053      	b.n	8000a52 <handle_tcp_connection+0x1fe>
	case SOCK_CLOSE_WAIT:
		if (disconnect(TCP_SOCKET) != SOCK_OK) {
 80009aa:	2001      	movs	r0, #1
 80009ac:	f004 ff36 	bl	800581c <disconnect>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b01      	cmp	r3, #1
 80009b4:	d146      	bne.n	8000a44 <handle_tcp_connection+0x1f0>
			break;
		}
		printf("Socket closed\r\n");
 80009b6:	482b      	ldr	r0, [pc, #172]	@ (8000a64 <handle_tcp_connection+0x210>)
 80009b8:	f006 f858 	bl	8006a6c <puts>
		break;
 80009bc:	e049      	b.n	8000a52 <handle_tcp_connection+0x1fe>
	case SOCK_INIT:
		printf("Connecting to %d.%d.%d.%d:%d\r\n", dst_ip[0], dst_ip[1],
 80009be:	4b2a      	ldr	r3, [pc, #168]	@ (8000a68 <handle_tcp_connection+0x214>)
 80009c0:	781b      	ldrb	r3, [r3, #0]
 80009c2:	4619      	mov	r1, r3
 80009c4:	4b28      	ldr	r3, [pc, #160]	@ (8000a68 <handle_tcp_connection+0x214>)
 80009c6:	785b      	ldrb	r3, [r3, #1]
 80009c8:	4618      	mov	r0, r3
		       dst_ip[2], dst_ip[3], dst_port);
 80009ca:	4b27      	ldr	r3, [pc, #156]	@ (8000a68 <handle_tcp_connection+0x214>)
 80009cc:	789b      	ldrb	r3, [r3, #2]
		printf("Connecting to %d.%d.%d.%d:%d\r\n", dst_ip[0], dst_ip[1],
 80009ce:	461c      	mov	r4, r3
		       dst_ip[2], dst_ip[3], dst_port);
 80009d0:	4b25      	ldr	r3, [pc, #148]	@ (8000a68 <handle_tcp_connection+0x214>)
 80009d2:	78db      	ldrb	r3, [r3, #3]
		printf("Connecting to %d.%d.%d.%d:%d\r\n", dst_ip[0], dst_ip[1],
 80009d4:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 80009d8:	9201      	str	r2, [sp, #4]
 80009da:	9300      	str	r3, [sp, #0]
 80009dc:	4623      	mov	r3, r4
 80009de:	4602      	mov	r2, r0
 80009e0:	4822      	ldr	r0, [pc, #136]	@ (8000a6c <handle_tcp_connection+0x218>)
 80009e2:	f005 ffdb 	bl	800699c <iprintf>
		if (connect(TCP_SOCKET, dst_ip, dst_port) != SOCK_OK) {
 80009e6:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 80009ea:	461a      	mov	r2, r3
 80009ec:	491e      	ldr	r1, [pc, #120]	@ (8000a68 <handle_tcp_connection+0x214>)
 80009ee:	2001      	movs	r0, #1
 80009f0:	f004 fe38 	bl	8005664 <connect>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b01      	cmp	r3, #1
 80009f8:	d126      	bne.n	8000a48 <handle_tcp_connection+0x1f4>
			return;
		}
		printf("Connected !\r\n");
 80009fa:	481d      	ldr	r0, [pc, #116]	@ (8000a70 <handle_tcp_connection+0x21c>)
 80009fc:	f006 f836 	bl	8006a6c <puts>
		break;
 8000a00:	e027      	b.n	8000a52 <handle_tcp_connection+0x1fe>
	case SOCK_CLOSED:
		printf("sock closed !\r\n");
 8000a02:	481c      	ldr	r0, [pc, #112]	@ (8000a74 <handle_tcp_connection+0x220>)
 8000a04:	f006 f832 	bl	8006a6c <puts>
		close(TCP_SOCKET);
 8000a08:	2001      	movs	r0, #1
 8000a0a:	f004 fdbd 	bl	8005588 <close>
		if (socket(TCP_SOCKET, Sn_MR_TCP, current_port++, 0x00) !=
 8000a0e:	4b1a      	ldr	r3, [pc, #104]	@ (8000a78 <handle_tcp_connection+0x224>)
 8000a10:	881a      	ldrh	r2, [r3, #0]
 8000a12:	1c53      	adds	r3, r2, #1
 8000a14:	b299      	uxth	r1, r3
 8000a16:	4b18      	ldr	r3, [pc, #96]	@ (8000a78 <handle_tcp_connection+0x224>)
 8000a18:	8019      	strh	r1, [r3, #0]
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	2101      	movs	r1, #1
 8000a1e:	2001      	movs	r0, #1
 8000a20:	f004 fc9e 	bl	8005360 <socket>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b01      	cmp	r3, #1
 8000a28:	d010      	beq.n	8000a4c <handle_tcp_connection+0x1f8>
		    TCP_SOCKET) {
			if (current_port == 0xffff) {
 8000a2a:	4b13      	ldr	r3, [pc, #76]	@ (8000a78 <handle_tcp_connection+0x224>)
 8000a2c:	881b      	ldrh	r3, [r3, #0]
 8000a2e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000a32:	4293      	cmp	r3, r2
 8000a34:	d10c      	bne.n	8000a50 <handle_tcp_connection+0x1fc>
				current_port = 50000;
 8000a36:	4b10      	ldr	r3, [pc, #64]	@ (8000a78 <handle_tcp_connection+0x224>)
 8000a38:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8000a3c:	801a      	strh	r2, [r3, #0]
			}
			break;
 8000a3e:	e007      	b.n	8000a50 <handle_tcp_connection+0x1fc>
			break;
 8000a40:	bf00      	nop
 8000a42:	e006      	b.n	8000a52 <handle_tcp_connection+0x1fe>
			break;
 8000a44:	bf00      	nop
 8000a46:	e004      	b.n	8000a52 <handle_tcp_connection+0x1fe>
			return;
 8000a48:	bf00      	nop
 8000a4a:	e002      	b.n	8000a52 <handle_tcp_connection+0x1fe>
		}
		break;
 8000a4c:	bf00      	nop
 8000a4e:	e000      	b.n	8000a52 <handle_tcp_connection+0x1fe>
			break;
 8000a50:	bf00      	nop
	}
}
 8000a52:	3714      	adds	r7, #20
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bd90      	pop	{r4, r7, pc}
 8000a58:	200001fc 	.word	0x200001fc
 8000a5c:	080078cc 	.word	0x080078cc
 8000a60:	080078e4 	.word	0x080078e4
 8000a64:	08007904 	.word	0x08007904
 8000a68:	20000008 	.word	0x20000008
 8000a6c:	08007914 	.word	0x08007914
 8000a70:	08007934 	.word	0x08007934
 8000a74:	08007944 	.word	0x08007944
 8000a78:	20000010 	.word	0x20000010

08000a7c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b082      	sub	sp, #8
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
	if (htim == &htim16) {
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	4a04      	ldr	r2, [pc, #16]	@ (8000a98 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8000a88:	4293      	cmp	r3, r2
 8000a8a:	d101      	bne.n	8000a90 <HAL_TIM_PeriodElapsedCallback+0x14>
		DHCP_time_handler();
 8000a8c:	f005 feb6 	bl	80067fc <DHCP_time_handler>
	}
}
 8000a90:	bf00      	nop
 8000a92:	3708      	adds	r7, #8
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	200001b0 	.word	0x200001b0

08000a9c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a9c:	b590      	push	{r4, r7, lr}
 8000a9e:	b08f      	sub	sp, #60	@ 0x3c
 8000aa0:	af00      	add	r7, sp, #0
	uint8_t memsize[2][8] = { { 2, 2, 2, 2, 2, 2, 2, 2 },
 8000aa2:	4b34      	ldr	r3, [pc, #208]	@ (8000b74 <main+0xd8>)
 8000aa4:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 8000aa8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000aaa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
				  { 2, 2, 2, 2, 2, 2, 2, 2 } };
	HAL_Init();
 8000aae:	f000 fbc9 	bl	8001244 <HAL_Init>

	SystemClock_Config();
 8000ab2:	f000 f86f 	bl	8000b94 <SystemClock_Config>

	MX_GPIO_Init();
 8000ab6:	f000 f957 	bl	8000d68 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8000aba:	f000 f925 	bl	8000d08 <MX_USART2_UART_Init>
	MX_SPI1_Init();
 8000abe:	f000 f8e5 	bl	8000c8c <MX_SPI1_Init>
	MX_TIM16_Init();
 8000ac2:	f000 f8b9 	bl	8000c38 <MX_TIM16_Init>

	register_callbacks();
 8000ac6:	f7ff fde7 	bl	8000698 <register_callbacks>
	if (ctlwizchip(0, (void *)memsize) == -1) {
 8000aca:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000ace:	4619      	mov	r1, r3
 8000ad0:	2000      	movs	r0, #0
 8000ad2:	f005 f9cd 	bl	8005e70 <ctlwizchip>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000adc:	d104      	bne.n	8000ae8 <main+0x4c>
		printf("WIZCHIP Initialized fail.\r\n");
 8000ade:	4826      	ldr	r0, [pc, #152]	@ (8000b78 <main+0xdc>)
 8000ae0:	f005 ffc4 	bl	8006a6c <puts>
		Error_Handler();
 8000ae4:	f000 f9a6 	bl	8000e34 <Error_Handler>
	setSHAR(mac_address);
	reg_dhcp_cbfunc(on_dhcp_ip_assign, on_dhcp_ip_renewed,
			on_dhcp_ip_conflict);
	DHCP_init(DHCP_SOCKET, dhcp_buffer);
#else
	wiz_NetInfo info = {
 8000ae8:	f107 0310 	add.w	r3, r7, #16
 8000aec:	2200      	movs	r2, #0
 8000aee:	601a      	str	r2, [r3, #0]
 8000af0:	605a      	str	r2, [r3, #4]
 8000af2:	609a      	str	r2, [r3, #8]
 8000af4:	60da      	str	r2, [r3, #12]
 8000af6:	611a      	str	r2, [r3, #16]
 8000af8:	f8c3 2013 	str.w	r2, [r3, #19]
 8000afc:	4a1f      	ldr	r2, [pc, #124]	@ (8000b7c <main+0xe0>)
 8000afe:	f107 0316 	add.w	r3, r7, #22
 8000b02:	6810      	ldr	r0, [r2, #0]
 8000b04:	6018      	str	r0, [r3, #0]
 8000b06:	4a1e      	ldr	r2, [pc, #120]	@ (8000b80 <main+0xe4>)
 8000b08:	f107 031a 	add.w	r3, r7, #26
 8000b0c:	6810      	ldr	r0, [r2, #0]
 8000b0e:	6018      	str	r0, [r3, #0]
 8000b10:	4a1c      	ldr	r2, [pc, #112]	@ (8000b84 <main+0xe8>)
 8000b12:	f107 031e 	add.w	r3, r7, #30
 8000b16:	6810      	ldr	r0, [r2, #0]
 8000b18:	6018      	str	r0, [r3, #0]
 8000b1a:	2301      	movs	r3, #1
 8000b1c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
				 .gw = { 192, 168, 1, 1 },
			     .ip = { 192, 168, 1, 200 },
			     .sn = { 255, 255, 255, 0 },
			     .dhcp = NETINFO_STATIC };
	memcpy(info.mac, mac_address, sizeof(mac_address));
 8000b20:	4a19      	ldr	r2, [pc, #100]	@ (8000b88 <main+0xec>)
 8000b22:	f107 0310 	add.w	r3, r7, #16
 8000b26:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000b2a:	6018      	str	r0, [r3, #0]
 8000b2c:	3304      	adds	r3, #4
 8000b2e:	8019      	strh	r1, [r3, #0]
	wiz_NetTimeout timeout;
	char chip_id[6];
	network_init(&info, &wiznet_timeout);
 8000b30:	f107 0310 	add.w	r3, r7, #16
 8000b34:	4915      	ldr	r1, [pc, #84]	@ (8000b8c <main+0xf0>)
 8000b36:	4618      	mov	r0, r3
 8000b38:	f7ff fe7a 	bl	8000830 <network_init>
	get_network_info(&info);
 8000b3c:	f107 0310 	add.w	r3, r7, #16
 8000b40:	4618      	mov	r0, r3
 8000b42:	f7ff fdd9 	bl	80006f8 <get_network_info>
	get_timeout_info(&timeout);
 8000b46:	f107 030c 	add.w	r3, r7, #12
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	f7ff fde0 	bl	8000710 <get_timeout_info>
	get_chip_id(chip_id);
 8000b50:	1d3b      	adds	r3, r7, #4
 8000b52:	4618      	mov	r0, r3
 8000b54:	f7ff fdc4 	bl	80006e0 <get_chip_id>
	print_network_info(chip_id, &info, &timeout);
 8000b58:	f107 020c 	add.w	r2, r7, #12
 8000b5c:	f107 0110 	add.w	r1, r7, #16
 8000b60:	1d3b      	adds	r3, r7, #4
 8000b62:	4618      	mov	r0, r3
 8000b64:	f7ff fde0 	bl	8000728 <print_network_info>
#endif
	printf("Hello World!\r\n");
 8000b68:	4809      	ldr	r0, [pc, #36]	@ (8000b90 <main+0xf4>)
 8000b6a:	f005 ff7f 	bl	8006a6c <puts>
	while (1) {
#ifdef DHCP
		handle_dhcp();
#endif
		handle_tcp_connection();
 8000b6e:	f7ff fe71 	bl	8000854 <handle_tcp_connection>
 8000b72:	e7fc      	b.n	8000b6e <main+0xd2>
 8000b74:	08007980 	.word	0x08007980
 8000b78:	08007954 	.word	0x08007954
 8000b7c:	08007990 	.word	0x08007990
 8000b80:	08007994 	.word	0x08007994
 8000b84:	08007998 	.word	0x08007998
 8000b88:	20000000 	.word	0x20000000
 8000b8c:	2000000c 	.word	0x2000000c
 8000b90:	08007970 	.word	0x08007970

08000b94 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b096      	sub	sp, #88	@ 0x58
 8000b98:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000b9a:	f107 0314 	add.w	r3, r7, #20
 8000b9e:	2244      	movs	r2, #68	@ 0x44
 8000ba0:	2100      	movs	r1, #0
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f006 f842 	bl	8006c2c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000ba8:	463b      	mov	r3, r7
 8000baa:	2200      	movs	r2, #0
 8000bac:	601a      	str	r2, [r3, #0]
 8000bae:	605a      	str	r2, [r3, #4]
 8000bb0:	609a      	str	r2, [r3, #8]
 8000bb2:	60da      	str	r2, [r3, #12]
 8000bb4:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
  */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) !=
 8000bb6:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000bba:	f000 fea1 	bl	8001900 <HAL_PWREx_ControlVoltageScaling>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d001      	beq.n	8000bc8 <SystemClock_Config+0x34>
	    HAL_OK) {
		Error_Handler();
 8000bc4:	f000 f936 	bl	8000e34 <Error_Handler>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000bc8:	2302      	movs	r3, #2
 8000bca:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bcc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000bd0:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000bd2:	2310      	movs	r3, #16
 8000bd4:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bd6:	2302      	movs	r3, #2
 8000bd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000bda:	2302      	movs	r3, #2
 8000bdc:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLM = 1;
 8000bde:	2301      	movs	r3, #1
 8000be0:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLN = 10;
 8000be2:	230a      	movs	r3, #10
 8000be4:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000be6:	2307      	movs	r3, #7
 8000be8:	64fb      	str	r3, [r7, #76]	@ 0x4c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000bea:	2302      	movs	r3, #2
 8000bec:	653b      	str	r3, [r7, #80]	@ 0x50
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000bee:	2302      	movs	r3, #2
 8000bf0:	657b      	str	r3, [r7, #84]	@ 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000bf2:	f107 0314 	add.w	r3, r7, #20
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f000 fed8 	bl	80019ac <HAL_RCC_OscConfig>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d001      	beq.n	8000c06 <SystemClock_Config+0x72>
		Error_Handler();
 8000c02:	f000 f917 	bl	8000e34 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
  */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK |
 8000c06:	230f      	movs	r3, #15
 8000c08:	603b      	str	r3, [r7, #0]
				      RCC_CLOCKTYPE_SYSCLK |
				      RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c0a:	2303      	movs	r3, #3
 8000c0c:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c12:	2300      	movs	r3, #0
 8000c14:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c16:	2300      	movs	r3, #0
 8000c18:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) !=
 8000c1a:	463b      	mov	r3, r7
 8000c1c:	2104      	movs	r1, #4
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f001 faa0 	bl	8002164 <HAL_RCC_ClockConfig>
 8000c24:	4603      	mov	r3, r0
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d001      	beq.n	8000c2e <SystemClock_Config+0x9a>
	    HAL_OK) {
		Error_Handler();
 8000c2a:	f000 f903 	bl	8000e34 <Error_Handler>
	}
}
 8000c2e:	bf00      	nop
 8000c30:	3758      	adds	r7, #88	@ 0x58
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
	...

08000c38 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
	htim16.Instance = TIM16;
 8000c3c:	4b11      	ldr	r3, [pc, #68]	@ (8000c84 <MX_TIM16_Init+0x4c>)
 8000c3e:	4a12      	ldr	r2, [pc, #72]	@ (8000c88 <MX_TIM16_Init+0x50>)
 8000c40:	601a      	str	r2, [r3, #0]
	htim16.Init.Prescaler = 8000 - 1;
 8000c42:	4b10      	ldr	r3, [pc, #64]	@ (8000c84 <MX_TIM16_Init+0x4c>)
 8000c44:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8000c48:	605a      	str	r2, [r3, #4]
	htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c4a:	4b0e      	ldr	r3, [pc, #56]	@ (8000c84 <MX_TIM16_Init+0x4c>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	609a      	str	r2, [r3, #8]
	htim16.Init.Period = 10000 - 1;
 8000c50:	4b0c      	ldr	r3, [pc, #48]	@ (8000c84 <MX_TIM16_Init+0x4c>)
 8000c52:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000c56:	60da      	str	r2, [r3, #12]
	htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c58:	4b0a      	ldr	r3, [pc, #40]	@ (8000c84 <MX_TIM16_Init+0x4c>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	611a      	str	r2, [r3, #16]
	htim16.Init.RepetitionCounter = 0;
 8000c5e:	4b09      	ldr	r3, [pc, #36]	@ (8000c84 <MX_TIM16_Init+0x4c>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	615a      	str	r2, [r3, #20]
	htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c64:	4b07      	ldr	r3, [pc, #28]	@ (8000c84 <MX_TIM16_Init+0x4c>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim16) != HAL_OK) {
 8000c6a:	4806      	ldr	r0, [pc, #24]	@ (8000c84 <MX_TIM16_Init+0x4c>)
 8000c6c:	f003 f888 	bl	8003d80 <HAL_TIM_Base_Init>
 8000c70:	4603      	mov	r3, r0
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d001      	beq.n	8000c7a <MX_TIM16_Init+0x42>
		Error_Handler();
 8000c76:	f000 f8dd 	bl	8000e34 <Error_Handler>
	}
	HAL_TIM_Base_Start_IT(&htim16);
 8000c7a:	4802      	ldr	r0, [pc, #8]	@ (8000c84 <MX_TIM16_Init+0x4c>)
 8000c7c:	f003 f8d8 	bl	8003e30 <HAL_TIM_Base_Start_IT>
}
 8000c80:	bf00      	nop
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	200001b0 	.word	0x200001b0
 8000c88:	40014400 	.word	0x40014400

08000c8c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	af00      	add	r7, sp, #0
	/* SPI1 parameter configuration*/
	w5500_spi.Instance = SPI1;
 8000c90:	4b1b      	ldr	r3, [pc, #108]	@ (8000d00 <MX_SPI1_Init+0x74>)
 8000c92:	4a1c      	ldr	r2, [pc, #112]	@ (8000d04 <MX_SPI1_Init+0x78>)
 8000c94:	601a      	str	r2, [r3, #0]
	w5500_spi.Init.Mode = SPI_MODE_MASTER;
 8000c96:	4b1a      	ldr	r3, [pc, #104]	@ (8000d00 <MX_SPI1_Init+0x74>)
 8000c98:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000c9c:	605a      	str	r2, [r3, #4]
	w5500_spi.Init.Direction = SPI_DIRECTION_2LINES;
 8000c9e:	4b18      	ldr	r3, [pc, #96]	@ (8000d00 <MX_SPI1_Init+0x74>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	609a      	str	r2, [r3, #8]
	w5500_spi.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ca4:	4b16      	ldr	r3, [pc, #88]	@ (8000d00 <MX_SPI1_Init+0x74>)
 8000ca6:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000caa:	60da      	str	r2, [r3, #12]
	w5500_spi.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000cac:	4b14      	ldr	r3, [pc, #80]	@ (8000d00 <MX_SPI1_Init+0x74>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	611a      	str	r2, [r3, #16]
	w5500_spi.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000cb2:	4b13      	ldr	r3, [pc, #76]	@ (8000d00 <MX_SPI1_Init+0x74>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	615a      	str	r2, [r3, #20]
	w5500_spi.Init.NSS = SPI_NSS_SOFT;
 8000cb8:	4b11      	ldr	r3, [pc, #68]	@ (8000d00 <MX_SPI1_Init+0x74>)
 8000cba:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000cbe:	619a      	str	r2, [r3, #24]
	w5500_spi.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000cc0:	4b0f      	ldr	r3, [pc, #60]	@ (8000d00 <MX_SPI1_Init+0x74>)
 8000cc2:	2208      	movs	r2, #8
 8000cc4:	61da      	str	r2, [r3, #28]
	w5500_spi.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000cc6:	4b0e      	ldr	r3, [pc, #56]	@ (8000d00 <MX_SPI1_Init+0x74>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	621a      	str	r2, [r3, #32]
	w5500_spi.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ccc:	4b0c      	ldr	r3, [pc, #48]	@ (8000d00 <MX_SPI1_Init+0x74>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	625a      	str	r2, [r3, #36]	@ 0x24
	w5500_spi.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000cd2:	4b0b      	ldr	r3, [pc, #44]	@ (8000d00 <MX_SPI1_Init+0x74>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	629a      	str	r2, [r3, #40]	@ 0x28
	w5500_spi.Init.CRCPolynomial = 7;
 8000cd8:	4b09      	ldr	r3, [pc, #36]	@ (8000d00 <MX_SPI1_Init+0x74>)
 8000cda:	2207      	movs	r2, #7
 8000cdc:	62da      	str	r2, [r3, #44]	@ 0x2c
	w5500_spi.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000cde:	4b08      	ldr	r3, [pc, #32]	@ (8000d00 <MX_SPI1_Init+0x74>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	631a      	str	r2, [r3, #48]	@ 0x30
	w5500_spi.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000ce4:	4b06      	ldr	r3, [pc, #24]	@ (8000d00 <MX_SPI1_Init+0x74>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	635a      	str	r2, [r3, #52]	@ 0x34
	if (HAL_SPI_Init(&w5500_spi) != HAL_OK) {
 8000cea:	4805      	ldr	r0, [pc, #20]	@ (8000d00 <MX_SPI1_Init+0x74>)
 8000cec:	f002 f91a 	bl	8002f24 <HAL_SPI_Init>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d001      	beq.n	8000cfa <MX_SPI1_Init+0x6e>
		Error_Handler();
 8000cf6:	f000 f89d 	bl	8000e34 <Error_Handler>
	}
}
 8000cfa:	bf00      	nop
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	200000c4 	.word	0x200000c4
 8000d04:	40013000 	.word	0x40013000

08000d08 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0
	console_uart.Instance = USART2;
 8000d0c:	4b14      	ldr	r3, [pc, #80]	@ (8000d60 <MX_USART2_UART_Init+0x58>)
 8000d0e:	4a15      	ldr	r2, [pc, #84]	@ (8000d64 <MX_USART2_UART_Init+0x5c>)
 8000d10:	601a      	str	r2, [r3, #0]
	console_uart.Init.BaudRate = 115200;
 8000d12:	4b13      	ldr	r3, [pc, #76]	@ (8000d60 <MX_USART2_UART_Init+0x58>)
 8000d14:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000d18:	605a      	str	r2, [r3, #4]
	console_uart.Init.WordLength = UART_WORDLENGTH_8B;
 8000d1a:	4b11      	ldr	r3, [pc, #68]	@ (8000d60 <MX_USART2_UART_Init+0x58>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	609a      	str	r2, [r3, #8]
	console_uart.Init.StopBits = UART_STOPBITS_1;
 8000d20:	4b0f      	ldr	r3, [pc, #60]	@ (8000d60 <MX_USART2_UART_Init+0x58>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	60da      	str	r2, [r3, #12]
	console_uart.Init.Parity = UART_PARITY_NONE;
 8000d26:	4b0e      	ldr	r3, [pc, #56]	@ (8000d60 <MX_USART2_UART_Init+0x58>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	611a      	str	r2, [r3, #16]
	console_uart.Init.Mode = UART_MODE_TX_RX;
 8000d2c:	4b0c      	ldr	r3, [pc, #48]	@ (8000d60 <MX_USART2_UART_Init+0x58>)
 8000d2e:	220c      	movs	r2, #12
 8000d30:	615a      	str	r2, [r3, #20]
	console_uart.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d32:	4b0b      	ldr	r3, [pc, #44]	@ (8000d60 <MX_USART2_UART_Init+0x58>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	619a      	str	r2, [r3, #24]
	console_uart.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d38:	4b09      	ldr	r3, [pc, #36]	@ (8000d60 <MX_USART2_UART_Init+0x58>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	61da      	str	r2, [r3, #28]
	console_uart.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d3e:	4b08      	ldr	r3, [pc, #32]	@ (8000d60 <MX_USART2_UART_Init+0x58>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	621a      	str	r2, [r3, #32]
	console_uart.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d44:	4b06      	ldr	r3, [pc, #24]	@ (8000d60 <MX_USART2_UART_Init+0x58>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	625a      	str	r2, [r3, #36]	@ 0x24
	if (HAL_UART_Init(&console_uart) != HAL_OK) {
 8000d4a:	4805      	ldr	r0, [pc, #20]	@ (8000d60 <MX_USART2_UART_Init+0x58>)
 8000d4c:	f003 fac2 	bl	80042d4 <HAL_UART_Init>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d001      	beq.n	8000d5a <MX_USART2_UART_Init+0x52>
		Error_Handler();
 8000d56:	f000 f86d 	bl	8000e34 <Error_Handler>
	}
}
 8000d5a:	bf00      	nop
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	20000128 	.word	0x20000128
 8000d64:	40004400 	.word	0x40004400

08000d68 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b08a      	sub	sp, #40	@ 0x28
 8000d6c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000d6e:	f107 0314 	add.w	r3, r7, #20
 8000d72:	2200      	movs	r2, #0
 8000d74:	601a      	str	r2, [r3, #0]
 8000d76:	605a      	str	r2, [r3, #4]
 8000d78:	609a      	str	r2, [r3, #8]
 8000d7a:	60da      	str	r2, [r3, #12]
 8000d7c:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000d7e:	4b2a      	ldr	r3, [pc, #168]	@ (8000e28 <MX_GPIO_Init+0xc0>)
 8000d80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d82:	4a29      	ldr	r2, [pc, #164]	@ (8000e28 <MX_GPIO_Init+0xc0>)
 8000d84:	f043 0304 	orr.w	r3, r3, #4
 8000d88:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d8a:	4b27      	ldr	r3, [pc, #156]	@ (8000e28 <MX_GPIO_Init+0xc0>)
 8000d8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d8e:	f003 0304 	and.w	r3, r3, #4
 8000d92:	613b      	str	r3, [r7, #16]
 8000d94:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000d96:	4b24      	ldr	r3, [pc, #144]	@ (8000e28 <MX_GPIO_Init+0xc0>)
 8000d98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d9a:	4a23      	ldr	r2, [pc, #140]	@ (8000e28 <MX_GPIO_Init+0xc0>)
 8000d9c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000da0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000da2:	4b21      	ldr	r3, [pc, #132]	@ (8000e28 <MX_GPIO_Init+0xc0>)
 8000da4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000da6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000daa:	60fb      	str	r3, [r7, #12]
 8000dac:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000dae:	4b1e      	ldr	r3, [pc, #120]	@ (8000e28 <MX_GPIO_Init+0xc0>)
 8000db0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000db2:	4a1d      	ldr	r2, [pc, #116]	@ (8000e28 <MX_GPIO_Init+0xc0>)
 8000db4:	f043 0301 	orr.w	r3, r3, #1
 8000db8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000dba:	4b1b      	ldr	r3, [pc, #108]	@ (8000e28 <MX_GPIO_Init+0xc0>)
 8000dbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dbe:	f003 0301 	and.w	r3, r3, #1
 8000dc2:	60bb      	str	r3, [r7, #8]
 8000dc4:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000dc6:	4b18      	ldr	r3, [pc, #96]	@ (8000e28 <MX_GPIO_Init+0xc0>)
 8000dc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dca:	4a17      	ldr	r2, [pc, #92]	@ (8000e28 <MX_GPIO_Init+0xc0>)
 8000dcc:	f043 0302 	orr.w	r3, r3, #2
 8000dd0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000dd2:	4b15      	ldr	r3, [pc, #84]	@ (8000e28 <MX_GPIO_Init+0xc0>)
 8000dd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dd6:	f003 0302 	and.w	r3, r3, #2
 8000dda:	607b      	str	r3, [r7, #4]
 8000ddc:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000dde:	2200      	movs	r2, #0
 8000de0:	2140      	movs	r1, #64	@ 0x40
 8000de2:	4812      	ldr	r0, [pc, #72]	@ (8000e2c <MX_GPIO_Init+0xc4>)
 8000de4:	f000 fd66 	bl	80018b4 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8000de8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000dec:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000dee:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000df2:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df4:	2300      	movs	r3, #0
 8000df6:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000df8:	f107 0314 	add.w	r3, r7, #20
 8000dfc:	4619      	mov	r1, r3
 8000dfe:	480c      	ldr	r0, [pc, #48]	@ (8000e30 <MX_GPIO_Init+0xc8>)
 8000e00:	f000 fbae 	bl	8001560 <HAL_GPIO_Init>

	/*Configure GPIO pin : PB6 */
	GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000e04:	2340      	movs	r3, #64	@ 0x40
 8000e06:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e08:	2301      	movs	r3, #1
 8000e0a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e10:	2300      	movs	r3, #0
 8000e12:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e14:	f107 0314 	add.w	r3, r7, #20
 8000e18:	4619      	mov	r1, r3
 8000e1a:	4804      	ldr	r0, [pc, #16]	@ (8000e2c <MX_GPIO_Init+0xc4>)
 8000e1c:	f000 fba0 	bl	8001560 <HAL_GPIO_Init>
}
 8000e20:	bf00      	nop
 8000e22:	3728      	adds	r7, #40	@ 0x28
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	40021000 	.word	0x40021000
 8000e2c:	48000400 	.word	0x48000400
 8000e30:	48000800 	.word	0x48000800

08000e34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000e38:	b672      	cpsid	i
}
 8000e3a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000e3c:	bf00      	nop
 8000e3e:	e7fd      	b.n	8000e3c <Error_Handler+0x8>

08000e40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	b083      	sub	sp, #12
 8000e44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e46:	4b0f      	ldr	r3, [pc, #60]	@ (8000e84 <HAL_MspInit+0x44>)
 8000e48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e4a:	4a0e      	ldr	r2, [pc, #56]	@ (8000e84 <HAL_MspInit+0x44>)
 8000e4c:	f043 0301 	orr.w	r3, r3, #1
 8000e50:	6613      	str	r3, [r2, #96]	@ 0x60
 8000e52:	4b0c      	ldr	r3, [pc, #48]	@ (8000e84 <HAL_MspInit+0x44>)
 8000e54:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e56:	f003 0301 	and.w	r3, r3, #1
 8000e5a:	607b      	str	r3, [r7, #4]
 8000e5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e5e:	4b09      	ldr	r3, [pc, #36]	@ (8000e84 <HAL_MspInit+0x44>)
 8000e60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e62:	4a08      	ldr	r2, [pc, #32]	@ (8000e84 <HAL_MspInit+0x44>)
 8000e64:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e68:	6593      	str	r3, [r2, #88]	@ 0x58
 8000e6a:	4b06      	ldr	r3, [pc, #24]	@ (8000e84 <HAL_MspInit+0x44>)
 8000e6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e72:	603b      	str	r3, [r7, #0]
 8000e74:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e76:	bf00      	nop
 8000e78:	370c      	adds	r7, #12
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e80:	4770      	bx	lr
 8000e82:	bf00      	nop
 8000e84:	40021000 	.word	0x40021000

08000e88 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b08a      	sub	sp, #40	@ 0x28
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e90:	f107 0314 	add.w	r3, r7, #20
 8000e94:	2200      	movs	r2, #0
 8000e96:	601a      	str	r2, [r3, #0]
 8000e98:	605a      	str	r2, [r3, #4]
 8000e9a:	609a      	str	r2, [r3, #8]
 8000e9c:	60da      	str	r2, [r3, #12]
 8000e9e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	4a17      	ldr	r2, [pc, #92]	@ (8000f04 <HAL_SPI_MspInit+0x7c>)
 8000ea6:	4293      	cmp	r3, r2
 8000ea8:	d128      	bne.n	8000efc <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000eaa:	4b17      	ldr	r3, [pc, #92]	@ (8000f08 <HAL_SPI_MspInit+0x80>)
 8000eac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000eae:	4a16      	ldr	r2, [pc, #88]	@ (8000f08 <HAL_SPI_MspInit+0x80>)
 8000eb0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000eb4:	6613      	str	r3, [r2, #96]	@ 0x60
 8000eb6:	4b14      	ldr	r3, [pc, #80]	@ (8000f08 <HAL_SPI_MspInit+0x80>)
 8000eb8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000eba:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000ebe:	613b      	str	r3, [r7, #16]
 8000ec0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ec2:	4b11      	ldr	r3, [pc, #68]	@ (8000f08 <HAL_SPI_MspInit+0x80>)
 8000ec4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ec6:	4a10      	ldr	r2, [pc, #64]	@ (8000f08 <HAL_SPI_MspInit+0x80>)
 8000ec8:	f043 0301 	orr.w	r3, r3, #1
 8000ecc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ece:	4b0e      	ldr	r3, [pc, #56]	@ (8000f08 <HAL_SPI_MspInit+0x80>)
 8000ed0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ed2:	f003 0301 	and.w	r3, r3, #1
 8000ed6:	60fb      	str	r3, [r7, #12]
 8000ed8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000eda:	23e0      	movs	r3, #224	@ 0xe0
 8000edc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ede:	2302      	movs	r3, #2
 8000ee0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ee6:	2303      	movs	r3, #3
 8000ee8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000eea:	2305      	movs	r3, #5
 8000eec:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eee:	f107 0314 	add.w	r3, r7, #20
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ef8:	f000 fb32 	bl	8001560 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000efc:	bf00      	nop
 8000efe:	3728      	adds	r7, #40	@ 0x28
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	40013000 	.word	0x40013000
 8000f08:	40021000 	.word	0x40021000

08000f0c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b084      	sub	sp, #16
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4a0d      	ldr	r2, [pc, #52]	@ (8000f50 <HAL_TIM_Base_MspInit+0x44>)
 8000f1a:	4293      	cmp	r3, r2
 8000f1c:	d113      	bne.n	8000f46 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000f1e:	4b0d      	ldr	r3, [pc, #52]	@ (8000f54 <HAL_TIM_Base_MspInit+0x48>)
 8000f20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f22:	4a0c      	ldr	r2, [pc, #48]	@ (8000f54 <HAL_TIM_Base_MspInit+0x48>)
 8000f24:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f28:	6613      	str	r3, [r2, #96]	@ 0x60
 8000f2a:	4b0a      	ldr	r3, [pc, #40]	@ (8000f54 <HAL_TIM_Base_MspInit+0x48>)
 8000f2c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f32:	60fb      	str	r3, [r7, #12]
 8000f34:	68fb      	ldr	r3, [r7, #12]
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8000f36:	2200      	movs	r2, #0
 8000f38:	2100      	movs	r1, #0
 8000f3a:	2019      	movs	r0, #25
 8000f3c:	f000 fad9 	bl	80014f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000f40:	2019      	movs	r0, #25
 8000f42:	f000 faf2 	bl	800152a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8000f46:	bf00      	nop
 8000f48:	3710      	adds	r7, #16
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	40014400 	.word	0x40014400
 8000f54:	40021000 	.word	0x40021000

08000f58 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b0ac      	sub	sp, #176	@ 0xb0
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f60:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000f64:	2200      	movs	r2, #0
 8000f66:	601a      	str	r2, [r3, #0]
 8000f68:	605a      	str	r2, [r3, #4]
 8000f6a:	609a      	str	r2, [r3, #8]
 8000f6c:	60da      	str	r2, [r3, #12]
 8000f6e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f70:	f107 0314 	add.w	r3, r7, #20
 8000f74:	2288      	movs	r2, #136	@ 0x88
 8000f76:	2100      	movs	r1, #0
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f005 fe57 	bl	8006c2c <memset>
  if(huart->Instance==USART2)
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	4a21      	ldr	r2, [pc, #132]	@ (8001008 <HAL_UART_MspInit+0xb0>)
 8000f84:	4293      	cmp	r3, r2
 8000f86:	d13b      	bne.n	8001000 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000f88:	2302      	movs	r3, #2
 8000f8a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f90:	f107 0314 	add.w	r3, r7, #20
 8000f94:	4618      	mov	r0, r3
 8000f96:	f001 fb09 	bl	80025ac <HAL_RCCEx_PeriphCLKConfig>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d001      	beq.n	8000fa4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000fa0:	f7ff ff48 	bl	8000e34 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000fa4:	4b19      	ldr	r3, [pc, #100]	@ (800100c <HAL_UART_MspInit+0xb4>)
 8000fa6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fa8:	4a18      	ldr	r2, [pc, #96]	@ (800100c <HAL_UART_MspInit+0xb4>)
 8000faa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000fae:	6593      	str	r3, [r2, #88]	@ 0x58
 8000fb0:	4b16      	ldr	r3, [pc, #88]	@ (800100c <HAL_UART_MspInit+0xb4>)
 8000fb2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fb4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fb8:	613b      	str	r3, [r7, #16]
 8000fba:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fbc:	4b13      	ldr	r3, [pc, #76]	@ (800100c <HAL_UART_MspInit+0xb4>)
 8000fbe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fc0:	4a12      	ldr	r2, [pc, #72]	@ (800100c <HAL_UART_MspInit+0xb4>)
 8000fc2:	f043 0301 	orr.w	r3, r3, #1
 8000fc6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fc8:	4b10      	ldr	r3, [pc, #64]	@ (800100c <HAL_UART_MspInit+0xb4>)
 8000fca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fcc:	f003 0301 	and.w	r3, r3, #1
 8000fd0:	60fb      	str	r3, [r7, #12]
 8000fd2:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000fd4:	230c      	movs	r3, #12
 8000fd6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fda:	2302      	movs	r3, #2
 8000fdc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fe6:	2303      	movs	r3, #3
 8000fe8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000fec:	2307      	movs	r3, #7
 8000fee:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ff2:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ffc:	f000 fab0 	bl	8001560 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001000:	bf00      	nop
 8001002:	37b0      	adds	r7, #176	@ 0xb0
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}
 8001008:	40004400 	.word	0x40004400
 800100c:	40021000 	.word	0x40021000

08001010 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001014:	bf00      	nop
 8001016:	e7fd      	b.n	8001014 <NMI_Handler+0x4>

08001018 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800101c:	bf00      	nop
 800101e:	e7fd      	b.n	800101c <HardFault_Handler+0x4>

08001020 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001024:	bf00      	nop
 8001026:	e7fd      	b.n	8001024 <MemManage_Handler+0x4>

08001028 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800102c:	bf00      	nop
 800102e:	e7fd      	b.n	800102c <BusFault_Handler+0x4>

08001030 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001034:	bf00      	nop
 8001036:	e7fd      	b.n	8001034 <UsageFault_Handler+0x4>

08001038 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800103c:	bf00      	nop
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr

08001046 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001046:	b480      	push	{r7}
 8001048:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800104a:	bf00      	nop
 800104c:	46bd      	mov	sp, r7
 800104e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001052:	4770      	bx	lr

08001054 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001058:	bf00      	nop
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr

08001062 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001062:	b580      	push	{r7, lr}
 8001064:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001066:	f000 f949 	bl	80012fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800106a:	bf00      	nop
 800106c:	bd80      	pop	{r7, pc}
	...

08001070 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8001074:	4802      	ldr	r0, [pc, #8]	@ (8001080 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001076:	f002 ff4b 	bl	8003f10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800107a:	bf00      	nop
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	200001b0 	.word	0x200001b0

08001084 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b086      	sub	sp, #24
 8001088:	af00      	add	r7, sp, #0
 800108a:	60f8      	str	r0, [r7, #12]
 800108c:	60b9      	str	r1, [r7, #8]
 800108e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001090:	2300      	movs	r3, #0
 8001092:	617b      	str	r3, [r7, #20]
 8001094:	e00a      	b.n	80010ac <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001096:	f3af 8000 	nop.w
 800109a:	4601      	mov	r1, r0
 800109c:	68bb      	ldr	r3, [r7, #8]
 800109e:	1c5a      	adds	r2, r3, #1
 80010a0:	60ba      	str	r2, [r7, #8]
 80010a2:	b2ca      	uxtb	r2, r1
 80010a4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010a6:	697b      	ldr	r3, [r7, #20]
 80010a8:	3301      	adds	r3, #1
 80010aa:	617b      	str	r3, [r7, #20]
 80010ac:	697a      	ldr	r2, [r7, #20]
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	429a      	cmp	r2, r3
 80010b2:	dbf0      	blt.n	8001096 <_read+0x12>
  }

  return len;
 80010b4:	687b      	ldr	r3, [r7, #4]
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	3718      	adds	r7, #24
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}

080010be <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80010be:	b580      	push	{r7, lr}
 80010c0:	b086      	sub	sp, #24
 80010c2:	af00      	add	r7, sp, #0
 80010c4:	60f8      	str	r0, [r7, #12]
 80010c6:	60b9      	str	r1, [r7, #8]
 80010c8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010ca:	2300      	movs	r3, #0
 80010cc:	617b      	str	r3, [r7, #20]
 80010ce:	e009      	b.n	80010e4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80010d0:	68bb      	ldr	r3, [r7, #8]
 80010d2:	1c5a      	adds	r2, r3, #1
 80010d4:	60ba      	str	r2, [r7, #8]
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	4618      	mov	r0, r3
 80010da:	f7ff fa41 	bl	8000560 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010de:	697b      	ldr	r3, [r7, #20]
 80010e0:	3301      	adds	r3, #1
 80010e2:	617b      	str	r3, [r7, #20]
 80010e4:	697a      	ldr	r2, [r7, #20]
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	429a      	cmp	r2, r3
 80010ea:	dbf1      	blt.n	80010d0 <_write+0x12>
  }
  return len;
 80010ec:	687b      	ldr	r3, [r7, #4]
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	3718      	adds	r7, #24
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}

080010f6 <_close>:

int _close(int file)
{
 80010f6:	b480      	push	{r7}
 80010f8:	b083      	sub	sp, #12
 80010fa:	af00      	add	r7, sp, #0
 80010fc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80010fe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001102:	4618      	mov	r0, r3
 8001104:	370c      	adds	r7, #12
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr

0800110e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800110e:	b480      	push	{r7}
 8001110:	b083      	sub	sp, #12
 8001112:	af00      	add	r7, sp, #0
 8001114:	6078      	str	r0, [r7, #4]
 8001116:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800111e:	605a      	str	r2, [r3, #4]
  return 0;
 8001120:	2300      	movs	r3, #0
}
 8001122:	4618      	mov	r0, r3
 8001124:	370c      	adds	r7, #12
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr

0800112e <_isatty>:

int _isatty(int file)
{
 800112e:	b480      	push	{r7}
 8001130:	b083      	sub	sp, #12
 8001132:	af00      	add	r7, sp, #0
 8001134:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001136:	2301      	movs	r3, #1
}
 8001138:	4618      	mov	r0, r3
 800113a:	370c      	adds	r7, #12
 800113c:	46bd      	mov	sp, r7
 800113e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001142:	4770      	bx	lr

08001144 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001144:	b480      	push	{r7}
 8001146:	b085      	sub	sp, #20
 8001148:	af00      	add	r7, sp, #0
 800114a:	60f8      	str	r0, [r7, #12]
 800114c:	60b9      	str	r1, [r7, #8]
 800114e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001150:	2300      	movs	r3, #0
}
 8001152:	4618      	mov	r0, r3
 8001154:	3714      	adds	r7, #20
 8001156:	46bd      	mov	sp, r7
 8001158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115c:	4770      	bx	lr
	...

08001160 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b086      	sub	sp, #24
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001168:	4a14      	ldr	r2, [pc, #80]	@ (80011bc <_sbrk+0x5c>)
 800116a:	4b15      	ldr	r3, [pc, #84]	@ (80011c0 <_sbrk+0x60>)
 800116c:	1ad3      	subs	r3, r2, r3
 800116e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001170:	697b      	ldr	r3, [r7, #20]
 8001172:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001174:	4b13      	ldr	r3, [pc, #76]	@ (80011c4 <_sbrk+0x64>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d102      	bne.n	8001182 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800117c:	4b11      	ldr	r3, [pc, #68]	@ (80011c4 <_sbrk+0x64>)
 800117e:	4a12      	ldr	r2, [pc, #72]	@ (80011c8 <_sbrk+0x68>)
 8001180:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001182:	4b10      	ldr	r3, [pc, #64]	@ (80011c4 <_sbrk+0x64>)
 8001184:	681a      	ldr	r2, [r3, #0]
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	4413      	add	r3, r2
 800118a:	693a      	ldr	r2, [r7, #16]
 800118c:	429a      	cmp	r2, r3
 800118e:	d207      	bcs.n	80011a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001190:	f005 fd9a 	bl	8006cc8 <__errno>
 8001194:	4603      	mov	r3, r0
 8001196:	220c      	movs	r2, #12
 8001198:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800119a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800119e:	e009      	b.n	80011b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011a0:	4b08      	ldr	r3, [pc, #32]	@ (80011c4 <_sbrk+0x64>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011a6:	4b07      	ldr	r3, [pc, #28]	@ (80011c4 <_sbrk+0x64>)
 80011a8:	681a      	ldr	r2, [r3, #0]
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	4413      	add	r3, r2
 80011ae:	4a05      	ldr	r2, [pc, #20]	@ (80011c4 <_sbrk+0x64>)
 80011b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011b2:	68fb      	ldr	r3, [r7, #12]
}
 80011b4:	4618      	mov	r0, r3
 80011b6:	3718      	adds	r7, #24
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	20018000 	.word	0x20018000
 80011c0:	00000400 	.word	0x00000400
 80011c4:	200009fc 	.word	0x200009fc
 80011c8:	20000b78 	.word	0x20000b78

080011cc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80011d0:	4b06      	ldr	r3, [pc, #24]	@ (80011ec <SystemInit+0x20>)
 80011d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80011d6:	4a05      	ldr	r2, [pc, #20]	@ (80011ec <SystemInit+0x20>)
 80011d8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80011dc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80011e0:	bf00      	nop
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr
 80011ea:	bf00      	nop
 80011ec:	e000ed00 	.word	0xe000ed00

080011f0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80011f0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001228 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80011f4:	f7ff ffea 	bl	80011cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011f8:	480c      	ldr	r0, [pc, #48]	@ (800122c <LoopForever+0x6>)
  ldr r1, =_edata
 80011fa:	490d      	ldr	r1, [pc, #52]	@ (8001230 <LoopForever+0xa>)
  ldr r2, =_sidata
 80011fc:	4a0d      	ldr	r2, [pc, #52]	@ (8001234 <LoopForever+0xe>)
  movs r3, #0
 80011fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001200:	e002      	b.n	8001208 <LoopCopyDataInit>

08001202 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001202:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001204:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001206:	3304      	adds	r3, #4

08001208 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001208:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800120a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800120c:	d3f9      	bcc.n	8001202 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800120e:	4a0a      	ldr	r2, [pc, #40]	@ (8001238 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001210:	4c0a      	ldr	r4, [pc, #40]	@ (800123c <LoopForever+0x16>)
  movs r3, #0
 8001212:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001214:	e001      	b.n	800121a <LoopFillZerobss>

08001216 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001216:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001218:	3204      	adds	r2, #4

0800121a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800121a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800121c:	d3fb      	bcc.n	8001216 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800121e:	f005 fd59 	bl	8006cd4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001222:	f7ff fc3b 	bl	8000a9c <main>

08001226 <LoopForever>:

LoopForever:
    b LoopForever
 8001226:	e7fe      	b.n	8001226 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001228:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800122c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001230:	200000a8 	.word	0x200000a8
  ldr r2, =_sidata
 8001234:	08007a58 	.word	0x08007a58
  ldr r2, =_sbss
 8001238:	200000a8 	.word	0x200000a8
  ldr r4, =_ebss
 800123c:	20000b78 	.word	0x20000b78

08001240 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001240:	e7fe      	b.n	8001240 <ADC1_2_IRQHandler>
	...

08001244 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b082      	sub	sp, #8
 8001248:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800124a:	2300      	movs	r3, #0
 800124c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800124e:	4b0c      	ldr	r3, [pc, #48]	@ (8001280 <HAL_Init+0x3c>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	4a0b      	ldr	r2, [pc, #44]	@ (8001280 <HAL_Init+0x3c>)
 8001254:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001258:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800125a:	2003      	movs	r0, #3
 800125c:	f000 f93e 	bl	80014dc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001260:	2000      	movs	r0, #0
 8001262:	f000 f80f 	bl	8001284 <HAL_InitTick>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d002      	beq.n	8001272 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800126c:	2301      	movs	r3, #1
 800126e:	71fb      	strb	r3, [r7, #7]
 8001270:	e001      	b.n	8001276 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001272:	f7ff fde5 	bl	8000e40 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001276:	79fb      	ldrb	r3, [r7, #7]
}
 8001278:	4618      	mov	r0, r3
 800127a:	3708      	adds	r7, #8
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}
 8001280:	40022000 	.word	0x40022000

08001284 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b084      	sub	sp, #16
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800128c:	2300      	movs	r3, #0
 800128e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001290:	4b17      	ldr	r3, [pc, #92]	@ (80012f0 <HAL_InitTick+0x6c>)
 8001292:	781b      	ldrb	r3, [r3, #0]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d023      	beq.n	80012e0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001298:	4b16      	ldr	r3, [pc, #88]	@ (80012f4 <HAL_InitTick+0x70>)
 800129a:	681a      	ldr	r2, [r3, #0]
 800129c:	4b14      	ldr	r3, [pc, #80]	@ (80012f0 <HAL_InitTick+0x6c>)
 800129e:	781b      	ldrb	r3, [r3, #0]
 80012a0:	4619      	mov	r1, r3
 80012a2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80012a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80012aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80012ae:	4618      	mov	r0, r3
 80012b0:	f000 f949 	bl	8001546 <HAL_SYSTICK_Config>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d10f      	bne.n	80012da <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	2b0f      	cmp	r3, #15
 80012be:	d809      	bhi.n	80012d4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012c0:	2200      	movs	r2, #0
 80012c2:	6879      	ldr	r1, [r7, #4]
 80012c4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80012c8:	f000 f913 	bl	80014f2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80012cc:	4a0a      	ldr	r2, [pc, #40]	@ (80012f8 <HAL_InitTick+0x74>)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	6013      	str	r3, [r2, #0]
 80012d2:	e007      	b.n	80012e4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80012d4:	2301      	movs	r3, #1
 80012d6:	73fb      	strb	r3, [r7, #15]
 80012d8:	e004      	b.n	80012e4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80012da:	2301      	movs	r3, #1
 80012dc:	73fb      	strb	r3, [r7, #15]
 80012de:	e001      	b.n	80012e4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80012e0:	2301      	movs	r3, #1
 80012e2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80012e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	3710      	adds	r7, #16
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	2000001c 	.word	0x2000001c
 80012f4:	20000014 	.word	0x20000014
 80012f8:	20000018 	.word	0x20000018

080012fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012fc:	b480      	push	{r7}
 80012fe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001300:	4b06      	ldr	r3, [pc, #24]	@ (800131c <HAL_IncTick+0x20>)
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	461a      	mov	r2, r3
 8001306:	4b06      	ldr	r3, [pc, #24]	@ (8001320 <HAL_IncTick+0x24>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	4413      	add	r3, r2
 800130c:	4a04      	ldr	r2, [pc, #16]	@ (8001320 <HAL_IncTick+0x24>)
 800130e:	6013      	str	r3, [r2, #0]
}
 8001310:	bf00      	nop
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr
 800131a:	bf00      	nop
 800131c:	2000001c 	.word	0x2000001c
 8001320:	20000a00 	.word	0x20000a00

08001324 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0
  return uwTick;
 8001328:	4b03      	ldr	r3, [pc, #12]	@ (8001338 <HAL_GetTick+0x14>)
 800132a:	681b      	ldr	r3, [r3, #0]
}
 800132c:	4618      	mov	r0, r3
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr
 8001336:	bf00      	nop
 8001338:	20000a00 	.word	0x20000a00

0800133c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800133c:	b480      	push	{r7}
 800133e:	b085      	sub	sp, #20
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	f003 0307 	and.w	r3, r3, #7
 800134a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800134c:	4b0c      	ldr	r3, [pc, #48]	@ (8001380 <__NVIC_SetPriorityGrouping+0x44>)
 800134e:	68db      	ldr	r3, [r3, #12]
 8001350:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001352:	68ba      	ldr	r2, [r7, #8]
 8001354:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001358:	4013      	ands	r3, r2
 800135a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001360:	68bb      	ldr	r3, [r7, #8]
 8001362:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001364:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001368:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800136c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800136e:	4a04      	ldr	r2, [pc, #16]	@ (8001380 <__NVIC_SetPriorityGrouping+0x44>)
 8001370:	68bb      	ldr	r3, [r7, #8]
 8001372:	60d3      	str	r3, [r2, #12]
}
 8001374:	bf00      	nop
 8001376:	3714      	adds	r7, #20
 8001378:	46bd      	mov	sp, r7
 800137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137e:	4770      	bx	lr
 8001380:	e000ed00 	.word	0xe000ed00

08001384 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001384:	b480      	push	{r7}
 8001386:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001388:	4b04      	ldr	r3, [pc, #16]	@ (800139c <__NVIC_GetPriorityGrouping+0x18>)
 800138a:	68db      	ldr	r3, [r3, #12]
 800138c:	0a1b      	lsrs	r3, r3, #8
 800138e:	f003 0307 	and.w	r3, r3, #7
}
 8001392:	4618      	mov	r0, r3
 8001394:	46bd      	mov	sp, r7
 8001396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139a:	4770      	bx	lr
 800139c:	e000ed00 	.word	0xe000ed00

080013a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b083      	sub	sp, #12
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	4603      	mov	r3, r0
 80013a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	db0b      	blt.n	80013ca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013b2:	79fb      	ldrb	r3, [r7, #7]
 80013b4:	f003 021f 	and.w	r2, r3, #31
 80013b8:	4907      	ldr	r1, [pc, #28]	@ (80013d8 <__NVIC_EnableIRQ+0x38>)
 80013ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013be:	095b      	lsrs	r3, r3, #5
 80013c0:	2001      	movs	r0, #1
 80013c2:	fa00 f202 	lsl.w	r2, r0, r2
 80013c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80013ca:	bf00      	nop
 80013cc:	370c      	adds	r7, #12
 80013ce:	46bd      	mov	sp, r7
 80013d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d4:	4770      	bx	lr
 80013d6:	bf00      	nop
 80013d8:	e000e100 	.word	0xe000e100

080013dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013dc:	b480      	push	{r7}
 80013de:	b083      	sub	sp, #12
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	4603      	mov	r3, r0
 80013e4:	6039      	str	r1, [r7, #0]
 80013e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	db0a      	blt.n	8001406 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	b2da      	uxtb	r2, r3
 80013f4:	490c      	ldr	r1, [pc, #48]	@ (8001428 <__NVIC_SetPriority+0x4c>)
 80013f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013fa:	0112      	lsls	r2, r2, #4
 80013fc:	b2d2      	uxtb	r2, r2
 80013fe:	440b      	add	r3, r1
 8001400:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001404:	e00a      	b.n	800141c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	b2da      	uxtb	r2, r3
 800140a:	4908      	ldr	r1, [pc, #32]	@ (800142c <__NVIC_SetPriority+0x50>)
 800140c:	79fb      	ldrb	r3, [r7, #7]
 800140e:	f003 030f 	and.w	r3, r3, #15
 8001412:	3b04      	subs	r3, #4
 8001414:	0112      	lsls	r2, r2, #4
 8001416:	b2d2      	uxtb	r2, r2
 8001418:	440b      	add	r3, r1
 800141a:	761a      	strb	r2, [r3, #24]
}
 800141c:	bf00      	nop
 800141e:	370c      	adds	r7, #12
 8001420:	46bd      	mov	sp, r7
 8001422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001426:	4770      	bx	lr
 8001428:	e000e100 	.word	0xe000e100
 800142c:	e000ed00 	.word	0xe000ed00

08001430 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001430:	b480      	push	{r7}
 8001432:	b089      	sub	sp, #36	@ 0x24
 8001434:	af00      	add	r7, sp, #0
 8001436:	60f8      	str	r0, [r7, #12]
 8001438:	60b9      	str	r1, [r7, #8]
 800143a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	f003 0307 	and.w	r3, r3, #7
 8001442:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001444:	69fb      	ldr	r3, [r7, #28]
 8001446:	f1c3 0307 	rsb	r3, r3, #7
 800144a:	2b04      	cmp	r3, #4
 800144c:	bf28      	it	cs
 800144e:	2304      	movcs	r3, #4
 8001450:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001452:	69fb      	ldr	r3, [r7, #28]
 8001454:	3304      	adds	r3, #4
 8001456:	2b06      	cmp	r3, #6
 8001458:	d902      	bls.n	8001460 <NVIC_EncodePriority+0x30>
 800145a:	69fb      	ldr	r3, [r7, #28]
 800145c:	3b03      	subs	r3, #3
 800145e:	e000      	b.n	8001462 <NVIC_EncodePriority+0x32>
 8001460:	2300      	movs	r3, #0
 8001462:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001464:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001468:	69bb      	ldr	r3, [r7, #24]
 800146a:	fa02 f303 	lsl.w	r3, r2, r3
 800146e:	43da      	mvns	r2, r3
 8001470:	68bb      	ldr	r3, [r7, #8]
 8001472:	401a      	ands	r2, r3
 8001474:	697b      	ldr	r3, [r7, #20]
 8001476:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001478:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800147c:	697b      	ldr	r3, [r7, #20]
 800147e:	fa01 f303 	lsl.w	r3, r1, r3
 8001482:	43d9      	mvns	r1, r3
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001488:	4313      	orrs	r3, r2
         );
}
 800148a:	4618      	mov	r0, r3
 800148c:	3724      	adds	r7, #36	@ 0x24
 800148e:	46bd      	mov	sp, r7
 8001490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001494:	4770      	bx	lr
	...

08001498 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b082      	sub	sp, #8
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	3b01      	subs	r3, #1
 80014a4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80014a8:	d301      	bcc.n	80014ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014aa:	2301      	movs	r3, #1
 80014ac:	e00f      	b.n	80014ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014ae:	4a0a      	ldr	r2, [pc, #40]	@ (80014d8 <SysTick_Config+0x40>)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	3b01      	subs	r3, #1
 80014b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014b6:	210f      	movs	r1, #15
 80014b8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80014bc:	f7ff ff8e 	bl	80013dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014c0:	4b05      	ldr	r3, [pc, #20]	@ (80014d8 <SysTick_Config+0x40>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014c6:	4b04      	ldr	r3, [pc, #16]	@ (80014d8 <SysTick_Config+0x40>)
 80014c8:	2207      	movs	r2, #7
 80014ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014cc:	2300      	movs	r3, #0
}
 80014ce:	4618      	mov	r0, r3
 80014d0:	3708      	adds	r7, #8
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	e000e010 	.word	0xe000e010

080014dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b082      	sub	sp, #8
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014e4:	6878      	ldr	r0, [r7, #4]
 80014e6:	f7ff ff29 	bl	800133c <__NVIC_SetPriorityGrouping>
}
 80014ea:	bf00      	nop
 80014ec:	3708      	adds	r7, #8
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}

080014f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014f2:	b580      	push	{r7, lr}
 80014f4:	b086      	sub	sp, #24
 80014f6:	af00      	add	r7, sp, #0
 80014f8:	4603      	mov	r3, r0
 80014fa:	60b9      	str	r1, [r7, #8]
 80014fc:	607a      	str	r2, [r7, #4]
 80014fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001500:	2300      	movs	r3, #0
 8001502:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001504:	f7ff ff3e 	bl	8001384 <__NVIC_GetPriorityGrouping>
 8001508:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800150a:	687a      	ldr	r2, [r7, #4]
 800150c:	68b9      	ldr	r1, [r7, #8]
 800150e:	6978      	ldr	r0, [r7, #20]
 8001510:	f7ff ff8e 	bl	8001430 <NVIC_EncodePriority>
 8001514:	4602      	mov	r2, r0
 8001516:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800151a:	4611      	mov	r1, r2
 800151c:	4618      	mov	r0, r3
 800151e:	f7ff ff5d 	bl	80013dc <__NVIC_SetPriority>
}
 8001522:	bf00      	nop
 8001524:	3718      	adds	r7, #24
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}

0800152a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800152a:	b580      	push	{r7, lr}
 800152c:	b082      	sub	sp, #8
 800152e:	af00      	add	r7, sp, #0
 8001530:	4603      	mov	r3, r0
 8001532:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001534:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001538:	4618      	mov	r0, r3
 800153a:	f7ff ff31 	bl	80013a0 <__NVIC_EnableIRQ>
}
 800153e:	bf00      	nop
 8001540:	3708      	adds	r7, #8
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}

08001546 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001546:	b580      	push	{r7, lr}
 8001548:	b082      	sub	sp, #8
 800154a:	af00      	add	r7, sp, #0
 800154c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800154e:	6878      	ldr	r0, [r7, #4]
 8001550:	f7ff ffa2 	bl	8001498 <SysTick_Config>
 8001554:	4603      	mov	r3, r0
}
 8001556:	4618      	mov	r0, r3
 8001558:	3708      	adds	r7, #8
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
	...

08001560 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001560:	b480      	push	{r7}
 8001562:	b087      	sub	sp, #28
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
 8001568:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800156a:	2300      	movs	r3, #0
 800156c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800156e:	e17f      	b.n	8001870 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	681a      	ldr	r2, [r3, #0]
 8001574:	2101      	movs	r1, #1
 8001576:	697b      	ldr	r3, [r7, #20]
 8001578:	fa01 f303 	lsl.w	r3, r1, r3
 800157c:	4013      	ands	r3, r2
 800157e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	2b00      	cmp	r3, #0
 8001584:	f000 8171 	beq.w	800186a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	f003 0303 	and.w	r3, r3, #3
 8001590:	2b01      	cmp	r3, #1
 8001592:	d005      	beq.n	80015a0 <HAL_GPIO_Init+0x40>
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	f003 0303 	and.w	r3, r3, #3
 800159c:	2b02      	cmp	r3, #2
 800159e:	d130      	bne.n	8001602 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	689b      	ldr	r3, [r3, #8]
 80015a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80015a6:	697b      	ldr	r3, [r7, #20]
 80015a8:	005b      	lsls	r3, r3, #1
 80015aa:	2203      	movs	r2, #3
 80015ac:	fa02 f303 	lsl.w	r3, r2, r3
 80015b0:	43db      	mvns	r3, r3
 80015b2:	693a      	ldr	r2, [r7, #16]
 80015b4:	4013      	ands	r3, r2
 80015b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	68da      	ldr	r2, [r3, #12]
 80015bc:	697b      	ldr	r3, [r7, #20]
 80015be:	005b      	lsls	r3, r3, #1
 80015c0:	fa02 f303 	lsl.w	r3, r2, r3
 80015c4:	693a      	ldr	r2, [r7, #16]
 80015c6:	4313      	orrs	r3, r2
 80015c8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	693a      	ldr	r2, [r7, #16]
 80015ce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80015d6:	2201      	movs	r2, #1
 80015d8:	697b      	ldr	r3, [r7, #20]
 80015da:	fa02 f303 	lsl.w	r3, r2, r3
 80015de:	43db      	mvns	r3, r3
 80015e0:	693a      	ldr	r2, [r7, #16]
 80015e2:	4013      	ands	r3, r2
 80015e4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	091b      	lsrs	r3, r3, #4
 80015ec:	f003 0201 	and.w	r2, r3, #1
 80015f0:	697b      	ldr	r3, [r7, #20]
 80015f2:	fa02 f303 	lsl.w	r3, r2, r3
 80015f6:	693a      	ldr	r2, [r7, #16]
 80015f8:	4313      	orrs	r3, r2
 80015fa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	693a      	ldr	r2, [r7, #16]
 8001600:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	f003 0303 	and.w	r3, r3, #3
 800160a:	2b03      	cmp	r3, #3
 800160c:	d118      	bne.n	8001640 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001612:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001614:	2201      	movs	r2, #1
 8001616:	697b      	ldr	r3, [r7, #20]
 8001618:	fa02 f303 	lsl.w	r3, r2, r3
 800161c:	43db      	mvns	r3, r3
 800161e:	693a      	ldr	r2, [r7, #16]
 8001620:	4013      	ands	r3, r2
 8001622:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	08db      	lsrs	r3, r3, #3
 800162a:	f003 0201 	and.w	r2, r3, #1
 800162e:	697b      	ldr	r3, [r7, #20]
 8001630:	fa02 f303 	lsl.w	r3, r2, r3
 8001634:	693a      	ldr	r2, [r7, #16]
 8001636:	4313      	orrs	r3, r2
 8001638:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	693a      	ldr	r2, [r7, #16]
 800163e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	f003 0303 	and.w	r3, r3, #3
 8001648:	2b03      	cmp	r3, #3
 800164a:	d017      	beq.n	800167c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	68db      	ldr	r3, [r3, #12]
 8001650:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001652:	697b      	ldr	r3, [r7, #20]
 8001654:	005b      	lsls	r3, r3, #1
 8001656:	2203      	movs	r2, #3
 8001658:	fa02 f303 	lsl.w	r3, r2, r3
 800165c:	43db      	mvns	r3, r3
 800165e:	693a      	ldr	r2, [r7, #16]
 8001660:	4013      	ands	r3, r2
 8001662:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	689a      	ldr	r2, [r3, #8]
 8001668:	697b      	ldr	r3, [r7, #20]
 800166a:	005b      	lsls	r3, r3, #1
 800166c:	fa02 f303 	lsl.w	r3, r2, r3
 8001670:	693a      	ldr	r2, [r7, #16]
 8001672:	4313      	orrs	r3, r2
 8001674:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	693a      	ldr	r2, [r7, #16]
 800167a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	f003 0303 	and.w	r3, r3, #3
 8001684:	2b02      	cmp	r3, #2
 8001686:	d123      	bne.n	80016d0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001688:	697b      	ldr	r3, [r7, #20]
 800168a:	08da      	lsrs	r2, r3, #3
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	3208      	adds	r2, #8
 8001690:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001694:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001696:	697b      	ldr	r3, [r7, #20]
 8001698:	f003 0307 	and.w	r3, r3, #7
 800169c:	009b      	lsls	r3, r3, #2
 800169e:	220f      	movs	r2, #15
 80016a0:	fa02 f303 	lsl.w	r3, r2, r3
 80016a4:	43db      	mvns	r3, r3
 80016a6:	693a      	ldr	r2, [r7, #16]
 80016a8:	4013      	ands	r3, r2
 80016aa:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	691a      	ldr	r2, [r3, #16]
 80016b0:	697b      	ldr	r3, [r7, #20]
 80016b2:	f003 0307 	and.w	r3, r3, #7
 80016b6:	009b      	lsls	r3, r3, #2
 80016b8:	fa02 f303 	lsl.w	r3, r2, r3
 80016bc:	693a      	ldr	r2, [r7, #16]
 80016be:	4313      	orrs	r3, r2
 80016c0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80016c2:	697b      	ldr	r3, [r7, #20]
 80016c4:	08da      	lsrs	r2, r3, #3
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	3208      	adds	r2, #8
 80016ca:	6939      	ldr	r1, [r7, #16]
 80016cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80016d6:	697b      	ldr	r3, [r7, #20]
 80016d8:	005b      	lsls	r3, r3, #1
 80016da:	2203      	movs	r2, #3
 80016dc:	fa02 f303 	lsl.w	r3, r2, r3
 80016e0:	43db      	mvns	r3, r3
 80016e2:	693a      	ldr	r2, [r7, #16]
 80016e4:	4013      	ands	r3, r2
 80016e6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	f003 0203 	and.w	r2, r3, #3
 80016f0:	697b      	ldr	r3, [r7, #20]
 80016f2:	005b      	lsls	r3, r3, #1
 80016f4:	fa02 f303 	lsl.w	r3, r2, r3
 80016f8:	693a      	ldr	r2, [r7, #16]
 80016fa:	4313      	orrs	r3, r2
 80016fc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	693a      	ldr	r2, [r7, #16]
 8001702:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800170c:	2b00      	cmp	r3, #0
 800170e:	f000 80ac 	beq.w	800186a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001712:	4b5f      	ldr	r3, [pc, #380]	@ (8001890 <HAL_GPIO_Init+0x330>)
 8001714:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001716:	4a5e      	ldr	r2, [pc, #376]	@ (8001890 <HAL_GPIO_Init+0x330>)
 8001718:	f043 0301 	orr.w	r3, r3, #1
 800171c:	6613      	str	r3, [r2, #96]	@ 0x60
 800171e:	4b5c      	ldr	r3, [pc, #368]	@ (8001890 <HAL_GPIO_Init+0x330>)
 8001720:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001722:	f003 0301 	and.w	r3, r3, #1
 8001726:	60bb      	str	r3, [r7, #8]
 8001728:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800172a:	4a5a      	ldr	r2, [pc, #360]	@ (8001894 <HAL_GPIO_Init+0x334>)
 800172c:	697b      	ldr	r3, [r7, #20]
 800172e:	089b      	lsrs	r3, r3, #2
 8001730:	3302      	adds	r3, #2
 8001732:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001736:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001738:	697b      	ldr	r3, [r7, #20]
 800173a:	f003 0303 	and.w	r3, r3, #3
 800173e:	009b      	lsls	r3, r3, #2
 8001740:	220f      	movs	r2, #15
 8001742:	fa02 f303 	lsl.w	r3, r2, r3
 8001746:	43db      	mvns	r3, r3
 8001748:	693a      	ldr	r2, [r7, #16]
 800174a:	4013      	ands	r3, r2
 800174c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001754:	d025      	beq.n	80017a2 <HAL_GPIO_Init+0x242>
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	4a4f      	ldr	r2, [pc, #316]	@ (8001898 <HAL_GPIO_Init+0x338>)
 800175a:	4293      	cmp	r3, r2
 800175c:	d01f      	beq.n	800179e <HAL_GPIO_Init+0x23e>
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	4a4e      	ldr	r2, [pc, #312]	@ (800189c <HAL_GPIO_Init+0x33c>)
 8001762:	4293      	cmp	r3, r2
 8001764:	d019      	beq.n	800179a <HAL_GPIO_Init+0x23a>
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	4a4d      	ldr	r2, [pc, #308]	@ (80018a0 <HAL_GPIO_Init+0x340>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d013      	beq.n	8001796 <HAL_GPIO_Init+0x236>
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	4a4c      	ldr	r2, [pc, #304]	@ (80018a4 <HAL_GPIO_Init+0x344>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d00d      	beq.n	8001792 <HAL_GPIO_Init+0x232>
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	4a4b      	ldr	r2, [pc, #300]	@ (80018a8 <HAL_GPIO_Init+0x348>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d007      	beq.n	800178e <HAL_GPIO_Init+0x22e>
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	4a4a      	ldr	r2, [pc, #296]	@ (80018ac <HAL_GPIO_Init+0x34c>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d101      	bne.n	800178a <HAL_GPIO_Init+0x22a>
 8001786:	2306      	movs	r3, #6
 8001788:	e00c      	b.n	80017a4 <HAL_GPIO_Init+0x244>
 800178a:	2307      	movs	r3, #7
 800178c:	e00a      	b.n	80017a4 <HAL_GPIO_Init+0x244>
 800178e:	2305      	movs	r3, #5
 8001790:	e008      	b.n	80017a4 <HAL_GPIO_Init+0x244>
 8001792:	2304      	movs	r3, #4
 8001794:	e006      	b.n	80017a4 <HAL_GPIO_Init+0x244>
 8001796:	2303      	movs	r3, #3
 8001798:	e004      	b.n	80017a4 <HAL_GPIO_Init+0x244>
 800179a:	2302      	movs	r3, #2
 800179c:	e002      	b.n	80017a4 <HAL_GPIO_Init+0x244>
 800179e:	2301      	movs	r3, #1
 80017a0:	e000      	b.n	80017a4 <HAL_GPIO_Init+0x244>
 80017a2:	2300      	movs	r3, #0
 80017a4:	697a      	ldr	r2, [r7, #20]
 80017a6:	f002 0203 	and.w	r2, r2, #3
 80017aa:	0092      	lsls	r2, r2, #2
 80017ac:	4093      	lsls	r3, r2
 80017ae:	693a      	ldr	r2, [r7, #16]
 80017b0:	4313      	orrs	r3, r2
 80017b2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80017b4:	4937      	ldr	r1, [pc, #220]	@ (8001894 <HAL_GPIO_Init+0x334>)
 80017b6:	697b      	ldr	r3, [r7, #20]
 80017b8:	089b      	lsrs	r3, r3, #2
 80017ba:	3302      	adds	r3, #2
 80017bc:	693a      	ldr	r2, [r7, #16]
 80017be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80017c2:	4b3b      	ldr	r3, [pc, #236]	@ (80018b0 <HAL_GPIO_Init+0x350>)
 80017c4:	689b      	ldr	r3, [r3, #8]
 80017c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	43db      	mvns	r3, r3
 80017cc:	693a      	ldr	r2, [r7, #16]
 80017ce:	4013      	ands	r3, r2
 80017d0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d003      	beq.n	80017e6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80017de:	693a      	ldr	r2, [r7, #16]
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	4313      	orrs	r3, r2
 80017e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80017e6:	4a32      	ldr	r2, [pc, #200]	@ (80018b0 <HAL_GPIO_Init+0x350>)
 80017e8:	693b      	ldr	r3, [r7, #16]
 80017ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80017ec:	4b30      	ldr	r3, [pc, #192]	@ (80018b0 <HAL_GPIO_Init+0x350>)
 80017ee:	68db      	ldr	r3, [r3, #12]
 80017f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	43db      	mvns	r3, r3
 80017f6:	693a      	ldr	r2, [r7, #16]
 80017f8:	4013      	ands	r3, r2
 80017fa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001804:	2b00      	cmp	r3, #0
 8001806:	d003      	beq.n	8001810 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001808:	693a      	ldr	r2, [r7, #16]
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	4313      	orrs	r3, r2
 800180e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001810:	4a27      	ldr	r2, [pc, #156]	@ (80018b0 <HAL_GPIO_Init+0x350>)
 8001812:	693b      	ldr	r3, [r7, #16]
 8001814:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001816:	4b26      	ldr	r3, [pc, #152]	@ (80018b0 <HAL_GPIO_Init+0x350>)
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	43db      	mvns	r3, r3
 8001820:	693a      	ldr	r2, [r7, #16]
 8001822:	4013      	ands	r3, r2
 8001824:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800182e:	2b00      	cmp	r3, #0
 8001830:	d003      	beq.n	800183a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001832:	693a      	ldr	r2, [r7, #16]
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	4313      	orrs	r3, r2
 8001838:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800183a:	4a1d      	ldr	r2, [pc, #116]	@ (80018b0 <HAL_GPIO_Init+0x350>)
 800183c:	693b      	ldr	r3, [r7, #16]
 800183e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001840:	4b1b      	ldr	r3, [pc, #108]	@ (80018b0 <HAL_GPIO_Init+0x350>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	43db      	mvns	r3, r3
 800184a:	693a      	ldr	r2, [r7, #16]
 800184c:	4013      	ands	r3, r2
 800184e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001858:	2b00      	cmp	r3, #0
 800185a:	d003      	beq.n	8001864 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800185c:	693a      	ldr	r2, [r7, #16]
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	4313      	orrs	r3, r2
 8001862:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001864:	4a12      	ldr	r2, [pc, #72]	@ (80018b0 <HAL_GPIO_Init+0x350>)
 8001866:	693b      	ldr	r3, [r7, #16]
 8001868:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800186a:	697b      	ldr	r3, [r7, #20]
 800186c:	3301      	adds	r3, #1
 800186e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	681a      	ldr	r2, [r3, #0]
 8001874:	697b      	ldr	r3, [r7, #20]
 8001876:	fa22 f303 	lsr.w	r3, r2, r3
 800187a:	2b00      	cmp	r3, #0
 800187c:	f47f ae78 	bne.w	8001570 <HAL_GPIO_Init+0x10>
  }
}
 8001880:	bf00      	nop
 8001882:	bf00      	nop
 8001884:	371c      	adds	r7, #28
 8001886:	46bd      	mov	sp, r7
 8001888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188c:	4770      	bx	lr
 800188e:	bf00      	nop
 8001890:	40021000 	.word	0x40021000
 8001894:	40010000 	.word	0x40010000
 8001898:	48000400 	.word	0x48000400
 800189c:	48000800 	.word	0x48000800
 80018a0:	48000c00 	.word	0x48000c00
 80018a4:	48001000 	.word	0x48001000
 80018a8:	48001400 	.word	0x48001400
 80018ac:	48001800 	.word	0x48001800
 80018b0:	40010400 	.word	0x40010400

080018b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b083      	sub	sp, #12
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
 80018bc:	460b      	mov	r3, r1
 80018be:	807b      	strh	r3, [r7, #2]
 80018c0:	4613      	mov	r3, r2
 80018c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80018c4:	787b      	ldrb	r3, [r7, #1]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d003      	beq.n	80018d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80018ca:	887a      	ldrh	r2, [r7, #2]
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80018d0:	e002      	b.n	80018d8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80018d2:	887a      	ldrh	r2, [r7, #2]
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80018d8:	bf00      	nop
 80018da:	370c      	adds	r7, #12
 80018dc:	46bd      	mov	sp, r7
 80018de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e2:	4770      	bx	lr

080018e4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80018e4:	b480      	push	{r7}
 80018e6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80018e8:	4b04      	ldr	r3, [pc, #16]	@ (80018fc <HAL_PWREx_GetVoltageRange+0x18>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80018f0:	4618      	mov	r0, r3
 80018f2:	46bd      	mov	sp, r7
 80018f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f8:	4770      	bx	lr
 80018fa:	bf00      	nop
 80018fc:	40007000 	.word	0x40007000

08001900 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001900:	b480      	push	{r7}
 8001902:	b085      	sub	sp, #20
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800190e:	d130      	bne.n	8001972 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001910:	4b23      	ldr	r3, [pc, #140]	@ (80019a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001918:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800191c:	d038      	beq.n	8001990 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800191e:	4b20      	ldr	r3, [pc, #128]	@ (80019a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001926:	4a1e      	ldr	r2, [pc, #120]	@ (80019a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001928:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800192c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800192e:	4b1d      	ldr	r3, [pc, #116]	@ (80019a4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	2232      	movs	r2, #50	@ 0x32
 8001934:	fb02 f303 	mul.w	r3, r2, r3
 8001938:	4a1b      	ldr	r2, [pc, #108]	@ (80019a8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800193a:	fba2 2303 	umull	r2, r3, r2, r3
 800193e:	0c9b      	lsrs	r3, r3, #18
 8001940:	3301      	adds	r3, #1
 8001942:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001944:	e002      	b.n	800194c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	3b01      	subs	r3, #1
 800194a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800194c:	4b14      	ldr	r3, [pc, #80]	@ (80019a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800194e:	695b      	ldr	r3, [r3, #20]
 8001950:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001954:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001958:	d102      	bne.n	8001960 <HAL_PWREx_ControlVoltageScaling+0x60>
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d1f2      	bne.n	8001946 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001960:	4b0f      	ldr	r3, [pc, #60]	@ (80019a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001962:	695b      	ldr	r3, [r3, #20]
 8001964:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001968:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800196c:	d110      	bne.n	8001990 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800196e:	2303      	movs	r3, #3
 8001970:	e00f      	b.n	8001992 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001972:	4b0b      	ldr	r3, [pc, #44]	@ (80019a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800197a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800197e:	d007      	beq.n	8001990 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001980:	4b07      	ldr	r3, [pc, #28]	@ (80019a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001988:	4a05      	ldr	r2, [pc, #20]	@ (80019a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800198a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800198e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001990:	2300      	movs	r3, #0
}
 8001992:	4618      	mov	r0, r3
 8001994:	3714      	adds	r7, #20
 8001996:	46bd      	mov	sp, r7
 8001998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199c:	4770      	bx	lr
 800199e:	bf00      	nop
 80019a0:	40007000 	.word	0x40007000
 80019a4:	20000014 	.word	0x20000014
 80019a8:	431bde83 	.word	0x431bde83

080019ac <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b088      	sub	sp, #32
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d101      	bne.n	80019be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80019ba:	2301      	movs	r3, #1
 80019bc:	e3ca      	b.n	8002154 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80019be:	4b97      	ldr	r3, [pc, #604]	@ (8001c1c <HAL_RCC_OscConfig+0x270>)
 80019c0:	689b      	ldr	r3, [r3, #8]
 80019c2:	f003 030c 	and.w	r3, r3, #12
 80019c6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80019c8:	4b94      	ldr	r3, [pc, #592]	@ (8001c1c <HAL_RCC_OscConfig+0x270>)
 80019ca:	68db      	ldr	r3, [r3, #12]
 80019cc:	f003 0303 	and.w	r3, r3, #3
 80019d0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f003 0310 	and.w	r3, r3, #16
 80019da:	2b00      	cmp	r3, #0
 80019dc:	f000 80e4 	beq.w	8001ba8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80019e0:	69bb      	ldr	r3, [r7, #24]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d007      	beq.n	80019f6 <HAL_RCC_OscConfig+0x4a>
 80019e6:	69bb      	ldr	r3, [r7, #24]
 80019e8:	2b0c      	cmp	r3, #12
 80019ea:	f040 808b 	bne.w	8001b04 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80019ee:	697b      	ldr	r3, [r7, #20]
 80019f0:	2b01      	cmp	r3, #1
 80019f2:	f040 8087 	bne.w	8001b04 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80019f6:	4b89      	ldr	r3, [pc, #548]	@ (8001c1c <HAL_RCC_OscConfig+0x270>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f003 0302 	and.w	r3, r3, #2
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d005      	beq.n	8001a0e <HAL_RCC_OscConfig+0x62>
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	699b      	ldr	r3, [r3, #24]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d101      	bne.n	8001a0e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	e3a2      	b.n	8002154 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6a1a      	ldr	r2, [r3, #32]
 8001a12:	4b82      	ldr	r3, [pc, #520]	@ (8001c1c <HAL_RCC_OscConfig+0x270>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f003 0308 	and.w	r3, r3, #8
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d004      	beq.n	8001a28 <HAL_RCC_OscConfig+0x7c>
 8001a1e:	4b7f      	ldr	r3, [pc, #508]	@ (8001c1c <HAL_RCC_OscConfig+0x270>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001a26:	e005      	b.n	8001a34 <HAL_RCC_OscConfig+0x88>
 8001a28:	4b7c      	ldr	r3, [pc, #496]	@ (8001c1c <HAL_RCC_OscConfig+0x270>)
 8001a2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001a2e:	091b      	lsrs	r3, r3, #4
 8001a30:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001a34:	4293      	cmp	r3, r2
 8001a36:	d223      	bcs.n	8001a80 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6a1b      	ldr	r3, [r3, #32]
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f000 fd55 	bl	80024ec <RCC_SetFlashLatencyFromMSIRange>
 8001a42:	4603      	mov	r3, r0
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d001      	beq.n	8001a4c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001a48:	2301      	movs	r3, #1
 8001a4a:	e383      	b.n	8002154 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a4c:	4b73      	ldr	r3, [pc, #460]	@ (8001c1c <HAL_RCC_OscConfig+0x270>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4a72      	ldr	r2, [pc, #456]	@ (8001c1c <HAL_RCC_OscConfig+0x270>)
 8001a52:	f043 0308 	orr.w	r3, r3, #8
 8001a56:	6013      	str	r3, [r2, #0]
 8001a58:	4b70      	ldr	r3, [pc, #448]	@ (8001c1c <HAL_RCC_OscConfig+0x270>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6a1b      	ldr	r3, [r3, #32]
 8001a64:	496d      	ldr	r1, [pc, #436]	@ (8001c1c <HAL_RCC_OscConfig+0x270>)
 8001a66:	4313      	orrs	r3, r2
 8001a68:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a6a:	4b6c      	ldr	r3, [pc, #432]	@ (8001c1c <HAL_RCC_OscConfig+0x270>)
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	69db      	ldr	r3, [r3, #28]
 8001a76:	021b      	lsls	r3, r3, #8
 8001a78:	4968      	ldr	r1, [pc, #416]	@ (8001c1c <HAL_RCC_OscConfig+0x270>)
 8001a7a:	4313      	orrs	r3, r2
 8001a7c:	604b      	str	r3, [r1, #4]
 8001a7e:	e025      	b.n	8001acc <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a80:	4b66      	ldr	r3, [pc, #408]	@ (8001c1c <HAL_RCC_OscConfig+0x270>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a65      	ldr	r2, [pc, #404]	@ (8001c1c <HAL_RCC_OscConfig+0x270>)
 8001a86:	f043 0308 	orr.w	r3, r3, #8
 8001a8a:	6013      	str	r3, [r2, #0]
 8001a8c:	4b63      	ldr	r3, [pc, #396]	@ (8001c1c <HAL_RCC_OscConfig+0x270>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6a1b      	ldr	r3, [r3, #32]
 8001a98:	4960      	ldr	r1, [pc, #384]	@ (8001c1c <HAL_RCC_OscConfig+0x270>)
 8001a9a:	4313      	orrs	r3, r2
 8001a9c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a9e:	4b5f      	ldr	r3, [pc, #380]	@ (8001c1c <HAL_RCC_OscConfig+0x270>)
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	69db      	ldr	r3, [r3, #28]
 8001aaa:	021b      	lsls	r3, r3, #8
 8001aac:	495b      	ldr	r1, [pc, #364]	@ (8001c1c <HAL_RCC_OscConfig+0x270>)
 8001aae:	4313      	orrs	r3, r2
 8001ab0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001ab2:	69bb      	ldr	r3, [r7, #24]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d109      	bne.n	8001acc <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6a1b      	ldr	r3, [r3, #32]
 8001abc:	4618      	mov	r0, r3
 8001abe:	f000 fd15 	bl	80024ec <RCC_SetFlashLatencyFromMSIRange>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d001      	beq.n	8001acc <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	e343      	b.n	8002154 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001acc:	f000 fc4a 	bl	8002364 <HAL_RCC_GetSysClockFreq>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	4b52      	ldr	r3, [pc, #328]	@ (8001c1c <HAL_RCC_OscConfig+0x270>)
 8001ad4:	689b      	ldr	r3, [r3, #8]
 8001ad6:	091b      	lsrs	r3, r3, #4
 8001ad8:	f003 030f 	and.w	r3, r3, #15
 8001adc:	4950      	ldr	r1, [pc, #320]	@ (8001c20 <HAL_RCC_OscConfig+0x274>)
 8001ade:	5ccb      	ldrb	r3, [r1, r3]
 8001ae0:	f003 031f 	and.w	r3, r3, #31
 8001ae4:	fa22 f303 	lsr.w	r3, r2, r3
 8001ae8:	4a4e      	ldr	r2, [pc, #312]	@ (8001c24 <HAL_RCC_OscConfig+0x278>)
 8001aea:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001aec:	4b4e      	ldr	r3, [pc, #312]	@ (8001c28 <HAL_RCC_OscConfig+0x27c>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4618      	mov	r0, r3
 8001af2:	f7ff fbc7 	bl	8001284 <HAL_InitTick>
 8001af6:	4603      	mov	r3, r0
 8001af8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001afa:	7bfb      	ldrb	r3, [r7, #15]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d052      	beq.n	8001ba6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001b00:	7bfb      	ldrb	r3, [r7, #15]
 8001b02:	e327      	b.n	8002154 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	699b      	ldr	r3, [r3, #24]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d032      	beq.n	8001b72 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001b0c:	4b43      	ldr	r3, [pc, #268]	@ (8001c1c <HAL_RCC_OscConfig+0x270>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a42      	ldr	r2, [pc, #264]	@ (8001c1c <HAL_RCC_OscConfig+0x270>)
 8001b12:	f043 0301 	orr.w	r3, r3, #1
 8001b16:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001b18:	f7ff fc04 	bl	8001324 <HAL_GetTick>
 8001b1c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001b1e:	e008      	b.n	8001b32 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001b20:	f7ff fc00 	bl	8001324 <HAL_GetTick>
 8001b24:	4602      	mov	r2, r0
 8001b26:	693b      	ldr	r3, [r7, #16]
 8001b28:	1ad3      	subs	r3, r2, r3
 8001b2a:	2b02      	cmp	r3, #2
 8001b2c:	d901      	bls.n	8001b32 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001b2e:	2303      	movs	r3, #3
 8001b30:	e310      	b.n	8002154 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001b32:	4b3a      	ldr	r3, [pc, #232]	@ (8001c1c <HAL_RCC_OscConfig+0x270>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f003 0302 	and.w	r3, r3, #2
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d0f0      	beq.n	8001b20 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b3e:	4b37      	ldr	r3, [pc, #220]	@ (8001c1c <HAL_RCC_OscConfig+0x270>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4a36      	ldr	r2, [pc, #216]	@ (8001c1c <HAL_RCC_OscConfig+0x270>)
 8001b44:	f043 0308 	orr.w	r3, r3, #8
 8001b48:	6013      	str	r3, [r2, #0]
 8001b4a:	4b34      	ldr	r3, [pc, #208]	@ (8001c1c <HAL_RCC_OscConfig+0x270>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6a1b      	ldr	r3, [r3, #32]
 8001b56:	4931      	ldr	r1, [pc, #196]	@ (8001c1c <HAL_RCC_OscConfig+0x270>)
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b5c:	4b2f      	ldr	r3, [pc, #188]	@ (8001c1c <HAL_RCC_OscConfig+0x270>)
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	69db      	ldr	r3, [r3, #28]
 8001b68:	021b      	lsls	r3, r3, #8
 8001b6a:	492c      	ldr	r1, [pc, #176]	@ (8001c1c <HAL_RCC_OscConfig+0x270>)
 8001b6c:	4313      	orrs	r3, r2
 8001b6e:	604b      	str	r3, [r1, #4]
 8001b70:	e01a      	b.n	8001ba8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001b72:	4b2a      	ldr	r3, [pc, #168]	@ (8001c1c <HAL_RCC_OscConfig+0x270>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4a29      	ldr	r2, [pc, #164]	@ (8001c1c <HAL_RCC_OscConfig+0x270>)
 8001b78:	f023 0301 	bic.w	r3, r3, #1
 8001b7c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001b7e:	f7ff fbd1 	bl	8001324 <HAL_GetTick>
 8001b82:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001b84:	e008      	b.n	8001b98 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001b86:	f7ff fbcd 	bl	8001324 <HAL_GetTick>
 8001b8a:	4602      	mov	r2, r0
 8001b8c:	693b      	ldr	r3, [r7, #16]
 8001b8e:	1ad3      	subs	r3, r2, r3
 8001b90:	2b02      	cmp	r3, #2
 8001b92:	d901      	bls.n	8001b98 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001b94:	2303      	movs	r3, #3
 8001b96:	e2dd      	b.n	8002154 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001b98:	4b20      	ldr	r3, [pc, #128]	@ (8001c1c <HAL_RCC_OscConfig+0x270>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f003 0302 	and.w	r3, r3, #2
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d1f0      	bne.n	8001b86 <HAL_RCC_OscConfig+0x1da>
 8001ba4:	e000      	b.n	8001ba8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001ba6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f003 0301 	and.w	r3, r3, #1
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d074      	beq.n	8001c9e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001bb4:	69bb      	ldr	r3, [r7, #24]
 8001bb6:	2b08      	cmp	r3, #8
 8001bb8:	d005      	beq.n	8001bc6 <HAL_RCC_OscConfig+0x21a>
 8001bba:	69bb      	ldr	r3, [r7, #24]
 8001bbc:	2b0c      	cmp	r3, #12
 8001bbe:	d10e      	bne.n	8001bde <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001bc0:	697b      	ldr	r3, [r7, #20]
 8001bc2:	2b03      	cmp	r3, #3
 8001bc4:	d10b      	bne.n	8001bde <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bc6:	4b15      	ldr	r3, [pc, #84]	@ (8001c1c <HAL_RCC_OscConfig+0x270>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d064      	beq.n	8001c9c <HAL_RCC_OscConfig+0x2f0>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d160      	bne.n	8001c9c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	e2ba      	b.n	8002154 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001be6:	d106      	bne.n	8001bf6 <HAL_RCC_OscConfig+0x24a>
 8001be8:	4b0c      	ldr	r3, [pc, #48]	@ (8001c1c <HAL_RCC_OscConfig+0x270>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a0b      	ldr	r2, [pc, #44]	@ (8001c1c <HAL_RCC_OscConfig+0x270>)
 8001bee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001bf2:	6013      	str	r3, [r2, #0]
 8001bf4:	e026      	b.n	8001c44 <HAL_RCC_OscConfig+0x298>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001bfe:	d115      	bne.n	8001c2c <HAL_RCC_OscConfig+0x280>
 8001c00:	4b06      	ldr	r3, [pc, #24]	@ (8001c1c <HAL_RCC_OscConfig+0x270>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a05      	ldr	r2, [pc, #20]	@ (8001c1c <HAL_RCC_OscConfig+0x270>)
 8001c06:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001c0a:	6013      	str	r3, [r2, #0]
 8001c0c:	4b03      	ldr	r3, [pc, #12]	@ (8001c1c <HAL_RCC_OscConfig+0x270>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a02      	ldr	r2, [pc, #8]	@ (8001c1c <HAL_RCC_OscConfig+0x270>)
 8001c12:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c16:	6013      	str	r3, [r2, #0]
 8001c18:	e014      	b.n	8001c44 <HAL_RCC_OscConfig+0x298>
 8001c1a:	bf00      	nop
 8001c1c:	40021000 	.word	0x40021000
 8001c20:	080079cc 	.word	0x080079cc
 8001c24:	20000014 	.word	0x20000014
 8001c28:	20000018 	.word	0x20000018
 8001c2c:	4ba0      	ldr	r3, [pc, #640]	@ (8001eb0 <HAL_RCC_OscConfig+0x504>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a9f      	ldr	r2, [pc, #636]	@ (8001eb0 <HAL_RCC_OscConfig+0x504>)
 8001c32:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c36:	6013      	str	r3, [r2, #0]
 8001c38:	4b9d      	ldr	r3, [pc, #628]	@ (8001eb0 <HAL_RCC_OscConfig+0x504>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a9c      	ldr	r2, [pc, #624]	@ (8001eb0 <HAL_RCC_OscConfig+0x504>)
 8001c3e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c42:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d013      	beq.n	8001c74 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c4c:	f7ff fb6a 	bl	8001324 <HAL_GetTick>
 8001c50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c52:	e008      	b.n	8001c66 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c54:	f7ff fb66 	bl	8001324 <HAL_GetTick>
 8001c58:	4602      	mov	r2, r0
 8001c5a:	693b      	ldr	r3, [r7, #16]
 8001c5c:	1ad3      	subs	r3, r2, r3
 8001c5e:	2b64      	cmp	r3, #100	@ 0x64
 8001c60:	d901      	bls.n	8001c66 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001c62:	2303      	movs	r3, #3
 8001c64:	e276      	b.n	8002154 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c66:	4b92      	ldr	r3, [pc, #584]	@ (8001eb0 <HAL_RCC_OscConfig+0x504>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d0f0      	beq.n	8001c54 <HAL_RCC_OscConfig+0x2a8>
 8001c72:	e014      	b.n	8001c9e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c74:	f7ff fb56 	bl	8001324 <HAL_GetTick>
 8001c78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c7a:	e008      	b.n	8001c8e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c7c:	f7ff fb52 	bl	8001324 <HAL_GetTick>
 8001c80:	4602      	mov	r2, r0
 8001c82:	693b      	ldr	r3, [r7, #16]
 8001c84:	1ad3      	subs	r3, r2, r3
 8001c86:	2b64      	cmp	r3, #100	@ 0x64
 8001c88:	d901      	bls.n	8001c8e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001c8a:	2303      	movs	r3, #3
 8001c8c:	e262      	b.n	8002154 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c8e:	4b88      	ldr	r3, [pc, #544]	@ (8001eb0 <HAL_RCC_OscConfig+0x504>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d1f0      	bne.n	8001c7c <HAL_RCC_OscConfig+0x2d0>
 8001c9a:	e000      	b.n	8001c9e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f003 0302 	and.w	r3, r3, #2
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d060      	beq.n	8001d6c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001caa:	69bb      	ldr	r3, [r7, #24]
 8001cac:	2b04      	cmp	r3, #4
 8001cae:	d005      	beq.n	8001cbc <HAL_RCC_OscConfig+0x310>
 8001cb0:	69bb      	ldr	r3, [r7, #24]
 8001cb2:	2b0c      	cmp	r3, #12
 8001cb4:	d119      	bne.n	8001cea <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001cb6:	697b      	ldr	r3, [r7, #20]
 8001cb8:	2b02      	cmp	r3, #2
 8001cba:	d116      	bne.n	8001cea <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001cbc:	4b7c      	ldr	r3, [pc, #496]	@ (8001eb0 <HAL_RCC_OscConfig+0x504>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d005      	beq.n	8001cd4 <HAL_RCC_OscConfig+0x328>
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	68db      	ldr	r3, [r3, #12]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d101      	bne.n	8001cd4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	e23f      	b.n	8002154 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cd4:	4b76      	ldr	r3, [pc, #472]	@ (8001eb0 <HAL_RCC_OscConfig+0x504>)
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	691b      	ldr	r3, [r3, #16]
 8001ce0:	061b      	lsls	r3, r3, #24
 8001ce2:	4973      	ldr	r1, [pc, #460]	@ (8001eb0 <HAL_RCC_OscConfig+0x504>)
 8001ce4:	4313      	orrs	r3, r2
 8001ce6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ce8:	e040      	b.n	8001d6c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	68db      	ldr	r3, [r3, #12]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d023      	beq.n	8001d3a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001cf2:	4b6f      	ldr	r3, [pc, #444]	@ (8001eb0 <HAL_RCC_OscConfig+0x504>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4a6e      	ldr	r2, [pc, #440]	@ (8001eb0 <HAL_RCC_OscConfig+0x504>)
 8001cf8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001cfc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cfe:	f7ff fb11 	bl	8001324 <HAL_GetTick>
 8001d02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d04:	e008      	b.n	8001d18 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d06:	f7ff fb0d 	bl	8001324 <HAL_GetTick>
 8001d0a:	4602      	mov	r2, r0
 8001d0c:	693b      	ldr	r3, [r7, #16]
 8001d0e:	1ad3      	subs	r3, r2, r3
 8001d10:	2b02      	cmp	r3, #2
 8001d12:	d901      	bls.n	8001d18 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001d14:	2303      	movs	r3, #3
 8001d16:	e21d      	b.n	8002154 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d18:	4b65      	ldr	r3, [pc, #404]	@ (8001eb0 <HAL_RCC_OscConfig+0x504>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d0f0      	beq.n	8001d06 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d24:	4b62      	ldr	r3, [pc, #392]	@ (8001eb0 <HAL_RCC_OscConfig+0x504>)
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	691b      	ldr	r3, [r3, #16]
 8001d30:	061b      	lsls	r3, r3, #24
 8001d32:	495f      	ldr	r1, [pc, #380]	@ (8001eb0 <HAL_RCC_OscConfig+0x504>)
 8001d34:	4313      	orrs	r3, r2
 8001d36:	604b      	str	r3, [r1, #4]
 8001d38:	e018      	b.n	8001d6c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d3a:	4b5d      	ldr	r3, [pc, #372]	@ (8001eb0 <HAL_RCC_OscConfig+0x504>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4a5c      	ldr	r2, [pc, #368]	@ (8001eb0 <HAL_RCC_OscConfig+0x504>)
 8001d40:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001d44:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d46:	f7ff faed 	bl	8001324 <HAL_GetTick>
 8001d4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001d4c:	e008      	b.n	8001d60 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d4e:	f7ff fae9 	bl	8001324 <HAL_GetTick>
 8001d52:	4602      	mov	r2, r0
 8001d54:	693b      	ldr	r3, [r7, #16]
 8001d56:	1ad3      	subs	r3, r2, r3
 8001d58:	2b02      	cmp	r3, #2
 8001d5a:	d901      	bls.n	8001d60 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001d5c:	2303      	movs	r3, #3
 8001d5e:	e1f9      	b.n	8002154 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001d60:	4b53      	ldr	r3, [pc, #332]	@ (8001eb0 <HAL_RCC_OscConfig+0x504>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d1f0      	bne.n	8001d4e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f003 0308 	and.w	r3, r3, #8
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d03c      	beq.n	8001df2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	695b      	ldr	r3, [r3, #20]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d01c      	beq.n	8001dba <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d80:	4b4b      	ldr	r3, [pc, #300]	@ (8001eb0 <HAL_RCC_OscConfig+0x504>)
 8001d82:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001d86:	4a4a      	ldr	r2, [pc, #296]	@ (8001eb0 <HAL_RCC_OscConfig+0x504>)
 8001d88:	f043 0301 	orr.w	r3, r3, #1
 8001d8c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d90:	f7ff fac8 	bl	8001324 <HAL_GetTick>
 8001d94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d96:	e008      	b.n	8001daa <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d98:	f7ff fac4 	bl	8001324 <HAL_GetTick>
 8001d9c:	4602      	mov	r2, r0
 8001d9e:	693b      	ldr	r3, [r7, #16]
 8001da0:	1ad3      	subs	r3, r2, r3
 8001da2:	2b02      	cmp	r3, #2
 8001da4:	d901      	bls.n	8001daa <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001da6:	2303      	movs	r3, #3
 8001da8:	e1d4      	b.n	8002154 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001daa:	4b41      	ldr	r3, [pc, #260]	@ (8001eb0 <HAL_RCC_OscConfig+0x504>)
 8001dac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001db0:	f003 0302 	and.w	r3, r3, #2
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d0ef      	beq.n	8001d98 <HAL_RCC_OscConfig+0x3ec>
 8001db8:	e01b      	b.n	8001df2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001dba:	4b3d      	ldr	r3, [pc, #244]	@ (8001eb0 <HAL_RCC_OscConfig+0x504>)
 8001dbc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001dc0:	4a3b      	ldr	r2, [pc, #236]	@ (8001eb0 <HAL_RCC_OscConfig+0x504>)
 8001dc2:	f023 0301 	bic.w	r3, r3, #1
 8001dc6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dca:	f7ff faab 	bl	8001324 <HAL_GetTick>
 8001dce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001dd0:	e008      	b.n	8001de4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001dd2:	f7ff faa7 	bl	8001324 <HAL_GetTick>
 8001dd6:	4602      	mov	r2, r0
 8001dd8:	693b      	ldr	r3, [r7, #16]
 8001dda:	1ad3      	subs	r3, r2, r3
 8001ddc:	2b02      	cmp	r3, #2
 8001dde:	d901      	bls.n	8001de4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001de0:	2303      	movs	r3, #3
 8001de2:	e1b7      	b.n	8002154 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001de4:	4b32      	ldr	r3, [pc, #200]	@ (8001eb0 <HAL_RCC_OscConfig+0x504>)
 8001de6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001dea:	f003 0302 	and.w	r3, r3, #2
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d1ef      	bne.n	8001dd2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f003 0304 	and.w	r3, r3, #4
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	f000 80a6 	beq.w	8001f4c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e00:	2300      	movs	r3, #0
 8001e02:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001e04:	4b2a      	ldr	r3, [pc, #168]	@ (8001eb0 <HAL_RCC_OscConfig+0x504>)
 8001e06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e08:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d10d      	bne.n	8001e2c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e10:	4b27      	ldr	r3, [pc, #156]	@ (8001eb0 <HAL_RCC_OscConfig+0x504>)
 8001e12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e14:	4a26      	ldr	r2, [pc, #152]	@ (8001eb0 <HAL_RCC_OscConfig+0x504>)
 8001e16:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e1a:	6593      	str	r3, [r2, #88]	@ 0x58
 8001e1c:	4b24      	ldr	r3, [pc, #144]	@ (8001eb0 <HAL_RCC_OscConfig+0x504>)
 8001e1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e20:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e24:	60bb      	str	r3, [r7, #8]
 8001e26:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e28:	2301      	movs	r3, #1
 8001e2a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e2c:	4b21      	ldr	r3, [pc, #132]	@ (8001eb4 <HAL_RCC_OscConfig+0x508>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d118      	bne.n	8001e6a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001e38:	4b1e      	ldr	r3, [pc, #120]	@ (8001eb4 <HAL_RCC_OscConfig+0x508>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a1d      	ldr	r2, [pc, #116]	@ (8001eb4 <HAL_RCC_OscConfig+0x508>)
 8001e3e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e42:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e44:	f7ff fa6e 	bl	8001324 <HAL_GetTick>
 8001e48:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e4a:	e008      	b.n	8001e5e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e4c:	f7ff fa6a 	bl	8001324 <HAL_GetTick>
 8001e50:	4602      	mov	r2, r0
 8001e52:	693b      	ldr	r3, [r7, #16]
 8001e54:	1ad3      	subs	r3, r2, r3
 8001e56:	2b02      	cmp	r3, #2
 8001e58:	d901      	bls.n	8001e5e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001e5a:	2303      	movs	r3, #3
 8001e5c:	e17a      	b.n	8002154 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e5e:	4b15      	ldr	r3, [pc, #84]	@ (8001eb4 <HAL_RCC_OscConfig+0x508>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d0f0      	beq.n	8001e4c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	689b      	ldr	r3, [r3, #8]
 8001e6e:	2b01      	cmp	r3, #1
 8001e70:	d108      	bne.n	8001e84 <HAL_RCC_OscConfig+0x4d8>
 8001e72:	4b0f      	ldr	r3, [pc, #60]	@ (8001eb0 <HAL_RCC_OscConfig+0x504>)
 8001e74:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e78:	4a0d      	ldr	r2, [pc, #52]	@ (8001eb0 <HAL_RCC_OscConfig+0x504>)
 8001e7a:	f043 0301 	orr.w	r3, r3, #1
 8001e7e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001e82:	e029      	b.n	8001ed8 <HAL_RCC_OscConfig+0x52c>
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	689b      	ldr	r3, [r3, #8]
 8001e88:	2b05      	cmp	r3, #5
 8001e8a:	d115      	bne.n	8001eb8 <HAL_RCC_OscConfig+0x50c>
 8001e8c:	4b08      	ldr	r3, [pc, #32]	@ (8001eb0 <HAL_RCC_OscConfig+0x504>)
 8001e8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e92:	4a07      	ldr	r2, [pc, #28]	@ (8001eb0 <HAL_RCC_OscConfig+0x504>)
 8001e94:	f043 0304 	orr.w	r3, r3, #4
 8001e98:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001e9c:	4b04      	ldr	r3, [pc, #16]	@ (8001eb0 <HAL_RCC_OscConfig+0x504>)
 8001e9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ea2:	4a03      	ldr	r2, [pc, #12]	@ (8001eb0 <HAL_RCC_OscConfig+0x504>)
 8001ea4:	f043 0301 	orr.w	r3, r3, #1
 8001ea8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001eac:	e014      	b.n	8001ed8 <HAL_RCC_OscConfig+0x52c>
 8001eae:	bf00      	nop
 8001eb0:	40021000 	.word	0x40021000
 8001eb4:	40007000 	.word	0x40007000
 8001eb8:	4b9c      	ldr	r3, [pc, #624]	@ (800212c <HAL_RCC_OscConfig+0x780>)
 8001eba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ebe:	4a9b      	ldr	r2, [pc, #620]	@ (800212c <HAL_RCC_OscConfig+0x780>)
 8001ec0:	f023 0301 	bic.w	r3, r3, #1
 8001ec4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001ec8:	4b98      	ldr	r3, [pc, #608]	@ (800212c <HAL_RCC_OscConfig+0x780>)
 8001eca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ece:	4a97      	ldr	r2, [pc, #604]	@ (800212c <HAL_RCC_OscConfig+0x780>)
 8001ed0:	f023 0304 	bic.w	r3, r3, #4
 8001ed4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	689b      	ldr	r3, [r3, #8]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d016      	beq.n	8001f0e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ee0:	f7ff fa20 	bl	8001324 <HAL_GetTick>
 8001ee4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ee6:	e00a      	b.n	8001efe <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ee8:	f7ff fa1c 	bl	8001324 <HAL_GetTick>
 8001eec:	4602      	mov	r2, r0
 8001eee:	693b      	ldr	r3, [r7, #16]
 8001ef0:	1ad3      	subs	r3, r2, r3
 8001ef2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d901      	bls.n	8001efe <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001efa:	2303      	movs	r3, #3
 8001efc:	e12a      	b.n	8002154 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001efe:	4b8b      	ldr	r3, [pc, #556]	@ (800212c <HAL_RCC_OscConfig+0x780>)
 8001f00:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f04:	f003 0302 	and.w	r3, r3, #2
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d0ed      	beq.n	8001ee8 <HAL_RCC_OscConfig+0x53c>
 8001f0c:	e015      	b.n	8001f3a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f0e:	f7ff fa09 	bl	8001324 <HAL_GetTick>
 8001f12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001f14:	e00a      	b.n	8001f2c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f16:	f7ff fa05 	bl	8001324 <HAL_GetTick>
 8001f1a:	4602      	mov	r2, r0
 8001f1c:	693b      	ldr	r3, [r7, #16]
 8001f1e:	1ad3      	subs	r3, r2, r3
 8001f20:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d901      	bls.n	8001f2c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001f28:	2303      	movs	r3, #3
 8001f2a:	e113      	b.n	8002154 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001f2c:	4b7f      	ldr	r3, [pc, #508]	@ (800212c <HAL_RCC_OscConfig+0x780>)
 8001f2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f32:	f003 0302 	and.w	r3, r3, #2
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d1ed      	bne.n	8001f16 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001f3a:	7ffb      	ldrb	r3, [r7, #31]
 8001f3c:	2b01      	cmp	r3, #1
 8001f3e:	d105      	bne.n	8001f4c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f40:	4b7a      	ldr	r3, [pc, #488]	@ (800212c <HAL_RCC_OscConfig+0x780>)
 8001f42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f44:	4a79      	ldr	r2, [pc, #484]	@ (800212c <HAL_RCC_OscConfig+0x780>)
 8001f46:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001f4a:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	f000 80fe 	beq.w	8002152 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f5a:	2b02      	cmp	r3, #2
 8001f5c:	f040 80d0 	bne.w	8002100 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001f60:	4b72      	ldr	r3, [pc, #456]	@ (800212c <HAL_RCC_OscConfig+0x780>)
 8001f62:	68db      	ldr	r3, [r3, #12]
 8001f64:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f66:	697b      	ldr	r3, [r7, #20]
 8001f68:	f003 0203 	and.w	r2, r3, #3
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f70:	429a      	cmp	r2, r3
 8001f72:	d130      	bne.n	8001fd6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f7e:	3b01      	subs	r3, #1
 8001f80:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f82:	429a      	cmp	r2, r3
 8001f84:	d127      	bne.n	8001fd6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f86:	697b      	ldr	r3, [r7, #20]
 8001f88:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f90:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001f92:	429a      	cmp	r2, r3
 8001f94:	d11f      	bne.n	8001fd6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001f96:	697b      	ldr	r3, [r7, #20]
 8001f98:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f9c:	687a      	ldr	r2, [r7, #4]
 8001f9e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001fa0:	2a07      	cmp	r2, #7
 8001fa2:	bf14      	ite	ne
 8001fa4:	2201      	movne	r2, #1
 8001fa6:	2200      	moveq	r2, #0
 8001fa8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d113      	bne.n	8001fd6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001fae:	697b      	ldr	r3, [r7, #20]
 8001fb0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001fb8:	085b      	lsrs	r3, r3, #1
 8001fba:	3b01      	subs	r3, #1
 8001fbc:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001fbe:	429a      	cmp	r2, r3
 8001fc0:	d109      	bne.n	8001fd6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001fc2:	697b      	ldr	r3, [r7, #20]
 8001fc4:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fcc:	085b      	lsrs	r3, r3, #1
 8001fce:	3b01      	subs	r3, #1
 8001fd0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001fd2:	429a      	cmp	r2, r3
 8001fd4:	d06e      	beq.n	80020b4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001fd6:	69bb      	ldr	r3, [r7, #24]
 8001fd8:	2b0c      	cmp	r3, #12
 8001fda:	d069      	beq.n	80020b0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001fdc:	4b53      	ldr	r3, [pc, #332]	@ (800212c <HAL_RCC_OscConfig+0x780>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d105      	bne.n	8001ff4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001fe8:	4b50      	ldr	r3, [pc, #320]	@ (800212c <HAL_RCC_OscConfig+0x780>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d001      	beq.n	8001ff8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	e0ad      	b.n	8002154 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001ff8:	4b4c      	ldr	r3, [pc, #304]	@ (800212c <HAL_RCC_OscConfig+0x780>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a4b      	ldr	r2, [pc, #300]	@ (800212c <HAL_RCC_OscConfig+0x780>)
 8001ffe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002002:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002004:	f7ff f98e 	bl	8001324 <HAL_GetTick>
 8002008:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800200a:	e008      	b.n	800201e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800200c:	f7ff f98a 	bl	8001324 <HAL_GetTick>
 8002010:	4602      	mov	r2, r0
 8002012:	693b      	ldr	r3, [r7, #16]
 8002014:	1ad3      	subs	r3, r2, r3
 8002016:	2b02      	cmp	r3, #2
 8002018:	d901      	bls.n	800201e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800201a:	2303      	movs	r3, #3
 800201c:	e09a      	b.n	8002154 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800201e:	4b43      	ldr	r3, [pc, #268]	@ (800212c <HAL_RCC_OscConfig+0x780>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002026:	2b00      	cmp	r3, #0
 8002028:	d1f0      	bne.n	800200c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800202a:	4b40      	ldr	r3, [pc, #256]	@ (800212c <HAL_RCC_OscConfig+0x780>)
 800202c:	68da      	ldr	r2, [r3, #12]
 800202e:	4b40      	ldr	r3, [pc, #256]	@ (8002130 <HAL_RCC_OscConfig+0x784>)
 8002030:	4013      	ands	r3, r2
 8002032:	687a      	ldr	r2, [r7, #4]
 8002034:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002036:	687a      	ldr	r2, [r7, #4]
 8002038:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800203a:	3a01      	subs	r2, #1
 800203c:	0112      	lsls	r2, r2, #4
 800203e:	4311      	orrs	r1, r2
 8002040:	687a      	ldr	r2, [r7, #4]
 8002042:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002044:	0212      	lsls	r2, r2, #8
 8002046:	4311      	orrs	r1, r2
 8002048:	687a      	ldr	r2, [r7, #4]
 800204a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800204c:	0852      	lsrs	r2, r2, #1
 800204e:	3a01      	subs	r2, #1
 8002050:	0552      	lsls	r2, r2, #21
 8002052:	4311      	orrs	r1, r2
 8002054:	687a      	ldr	r2, [r7, #4]
 8002056:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002058:	0852      	lsrs	r2, r2, #1
 800205a:	3a01      	subs	r2, #1
 800205c:	0652      	lsls	r2, r2, #25
 800205e:	4311      	orrs	r1, r2
 8002060:	687a      	ldr	r2, [r7, #4]
 8002062:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002064:	0912      	lsrs	r2, r2, #4
 8002066:	0452      	lsls	r2, r2, #17
 8002068:	430a      	orrs	r2, r1
 800206a:	4930      	ldr	r1, [pc, #192]	@ (800212c <HAL_RCC_OscConfig+0x780>)
 800206c:	4313      	orrs	r3, r2
 800206e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002070:	4b2e      	ldr	r3, [pc, #184]	@ (800212c <HAL_RCC_OscConfig+0x780>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a2d      	ldr	r2, [pc, #180]	@ (800212c <HAL_RCC_OscConfig+0x780>)
 8002076:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800207a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800207c:	4b2b      	ldr	r3, [pc, #172]	@ (800212c <HAL_RCC_OscConfig+0x780>)
 800207e:	68db      	ldr	r3, [r3, #12]
 8002080:	4a2a      	ldr	r2, [pc, #168]	@ (800212c <HAL_RCC_OscConfig+0x780>)
 8002082:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002086:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002088:	f7ff f94c 	bl	8001324 <HAL_GetTick>
 800208c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800208e:	e008      	b.n	80020a2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002090:	f7ff f948 	bl	8001324 <HAL_GetTick>
 8002094:	4602      	mov	r2, r0
 8002096:	693b      	ldr	r3, [r7, #16]
 8002098:	1ad3      	subs	r3, r2, r3
 800209a:	2b02      	cmp	r3, #2
 800209c:	d901      	bls.n	80020a2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800209e:	2303      	movs	r3, #3
 80020a0:	e058      	b.n	8002154 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020a2:	4b22      	ldr	r3, [pc, #136]	@ (800212c <HAL_RCC_OscConfig+0x780>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d0f0      	beq.n	8002090 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80020ae:	e050      	b.n	8002152 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80020b0:	2301      	movs	r3, #1
 80020b2:	e04f      	b.n	8002154 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020b4:	4b1d      	ldr	r3, [pc, #116]	@ (800212c <HAL_RCC_OscConfig+0x780>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d148      	bne.n	8002152 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80020c0:	4b1a      	ldr	r3, [pc, #104]	@ (800212c <HAL_RCC_OscConfig+0x780>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a19      	ldr	r2, [pc, #100]	@ (800212c <HAL_RCC_OscConfig+0x780>)
 80020c6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80020ca:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80020cc:	4b17      	ldr	r3, [pc, #92]	@ (800212c <HAL_RCC_OscConfig+0x780>)
 80020ce:	68db      	ldr	r3, [r3, #12]
 80020d0:	4a16      	ldr	r2, [pc, #88]	@ (800212c <HAL_RCC_OscConfig+0x780>)
 80020d2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80020d6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80020d8:	f7ff f924 	bl	8001324 <HAL_GetTick>
 80020dc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020de:	e008      	b.n	80020f2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020e0:	f7ff f920 	bl	8001324 <HAL_GetTick>
 80020e4:	4602      	mov	r2, r0
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	1ad3      	subs	r3, r2, r3
 80020ea:	2b02      	cmp	r3, #2
 80020ec:	d901      	bls.n	80020f2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80020ee:	2303      	movs	r3, #3
 80020f0:	e030      	b.n	8002154 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020f2:	4b0e      	ldr	r3, [pc, #56]	@ (800212c <HAL_RCC_OscConfig+0x780>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d0f0      	beq.n	80020e0 <HAL_RCC_OscConfig+0x734>
 80020fe:	e028      	b.n	8002152 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002100:	69bb      	ldr	r3, [r7, #24]
 8002102:	2b0c      	cmp	r3, #12
 8002104:	d023      	beq.n	800214e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002106:	4b09      	ldr	r3, [pc, #36]	@ (800212c <HAL_RCC_OscConfig+0x780>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4a08      	ldr	r2, [pc, #32]	@ (800212c <HAL_RCC_OscConfig+0x780>)
 800210c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002110:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002112:	f7ff f907 	bl	8001324 <HAL_GetTick>
 8002116:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002118:	e00c      	b.n	8002134 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800211a:	f7ff f903 	bl	8001324 <HAL_GetTick>
 800211e:	4602      	mov	r2, r0
 8002120:	693b      	ldr	r3, [r7, #16]
 8002122:	1ad3      	subs	r3, r2, r3
 8002124:	2b02      	cmp	r3, #2
 8002126:	d905      	bls.n	8002134 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002128:	2303      	movs	r3, #3
 800212a:	e013      	b.n	8002154 <HAL_RCC_OscConfig+0x7a8>
 800212c:	40021000 	.word	0x40021000
 8002130:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002134:	4b09      	ldr	r3, [pc, #36]	@ (800215c <HAL_RCC_OscConfig+0x7b0>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800213c:	2b00      	cmp	r3, #0
 800213e:	d1ec      	bne.n	800211a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002140:	4b06      	ldr	r3, [pc, #24]	@ (800215c <HAL_RCC_OscConfig+0x7b0>)
 8002142:	68da      	ldr	r2, [r3, #12]
 8002144:	4905      	ldr	r1, [pc, #20]	@ (800215c <HAL_RCC_OscConfig+0x7b0>)
 8002146:	4b06      	ldr	r3, [pc, #24]	@ (8002160 <HAL_RCC_OscConfig+0x7b4>)
 8002148:	4013      	ands	r3, r2
 800214a:	60cb      	str	r3, [r1, #12]
 800214c:	e001      	b.n	8002152 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800214e:	2301      	movs	r3, #1
 8002150:	e000      	b.n	8002154 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002152:	2300      	movs	r3, #0
}
 8002154:	4618      	mov	r0, r3
 8002156:	3720      	adds	r7, #32
 8002158:	46bd      	mov	sp, r7
 800215a:	bd80      	pop	{r7, pc}
 800215c:	40021000 	.word	0x40021000
 8002160:	feeefffc 	.word	0xfeeefffc

08002164 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b084      	sub	sp, #16
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
 800216c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d101      	bne.n	8002178 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002174:	2301      	movs	r3, #1
 8002176:	e0e7      	b.n	8002348 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002178:	4b75      	ldr	r3, [pc, #468]	@ (8002350 <HAL_RCC_ClockConfig+0x1ec>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f003 0307 	and.w	r3, r3, #7
 8002180:	683a      	ldr	r2, [r7, #0]
 8002182:	429a      	cmp	r2, r3
 8002184:	d910      	bls.n	80021a8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002186:	4b72      	ldr	r3, [pc, #456]	@ (8002350 <HAL_RCC_ClockConfig+0x1ec>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f023 0207 	bic.w	r2, r3, #7
 800218e:	4970      	ldr	r1, [pc, #448]	@ (8002350 <HAL_RCC_ClockConfig+0x1ec>)
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	4313      	orrs	r3, r2
 8002194:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002196:	4b6e      	ldr	r3, [pc, #440]	@ (8002350 <HAL_RCC_ClockConfig+0x1ec>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f003 0307 	and.w	r3, r3, #7
 800219e:	683a      	ldr	r2, [r7, #0]
 80021a0:	429a      	cmp	r2, r3
 80021a2:	d001      	beq.n	80021a8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80021a4:	2301      	movs	r3, #1
 80021a6:	e0cf      	b.n	8002348 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f003 0302 	and.w	r3, r3, #2
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d010      	beq.n	80021d6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	689a      	ldr	r2, [r3, #8]
 80021b8:	4b66      	ldr	r3, [pc, #408]	@ (8002354 <HAL_RCC_ClockConfig+0x1f0>)
 80021ba:	689b      	ldr	r3, [r3, #8]
 80021bc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80021c0:	429a      	cmp	r2, r3
 80021c2:	d908      	bls.n	80021d6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021c4:	4b63      	ldr	r3, [pc, #396]	@ (8002354 <HAL_RCC_ClockConfig+0x1f0>)
 80021c6:	689b      	ldr	r3, [r3, #8]
 80021c8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	689b      	ldr	r3, [r3, #8]
 80021d0:	4960      	ldr	r1, [pc, #384]	@ (8002354 <HAL_RCC_ClockConfig+0x1f0>)
 80021d2:	4313      	orrs	r3, r2
 80021d4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f003 0301 	and.w	r3, r3, #1
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d04c      	beq.n	800227c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	2b03      	cmp	r3, #3
 80021e8:	d107      	bne.n	80021fa <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021ea:	4b5a      	ldr	r3, [pc, #360]	@ (8002354 <HAL_RCC_ClockConfig+0x1f0>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d121      	bne.n	800223a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80021f6:	2301      	movs	r3, #1
 80021f8:	e0a6      	b.n	8002348 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	2b02      	cmp	r3, #2
 8002200:	d107      	bne.n	8002212 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002202:	4b54      	ldr	r3, [pc, #336]	@ (8002354 <HAL_RCC_ClockConfig+0x1f0>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800220a:	2b00      	cmp	r3, #0
 800220c:	d115      	bne.n	800223a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	e09a      	b.n	8002348 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d107      	bne.n	800222a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800221a:	4b4e      	ldr	r3, [pc, #312]	@ (8002354 <HAL_RCC_ClockConfig+0x1f0>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f003 0302 	and.w	r3, r3, #2
 8002222:	2b00      	cmp	r3, #0
 8002224:	d109      	bne.n	800223a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002226:	2301      	movs	r3, #1
 8002228:	e08e      	b.n	8002348 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800222a:	4b4a      	ldr	r3, [pc, #296]	@ (8002354 <HAL_RCC_ClockConfig+0x1f0>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002232:	2b00      	cmp	r3, #0
 8002234:	d101      	bne.n	800223a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	e086      	b.n	8002348 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800223a:	4b46      	ldr	r3, [pc, #280]	@ (8002354 <HAL_RCC_ClockConfig+0x1f0>)
 800223c:	689b      	ldr	r3, [r3, #8]
 800223e:	f023 0203 	bic.w	r2, r3, #3
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	4943      	ldr	r1, [pc, #268]	@ (8002354 <HAL_RCC_ClockConfig+0x1f0>)
 8002248:	4313      	orrs	r3, r2
 800224a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800224c:	f7ff f86a 	bl	8001324 <HAL_GetTick>
 8002250:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002252:	e00a      	b.n	800226a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002254:	f7ff f866 	bl	8001324 <HAL_GetTick>
 8002258:	4602      	mov	r2, r0
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	1ad3      	subs	r3, r2, r3
 800225e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002262:	4293      	cmp	r3, r2
 8002264:	d901      	bls.n	800226a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002266:	2303      	movs	r3, #3
 8002268:	e06e      	b.n	8002348 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800226a:	4b3a      	ldr	r3, [pc, #232]	@ (8002354 <HAL_RCC_ClockConfig+0x1f0>)
 800226c:	689b      	ldr	r3, [r3, #8]
 800226e:	f003 020c 	and.w	r2, r3, #12
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	009b      	lsls	r3, r3, #2
 8002278:	429a      	cmp	r2, r3
 800227a:	d1eb      	bne.n	8002254 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f003 0302 	and.w	r3, r3, #2
 8002284:	2b00      	cmp	r3, #0
 8002286:	d010      	beq.n	80022aa <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	689a      	ldr	r2, [r3, #8]
 800228c:	4b31      	ldr	r3, [pc, #196]	@ (8002354 <HAL_RCC_ClockConfig+0x1f0>)
 800228e:	689b      	ldr	r3, [r3, #8]
 8002290:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002294:	429a      	cmp	r2, r3
 8002296:	d208      	bcs.n	80022aa <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002298:	4b2e      	ldr	r3, [pc, #184]	@ (8002354 <HAL_RCC_ClockConfig+0x1f0>)
 800229a:	689b      	ldr	r3, [r3, #8]
 800229c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	689b      	ldr	r3, [r3, #8]
 80022a4:	492b      	ldr	r1, [pc, #172]	@ (8002354 <HAL_RCC_ClockConfig+0x1f0>)
 80022a6:	4313      	orrs	r3, r2
 80022a8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80022aa:	4b29      	ldr	r3, [pc, #164]	@ (8002350 <HAL_RCC_ClockConfig+0x1ec>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f003 0307 	and.w	r3, r3, #7
 80022b2:	683a      	ldr	r2, [r7, #0]
 80022b4:	429a      	cmp	r2, r3
 80022b6:	d210      	bcs.n	80022da <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022b8:	4b25      	ldr	r3, [pc, #148]	@ (8002350 <HAL_RCC_ClockConfig+0x1ec>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f023 0207 	bic.w	r2, r3, #7
 80022c0:	4923      	ldr	r1, [pc, #140]	@ (8002350 <HAL_RCC_ClockConfig+0x1ec>)
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	4313      	orrs	r3, r2
 80022c6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022c8:	4b21      	ldr	r3, [pc, #132]	@ (8002350 <HAL_RCC_ClockConfig+0x1ec>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f003 0307 	and.w	r3, r3, #7
 80022d0:	683a      	ldr	r2, [r7, #0]
 80022d2:	429a      	cmp	r2, r3
 80022d4:	d001      	beq.n	80022da <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80022d6:	2301      	movs	r3, #1
 80022d8:	e036      	b.n	8002348 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f003 0304 	and.w	r3, r3, #4
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d008      	beq.n	80022f8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022e6:	4b1b      	ldr	r3, [pc, #108]	@ (8002354 <HAL_RCC_ClockConfig+0x1f0>)
 80022e8:	689b      	ldr	r3, [r3, #8]
 80022ea:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	68db      	ldr	r3, [r3, #12]
 80022f2:	4918      	ldr	r1, [pc, #96]	@ (8002354 <HAL_RCC_ClockConfig+0x1f0>)
 80022f4:	4313      	orrs	r3, r2
 80022f6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f003 0308 	and.w	r3, r3, #8
 8002300:	2b00      	cmp	r3, #0
 8002302:	d009      	beq.n	8002318 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002304:	4b13      	ldr	r3, [pc, #76]	@ (8002354 <HAL_RCC_ClockConfig+0x1f0>)
 8002306:	689b      	ldr	r3, [r3, #8]
 8002308:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	691b      	ldr	r3, [r3, #16]
 8002310:	00db      	lsls	r3, r3, #3
 8002312:	4910      	ldr	r1, [pc, #64]	@ (8002354 <HAL_RCC_ClockConfig+0x1f0>)
 8002314:	4313      	orrs	r3, r2
 8002316:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002318:	f000 f824 	bl	8002364 <HAL_RCC_GetSysClockFreq>
 800231c:	4602      	mov	r2, r0
 800231e:	4b0d      	ldr	r3, [pc, #52]	@ (8002354 <HAL_RCC_ClockConfig+0x1f0>)
 8002320:	689b      	ldr	r3, [r3, #8]
 8002322:	091b      	lsrs	r3, r3, #4
 8002324:	f003 030f 	and.w	r3, r3, #15
 8002328:	490b      	ldr	r1, [pc, #44]	@ (8002358 <HAL_RCC_ClockConfig+0x1f4>)
 800232a:	5ccb      	ldrb	r3, [r1, r3]
 800232c:	f003 031f 	and.w	r3, r3, #31
 8002330:	fa22 f303 	lsr.w	r3, r2, r3
 8002334:	4a09      	ldr	r2, [pc, #36]	@ (800235c <HAL_RCC_ClockConfig+0x1f8>)
 8002336:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002338:	4b09      	ldr	r3, [pc, #36]	@ (8002360 <HAL_RCC_ClockConfig+0x1fc>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4618      	mov	r0, r3
 800233e:	f7fe ffa1 	bl	8001284 <HAL_InitTick>
 8002342:	4603      	mov	r3, r0
 8002344:	72fb      	strb	r3, [r7, #11]

  return status;
 8002346:	7afb      	ldrb	r3, [r7, #11]
}
 8002348:	4618      	mov	r0, r3
 800234a:	3710      	adds	r7, #16
 800234c:	46bd      	mov	sp, r7
 800234e:	bd80      	pop	{r7, pc}
 8002350:	40022000 	.word	0x40022000
 8002354:	40021000 	.word	0x40021000
 8002358:	080079cc 	.word	0x080079cc
 800235c:	20000014 	.word	0x20000014
 8002360:	20000018 	.word	0x20000018

08002364 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002364:	b480      	push	{r7}
 8002366:	b089      	sub	sp, #36	@ 0x24
 8002368:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800236a:	2300      	movs	r3, #0
 800236c:	61fb      	str	r3, [r7, #28]
 800236e:	2300      	movs	r3, #0
 8002370:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002372:	4b3e      	ldr	r3, [pc, #248]	@ (800246c <HAL_RCC_GetSysClockFreq+0x108>)
 8002374:	689b      	ldr	r3, [r3, #8]
 8002376:	f003 030c 	and.w	r3, r3, #12
 800237a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800237c:	4b3b      	ldr	r3, [pc, #236]	@ (800246c <HAL_RCC_GetSysClockFreq+0x108>)
 800237e:	68db      	ldr	r3, [r3, #12]
 8002380:	f003 0303 	and.w	r3, r3, #3
 8002384:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002386:	693b      	ldr	r3, [r7, #16]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d005      	beq.n	8002398 <HAL_RCC_GetSysClockFreq+0x34>
 800238c:	693b      	ldr	r3, [r7, #16]
 800238e:	2b0c      	cmp	r3, #12
 8002390:	d121      	bne.n	80023d6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	2b01      	cmp	r3, #1
 8002396:	d11e      	bne.n	80023d6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002398:	4b34      	ldr	r3, [pc, #208]	@ (800246c <HAL_RCC_GetSysClockFreq+0x108>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f003 0308 	and.w	r3, r3, #8
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d107      	bne.n	80023b4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80023a4:	4b31      	ldr	r3, [pc, #196]	@ (800246c <HAL_RCC_GetSysClockFreq+0x108>)
 80023a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80023aa:	0a1b      	lsrs	r3, r3, #8
 80023ac:	f003 030f 	and.w	r3, r3, #15
 80023b0:	61fb      	str	r3, [r7, #28]
 80023b2:	e005      	b.n	80023c0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80023b4:	4b2d      	ldr	r3, [pc, #180]	@ (800246c <HAL_RCC_GetSysClockFreq+0x108>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	091b      	lsrs	r3, r3, #4
 80023ba:	f003 030f 	and.w	r3, r3, #15
 80023be:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80023c0:	4a2b      	ldr	r2, [pc, #172]	@ (8002470 <HAL_RCC_GetSysClockFreq+0x10c>)
 80023c2:	69fb      	ldr	r3, [r7, #28]
 80023c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023c8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80023ca:	693b      	ldr	r3, [r7, #16]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d10d      	bne.n	80023ec <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80023d0:	69fb      	ldr	r3, [r7, #28]
 80023d2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80023d4:	e00a      	b.n	80023ec <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80023d6:	693b      	ldr	r3, [r7, #16]
 80023d8:	2b04      	cmp	r3, #4
 80023da:	d102      	bne.n	80023e2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80023dc:	4b25      	ldr	r3, [pc, #148]	@ (8002474 <HAL_RCC_GetSysClockFreq+0x110>)
 80023de:	61bb      	str	r3, [r7, #24]
 80023e0:	e004      	b.n	80023ec <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80023e2:	693b      	ldr	r3, [r7, #16]
 80023e4:	2b08      	cmp	r3, #8
 80023e6:	d101      	bne.n	80023ec <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80023e8:	4b23      	ldr	r3, [pc, #140]	@ (8002478 <HAL_RCC_GetSysClockFreq+0x114>)
 80023ea:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80023ec:	693b      	ldr	r3, [r7, #16]
 80023ee:	2b0c      	cmp	r3, #12
 80023f0:	d134      	bne.n	800245c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80023f2:	4b1e      	ldr	r3, [pc, #120]	@ (800246c <HAL_RCC_GetSysClockFreq+0x108>)
 80023f4:	68db      	ldr	r3, [r3, #12]
 80023f6:	f003 0303 	and.w	r3, r3, #3
 80023fa:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80023fc:	68bb      	ldr	r3, [r7, #8]
 80023fe:	2b02      	cmp	r3, #2
 8002400:	d003      	beq.n	800240a <HAL_RCC_GetSysClockFreq+0xa6>
 8002402:	68bb      	ldr	r3, [r7, #8]
 8002404:	2b03      	cmp	r3, #3
 8002406:	d003      	beq.n	8002410 <HAL_RCC_GetSysClockFreq+0xac>
 8002408:	e005      	b.n	8002416 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800240a:	4b1a      	ldr	r3, [pc, #104]	@ (8002474 <HAL_RCC_GetSysClockFreq+0x110>)
 800240c:	617b      	str	r3, [r7, #20]
      break;
 800240e:	e005      	b.n	800241c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002410:	4b19      	ldr	r3, [pc, #100]	@ (8002478 <HAL_RCC_GetSysClockFreq+0x114>)
 8002412:	617b      	str	r3, [r7, #20]
      break;
 8002414:	e002      	b.n	800241c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002416:	69fb      	ldr	r3, [r7, #28]
 8002418:	617b      	str	r3, [r7, #20]
      break;
 800241a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800241c:	4b13      	ldr	r3, [pc, #76]	@ (800246c <HAL_RCC_GetSysClockFreq+0x108>)
 800241e:	68db      	ldr	r3, [r3, #12]
 8002420:	091b      	lsrs	r3, r3, #4
 8002422:	f003 0307 	and.w	r3, r3, #7
 8002426:	3301      	adds	r3, #1
 8002428:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800242a:	4b10      	ldr	r3, [pc, #64]	@ (800246c <HAL_RCC_GetSysClockFreq+0x108>)
 800242c:	68db      	ldr	r3, [r3, #12]
 800242e:	0a1b      	lsrs	r3, r3, #8
 8002430:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002434:	697a      	ldr	r2, [r7, #20]
 8002436:	fb03 f202 	mul.w	r2, r3, r2
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002440:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002442:	4b0a      	ldr	r3, [pc, #40]	@ (800246c <HAL_RCC_GetSysClockFreq+0x108>)
 8002444:	68db      	ldr	r3, [r3, #12]
 8002446:	0e5b      	lsrs	r3, r3, #25
 8002448:	f003 0303 	and.w	r3, r3, #3
 800244c:	3301      	adds	r3, #1
 800244e:	005b      	lsls	r3, r3, #1
 8002450:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002452:	697a      	ldr	r2, [r7, #20]
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	fbb2 f3f3 	udiv	r3, r2, r3
 800245a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800245c:	69bb      	ldr	r3, [r7, #24]
}
 800245e:	4618      	mov	r0, r3
 8002460:	3724      	adds	r7, #36	@ 0x24
 8002462:	46bd      	mov	sp, r7
 8002464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002468:	4770      	bx	lr
 800246a:	bf00      	nop
 800246c:	40021000 	.word	0x40021000
 8002470:	080079e4 	.word	0x080079e4
 8002474:	00f42400 	.word	0x00f42400
 8002478:	007a1200 	.word	0x007a1200

0800247c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800247c:	b480      	push	{r7}
 800247e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002480:	4b03      	ldr	r3, [pc, #12]	@ (8002490 <HAL_RCC_GetHCLKFreq+0x14>)
 8002482:	681b      	ldr	r3, [r3, #0]
}
 8002484:	4618      	mov	r0, r3
 8002486:	46bd      	mov	sp, r7
 8002488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248c:	4770      	bx	lr
 800248e:	bf00      	nop
 8002490:	20000014 	.word	0x20000014

08002494 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002498:	f7ff fff0 	bl	800247c <HAL_RCC_GetHCLKFreq>
 800249c:	4602      	mov	r2, r0
 800249e:	4b06      	ldr	r3, [pc, #24]	@ (80024b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80024a0:	689b      	ldr	r3, [r3, #8]
 80024a2:	0a1b      	lsrs	r3, r3, #8
 80024a4:	f003 0307 	and.w	r3, r3, #7
 80024a8:	4904      	ldr	r1, [pc, #16]	@ (80024bc <HAL_RCC_GetPCLK1Freq+0x28>)
 80024aa:	5ccb      	ldrb	r3, [r1, r3]
 80024ac:	f003 031f 	and.w	r3, r3, #31
 80024b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024b4:	4618      	mov	r0, r3
 80024b6:	bd80      	pop	{r7, pc}
 80024b8:	40021000 	.word	0x40021000
 80024bc:	080079dc 	.word	0x080079dc

080024c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80024c4:	f7ff ffda 	bl	800247c <HAL_RCC_GetHCLKFreq>
 80024c8:	4602      	mov	r2, r0
 80024ca:	4b06      	ldr	r3, [pc, #24]	@ (80024e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80024cc:	689b      	ldr	r3, [r3, #8]
 80024ce:	0adb      	lsrs	r3, r3, #11
 80024d0:	f003 0307 	and.w	r3, r3, #7
 80024d4:	4904      	ldr	r1, [pc, #16]	@ (80024e8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80024d6:	5ccb      	ldrb	r3, [r1, r3]
 80024d8:	f003 031f 	and.w	r3, r3, #31
 80024dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024e0:	4618      	mov	r0, r3
 80024e2:	bd80      	pop	{r7, pc}
 80024e4:	40021000 	.word	0x40021000
 80024e8:	080079dc 	.word	0x080079dc

080024ec <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b086      	sub	sp, #24
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80024f4:	2300      	movs	r3, #0
 80024f6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80024f8:	4b2a      	ldr	r3, [pc, #168]	@ (80025a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80024fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002500:	2b00      	cmp	r3, #0
 8002502:	d003      	beq.n	800250c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002504:	f7ff f9ee 	bl	80018e4 <HAL_PWREx_GetVoltageRange>
 8002508:	6178      	str	r0, [r7, #20]
 800250a:	e014      	b.n	8002536 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800250c:	4b25      	ldr	r3, [pc, #148]	@ (80025a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800250e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002510:	4a24      	ldr	r2, [pc, #144]	@ (80025a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002512:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002516:	6593      	str	r3, [r2, #88]	@ 0x58
 8002518:	4b22      	ldr	r3, [pc, #136]	@ (80025a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800251a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800251c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002520:	60fb      	str	r3, [r7, #12]
 8002522:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002524:	f7ff f9de 	bl	80018e4 <HAL_PWREx_GetVoltageRange>
 8002528:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800252a:	4b1e      	ldr	r3, [pc, #120]	@ (80025a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800252c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800252e:	4a1d      	ldr	r2, [pc, #116]	@ (80025a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002530:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002534:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002536:	697b      	ldr	r3, [r7, #20]
 8002538:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800253c:	d10b      	bne.n	8002556 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2b80      	cmp	r3, #128	@ 0x80
 8002542:	d919      	bls.n	8002578 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2ba0      	cmp	r3, #160	@ 0xa0
 8002548:	d902      	bls.n	8002550 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800254a:	2302      	movs	r3, #2
 800254c:	613b      	str	r3, [r7, #16]
 800254e:	e013      	b.n	8002578 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002550:	2301      	movs	r3, #1
 8002552:	613b      	str	r3, [r7, #16]
 8002554:	e010      	b.n	8002578 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2b80      	cmp	r3, #128	@ 0x80
 800255a:	d902      	bls.n	8002562 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800255c:	2303      	movs	r3, #3
 800255e:	613b      	str	r3, [r7, #16]
 8002560:	e00a      	b.n	8002578 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2b80      	cmp	r3, #128	@ 0x80
 8002566:	d102      	bne.n	800256e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002568:	2302      	movs	r3, #2
 800256a:	613b      	str	r3, [r7, #16]
 800256c:	e004      	b.n	8002578 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2b70      	cmp	r3, #112	@ 0x70
 8002572:	d101      	bne.n	8002578 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002574:	2301      	movs	r3, #1
 8002576:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002578:	4b0b      	ldr	r3, [pc, #44]	@ (80025a8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f023 0207 	bic.w	r2, r3, #7
 8002580:	4909      	ldr	r1, [pc, #36]	@ (80025a8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002582:	693b      	ldr	r3, [r7, #16]
 8002584:	4313      	orrs	r3, r2
 8002586:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002588:	4b07      	ldr	r3, [pc, #28]	@ (80025a8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f003 0307 	and.w	r3, r3, #7
 8002590:	693a      	ldr	r2, [r7, #16]
 8002592:	429a      	cmp	r2, r3
 8002594:	d001      	beq.n	800259a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002596:	2301      	movs	r3, #1
 8002598:	e000      	b.n	800259c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800259a:	2300      	movs	r3, #0
}
 800259c:	4618      	mov	r0, r3
 800259e:	3718      	adds	r7, #24
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bd80      	pop	{r7, pc}
 80025a4:	40021000 	.word	0x40021000
 80025a8:	40022000 	.word	0x40022000

080025ac <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b086      	sub	sp, #24
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80025b4:	2300      	movs	r3, #0
 80025b6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80025b8:	2300      	movs	r3, #0
 80025ba:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d041      	beq.n	800264c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80025cc:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80025d0:	d02a      	beq.n	8002628 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80025d2:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80025d6:	d824      	bhi.n	8002622 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80025d8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80025dc:	d008      	beq.n	80025f0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80025de:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80025e2:	d81e      	bhi.n	8002622 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d00a      	beq.n	80025fe <HAL_RCCEx_PeriphCLKConfig+0x52>
 80025e8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80025ec:	d010      	beq.n	8002610 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80025ee:	e018      	b.n	8002622 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80025f0:	4b86      	ldr	r3, [pc, #536]	@ (800280c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025f2:	68db      	ldr	r3, [r3, #12]
 80025f4:	4a85      	ldr	r2, [pc, #532]	@ (800280c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025f6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025fa:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80025fc:	e015      	b.n	800262a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	3304      	adds	r3, #4
 8002602:	2100      	movs	r1, #0
 8002604:	4618      	mov	r0, r3
 8002606:	f000 fabb 	bl	8002b80 <RCCEx_PLLSAI1_Config>
 800260a:	4603      	mov	r3, r0
 800260c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800260e:	e00c      	b.n	800262a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	3320      	adds	r3, #32
 8002614:	2100      	movs	r1, #0
 8002616:	4618      	mov	r0, r3
 8002618:	f000 fba6 	bl	8002d68 <RCCEx_PLLSAI2_Config>
 800261c:	4603      	mov	r3, r0
 800261e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002620:	e003      	b.n	800262a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002622:	2301      	movs	r3, #1
 8002624:	74fb      	strb	r3, [r7, #19]
      break;
 8002626:	e000      	b.n	800262a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002628:	bf00      	nop
    }

    if(ret == HAL_OK)
 800262a:	7cfb      	ldrb	r3, [r7, #19]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d10b      	bne.n	8002648 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002630:	4b76      	ldr	r3, [pc, #472]	@ (800280c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002632:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002636:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800263e:	4973      	ldr	r1, [pc, #460]	@ (800280c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002640:	4313      	orrs	r3, r2
 8002642:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002646:	e001      	b.n	800264c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002648:	7cfb      	ldrb	r3, [r7, #19]
 800264a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002654:	2b00      	cmp	r3, #0
 8002656:	d041      	beq.n	80026dc <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800265c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002660:	d02a      	beq.n	80026b8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002662:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002666:	d824      	bhi.n	80026b2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002668:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800266c:	d008      	beq.n	8002680 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800266e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002672:	d81e      	bhi.n	80026b2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002674:	2b00      	cmp	r3, #0
 8002676:	d00a      	beq.n	800268e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002678:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800267c:	d010      	beq.n	80026a0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800267e:	e018      	b.n	80026b2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002680:	4b62      	ldr	r3, [pc, #392]	@ (800280c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002682:	68db      	ldr	r3, [r3, #12]
 8002684:	4a61      	ldr	r2, [pc, #388]	@ (800280c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002686:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800268a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800268c:	e015      	b.n	80026ba <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	3304      	adds	r3, #4
 8002692:	2100      	movs	r1, #0
 8002694:	4618      	mov	r0, r3
 8002696:	f000 fa73 	bl	8002b80 <RCCEx_PLLSAI1_Config>
 800269a:	4603      	mov	r3, r0
 800269c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800269e:	e00c      	b.n	80026ba <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	3320      	adds	r3, #32
 80026a4:	2100      	movs	r1, #0
 80026a6:	4618      	mov	r0, r3
 80026a8:	f000 fb5e 	bl	8002d68 <RCCEx_PLLSAI2_Config>
 80026ac:	4603      	mov	r3, r0
 80026ae:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80026b0:	e003      	b.n	80026ba <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80026b2:	2301      	movs	r3, #1
 80026b4:	74fb      	strb	r3, [r7, #19]
      break;
 80026b6:	e000      	b.n	80026ba <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80026b8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80026ba:	7cfb      	ldrb	r3, [r7, #19]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d10b      	bne.n	80026d8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80026c0:	4b52      	ldr	r3, [pc, #328]	@ (800280c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026c6:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80026ce:	494f      	ldr	r1, [pc, #316]	@ (800280c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026d0:	4313      	orrs	r3, r2
 80026d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80026d6:	e001      	b.n	80026dc <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80026d8:	7cfb      	ldrb	r3, [r7, #19]
 80026da:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	f000 80a0 	beq.w	800282a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026ea:	2300      	movs	r3, #0
 80026ec:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80026ee:	4b47      	ldr	r3, [pc, #284]	@ (800280c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d101      	bne.n	80026fe <HAL_RCCEx_PeriphCLKConfig+0x152>
 80026fa:	2301      	movs	r3, #1
 80026fc:	e000      	b.n	8002700 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80026fe:	2300      	movs	r3, #0
 8002700:	2b00      	cmp	r3, #0
 8002702:	d00d      	beq.n	8002720 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002704:	4b41      	ldr	r3, [pc, #260]	@ (800280c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002706:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002708:	4a40      	ldr	r2, [pc, #256]	@ (800280c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800270a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800270e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002710:	4b3e      	ldr	r3, [pc, #248]	@ (800280c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002712:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002714:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002718:	60bb      	str	r3, [r7, #8]
 800271a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800271c:	2301      	movs	r3, #1
 800271e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002720:	4b3b      	ldr	r3, [pc, #236]	@ (8002810 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a3a      	ldr	r2, [pc, #232]	@ (8002810 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002726:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800272a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800272c:	f7fe fdfa 	bl	8001324 <HAL_GetTick>
 8002730:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002732:	e009      	b.n	8002748 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002734:	f7fe fdf6 	bl	8001324 <HAL_GetTick>
 8002738:	4602      	mov	r2, r0
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	1ad3      	subs	r3, r2, r3
 800273e:	2b02      	cmp	r3, #2
 8002740:	d902      	bls.n	8002748 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002742:	2303      	movs	r3, #3
 8002744:	74fb      	strb	r3, [r7, #19]
        break;
 8002746:	e005      	b.n	8002754 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002748:	4b31      	ldr	r3, [pc, #196]	@ (8002810 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002750:	2b00      	cmp	r3, #0
 8002752:	d0ef      	beq.n	8002734 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002754:	7cfb      	ldrb	r3, [r7, #19]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d15c      	bne.n	8002814 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800275a:	4b2c      	ldr	r3, [pc, #176]	@ (800280c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800275c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002760:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002764:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d01f      	beq.n	80027ac <HAL_RCCEx_PeriphCLKConfig+0x200>
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002772:	697a      	ldr	r2, [r7, #20]
 8002774:	429a      	cmp	r2, r3
 8002776:	d019      	beq.n	80027ac <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002778:	4b24      	ldr	r3, [pc, #144]	@ (800280c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800277a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800277e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002782:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002784:	4b21      	ldr	r3, [pc, #132]	@ (800280c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002786:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800278a:	4a20      	ldr	r2, [pc, #128]	@ (800280c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800278c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002790:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002794:	4b1d      	ldr	r3, [pc, #116]	@ (800280c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002796:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800279a:	4a1c      	ldr	r2, [pc, #112]	@ (800280c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800279c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80027a0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80027a4:	4a19      	ldr	r2, [pc, #100]	@ (800280c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027a6:	697b      	ldr	r3, [r7, #20]
 80027a8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80027ac:	697b      	ldr	r3, [r7, #20]
 80027ae:	f003 0301 	and.w	r3, r3, #1
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d016      	beq.n	80027e4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027b6:	f7fe fdb5 	bl	8001324 <HAL_GetTick>
 80027ba:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027bc:	e00b      	b.n	80027d6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027be:	f7fe fdb1 	bl	8001324 <HAL_GetTick>
 80027c2:	4602      	mov	r2, r0
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	1ad3      	subs	r3, r2, r3
 80027c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d902      	bls.n	80027d6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80027d0:	2303      	movs	r3, #3
 80027d2:	74fb      	strb	r3, [r7, #19]
            break;
 80027d4:	e006      	b.n	80027e4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027d6:	4b0d      	ldr	r3, [pc, #52]	@ (800280c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027dc:	f003 0302 	and.w	r3, r3, #2
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d0ec      	beq.n	80027be <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80027e4:	7cfb      	ldrb	r3, [r7, #19]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d10c      	bne.n	8002804 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80027ea:	4b08      	ldr	r3, [pc, #32]	@ (800280c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027f0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80027fa:	4904      	ldr	r1, [pc, #16]	@ (800280c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027fc:	4313      	orrs	r3, r2
 80027fe:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002802:	e009      	b.n	8002818 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002804:	7cfb      	ldrb	r3, [r7, #19]
 8002806:	74bb      	strb	r3, [r7, #18]
 8002808:	e006      	b.n	8002818 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800280a:	bf00      	nop
 800280c:	40021000 	.word	0x40021000
 8002810:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002814:	7cfb      	ldrb	r3, [r7, #19]
 8002816:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002818:	7c7b      	ldrb	r3, [r7, #17]
 800281a:	2b01      	cmp	r3, #1
 800281c:	d105      	bne.n	800282a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800281e:	4b9e      	ldr	r3, [pc, #632]	@ (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002820:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002822:	4a9d      	ldr	r2, [pc, #628]	@ (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002824:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002828:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f003 0301 	and.w	r3, r3, #1
 8002832:	2b00      	cmp	r3, #0
 8002834:	d00a      	beq.n	800284c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002836:	4b98      	ldr	r3, [pc, #608]	@ (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002838:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800283c:	f023 0203 	bic.w	r2, r3, #3
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002844:	4994      	ldr	r1, [pc, #592]	@ (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002846:	4313      	orrs	r3, r2
 8002848:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f003 0302 	and.w	r3, r3, #2
 8002854:	2b00      	cmp	r3, #0
 8002856:	d00a      	beq.n	800286e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002858:	4b8f      	ldr	r3, [pc, #572]	@ (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800285a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800285e:	f023 020c 	bic.w	r2, r3, #12
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002866:	498c      	ldr	r1, [pc, #560]	@ (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002868:	4313      	orrs	r3, r2
 800286a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f003 0304 	and.w	r3, r3, #4
 8002876:	2b00      	cmp	r3, #0
 8002878:	d00a      	beq.n	8002890 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800287a:	4b87      	ldr	r3, [pc, #540]	@ (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800287c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002880:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002888:	4983      	ldr	r1, [pc, #524]	@ (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800288a:	4313      	orrs	r3, r2
 800288c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f003 0308 	and.w	r3, r3, #8
 8002898:	2b00      	cmp	r3, #0
 800289a:	d00a      	beq.n	80028b2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800289c:	4b7e      	ldr	r3, [pc, #504]	@ (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800289e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028a2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028aa:	497b      	ldr	r1, [pc, #492]	@ (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028ac:	4313      	orrs	r3, r2
 80028ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f003 0310 	and.w	r3, r3, #16
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d00a      	beq.n	80028d4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80028be:	4b76      	ldr	r3, [pc, #472]	@ (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028c4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80028cc:	4972      	ldr	r1, [pc, #456]	@ (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028ce:	4313      	orrs	r3, r2
 80028d0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f003 0320 	and.w	r3, r3, #32
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d00a      	beq.n	80028f6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80028e0:	4b6d      	ldr	r3, [pc, #436]	@ (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028e6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028ee:	496a      	ldr	r1, [pc, #424]	@ (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028f0:	4313      	orrs	r3, r2
 80028f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d00a      	beq.n	8002918 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002902:	4b65      	ldr	r3, [pc, #404]	@ (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002904:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002908:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002910:	4961      	ldr	r1, [pc, #388]	@ (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002912:	4313      	orrs	r3, r2
 8002914:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002920:	2b00      	cmp	r3, #0
 8002922:	d00a      	beq.n	800293a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002924:	4b5c      	ldr	r3, [pc, #368]	@ (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002926:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800292a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002932:	4959      	ldr	r1, [pc, #356]	@ (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002934:	4313      	orrs	r3, r2
 8002936:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002942:	2b00      	cmp	r3, #0
 8002944:	d00a      	beq.n	800295c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002946:	4b54      	ldr	r3, [pc, #336]	@ (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002948:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800294c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002954:	4950      	ldr	r1, [pc, #320]	@ (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002956:	4313      	orrs	r3, r2
 8002958:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002964:	2b00      	cmp	r3, #0
 8002966:	d00a      	beq.n	800297e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002968:	4b4b      	ldr	r3, [pc, #300]	@ (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800296a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800296e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002976:	4948      	ldr	r1, [pc, #288]	@ (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002978:	4313      	orrs	r3, r2
 800297a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002986:	2b00      	cmp	r3, #0
 8002988:	d00a      	beq.n	80029a0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800298a:	4b43      	ldr	r3, [pc, #268]	@ (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800298c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002990:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002998:	493f      	ldr	r1, [pc, #252]	@ (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800299a:	4313      	orrs	r3, r2
 800299c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d028      	beq.n	80029fe <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80029ac:	4b3a      	ldr	r3, [pc, #232]	@ (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029b2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80029ba:	4937      	ldr	r1, [pc, #220]	@ (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029bc:	4313      	orrs	r3, r2
 80029be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80029c6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80029ca:	d106      	bne.n	80029da <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80029cc:	4b32      	ldr	r3, [pc, #200]	@ (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029ce:	68db      	ldr	r3, [r3, #12]
 80029d0:	4a31      	ldr	r2, [pc, #196]	@ (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029d2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80029d6:	60d3      	str	r3, [r2, #12]
 80029d8:	e011      	b.n	80029fe <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80029de:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80029e2:	d10c      	bne.n	80029fe <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	3304      	adds	r3, #4
 80029e8:	2101      	movs	r1, #1
 80029ea:	4618      	mov	r0, r3
 80029ec:	f000 f8c8 	bl	8002b80 <RCCEx_PLLSAI1_Config>
 80029f0:	4603      	mov	r3, r0
 80029f2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80029f4:	7cfb      	ldrb	r3, [r7, #19]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d001      	beq.n	80029fe <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80029fa:	7cfb      	ldrb	r3, [r7, #19]
 80029fc:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d028      	beq.n	8002a5c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002a0a:	4b23      	ldr	r3, [pc, #140]	@ (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a10:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a18:	491f      	ldr	r1, [pc, #124]	@ (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a24:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002a28:	d106      	bne.n	8002a38 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a2a:	4b1b      	ldr	r3, [pc, #108]	@ (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a2c:	68db      	ldr	r3, [r3, #12]
 8002a2e:	4a1a      	ldr	r2, [pc, #104]	@ (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a30:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002a34:	60d3      	str	r3, [r2, #12]
 8002a36:	e011      	b.n	8002a5c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a3c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002a40:	d10c      	bne.n	8002a5c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	3304      	adds	r3, #4
 8002a46:	2101      	movs	r1, #1
 8002a48:	4618      	mov	r0, r3
 8002a4a:	f000 f899 	bl	8002b80 <RCCEx_PLLSAI1_Config>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002a52:	7cfb      	ldrb	r3, [r7, #19]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d001      	beq.n	8002a5c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002a58:	7cfb      	ldrb	r3, [r7, #19]
 8002a5a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d02b      	beq.n	8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002a68:	4b0b      	ldr	r3, [pc, #44]	@ (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a6e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a76:	4908      	ldr	r1, [pc, #32]	@ (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a82:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002a86:	d109      	bne.n	8002a9c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a88:	4b03      	ldr	r3, [pc, #12]	@ (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a8a:	68db      	ldr	r3, [r3, #12]
 8002a8c:	4a02      	ldr	r2, [pc, #8]	@ (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a8e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002a92:	60d3      	str	r3, [r2, #12]
 8002a94:	e014      	b.n	8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002a96:	bf00      	nop
 8002a98:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002aa0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002aa4:	d10c      	bne.n	8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	3304      	adds	r3, #4
 8002aaa:	2101      	movs	r1, #1
 8002aac:	4618      	mov	r0, r3
 8002aae:	f000 f867 	bl	8002b80 <RCCEx_PLLSAI1_Config>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002ab6:	7cfb      	ldrb	r3, [r7, #19]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d001      	beq.n	8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002abc:	7cfb      	ldrb	r3, [r7, #19]
 8002abe:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d02f      	beq.n	8002b2c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002acc:	4b2b      	ldr	r3, [pc, #172]	@ (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002ace:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ad2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002ada:	4928      	ldr	r1, [pc, #160]	@ (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002adc:	4313      	orrs	r3, r2
 8002ade:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002ae6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002aea:	d10d      	bne.n	8002b08 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	3304      	adds	r3, #4
 8002af0:	2102      	movs	r1, #2
 8002af2:	4618      	mov	r0, r3
 8002af4:	f000 f844 	bl	8002b80 <RCCEx_PLLSAI1_Config>
 8002af8:	4603      	mov	r3, r0
 8002afa:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002afc:	7cfb      	ldrb	r3, [r7, #19]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d014      	beq.n	8002b2c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002b02:	7cfb      	ldrb	r3, [r7, #19]
 8002b04:	74bb      	strb	r3, [r7, #18]
 8002b06:	e011      	b.n	8002b2c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002b0c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002b10:	d10c      	bne.n	8002b2c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	3320      	adds	r3, #32
 8002b16:	2102      	movs	r1, #2
 8002b18:	4618      	mov	r0, r3
 8002b1a:	f000 f925 	bl	8002d68 <RCCEx_PLLSAI2_Config>
 8002b1e:	4603      	mov	r3, r0
 8002b20:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002b22:	7cfb      	ldrb	r3, [r7, #19]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d001      	beq.n	8002b2c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002b28:	7cfb      	ldrb	r3, [r7, #19]
 8002b2a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d00a      	beq.n	8002b4e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002b38:	4b10      	ldr	r3, [pc, #64]	@ (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002b3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b3e:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002b46:	490d      	ldr	r1, [pc, #52]	@ (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d00b      	beq.n	8002b72 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002b5a:	4b08      	ldr	r3, [pc, #32]	@ (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002b5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b60:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002b6a:	4904      	ldr	r1, [pc, #16]	@ (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002b72:	7cbb      	ldrb	r3, [r7, #18]
}
 8002b74:	4618      	mov	r0, r3
 8002b76:	3718      	adds	r7, #24
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bd80      	pop	{r7, pc}
 8002b7c:	40021000 	.word	0x40021000

08002b80 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b084      	sub	sp, #16
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
 8002b88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002b8e:	4b75      	ldr	r3, [pc, #468]	@ (8002d64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b90:	68db      	ldr	r3, [r3, #12]
 8002b92:	f003 0303 	and.w	r3, r3, #3
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d018      	beq.n	8002bcc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002b9a:	4b72      	ldr	r3, [pc, #456]	@ (8002d64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b9c:	68db      	ldr	r3, [r3, #12]
 8002b9e:	f003 0203 	and.w	r2, r3, #3
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	429a      	cmp	r2, r3
 8002ba8:	d10d      	bne.n	8002bc6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
       ||
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d009      	beq.n	8002bc6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002bb2:	4b6c      	ldr	r3, [pc, #432]	@ (8002d64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bb4:	68db      	ldr	r3, [r3, #12]
 8002bb6:	091b      	lsrs	r3, r3, #4
 8002bb8:	f003 0307 	and.w	r3, r3, #7
 8002bbc:	1c5a      	adds	r2, r3, #1
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	685b      	ldr	r3, [r3, #4]
       ||
 8002bc2:	429a      	cmp	r2, r3
 8002bc4:	d047      	beq.n	8002c56 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	73fb      	strb	r3, [r7, #15]
 8002bca:	e044      	b.n	8002c56 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	2b03      	cmp	r3, #3
 8002bd2:	d018      	beq.n	8002c06 <RCCEx_PLLSAI1_Config+0x86>
 8002bd4:	2b03      	cmp	r3, #3
 8002bd6:	d825      	bhi.n	8002c24 <RCCEx_PLLSAI1_Config+0xa4>
 8002bd8:	2b01      	cmp	r3, #1
 8002bda:	d002      	beq.n	8002be2 <RCCEx_PLLSAI1_Config+0x62>
 8002bdc:	2b02      	cmp	r3, #2
 8002bde:	d009      	beq.n	8002bf4 <RCCEx_PLLSAI1_Config+0x74>
 8002be0:	e020      	b.n	8002c24 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002be2:	4b60      	ldr	r3, [pc, #384]	@ (8002d64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f003 0302 	and.w	r3, r3, #2
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d11d      	bne.n	8002c2a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002bf2:	e01a      	b.n	8002c2a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002bf4:	4b5b      	ldr	r3, [pc, #364]	@ (8002d64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d116      	bne.n	8002c2e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002c00:	2301      	movs	r3, #1
 8002c02:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c04:	e013      	b.n	8002c2e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002c06:	4b57      	ldr	r3, [pc, #348]	@ (8002d64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d10f      	bne.n	8002c32 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002c12:	4b54      	ldr	r3, [pc, #336]	@ (8002d64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d109      	bne.n	8002c32 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002c22:	e006      	b.n	8002c32 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002c24:	2301      	movs	r3, #1
 8002c26:	73fb      	strb	r3, [r7, #15]
      break;
 8002c28:	e004      	b.n	8002c34 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002c2a:	bf00      	nop
 8002c2c:	e002      	b.n	8002c34 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002c2e:	bf00      	nop
 8002c30:	e000      	b.n	8002c34 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002c32:	bf00      	nop
    }

    if(status == HAL_OK)
 8002c34:	7bfb      	ldrb	r3, [r7, #15]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d10d      	bne.n	8002c56 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002c3a:	4b4a      	ldr	r3, [pc, #296]	@ (8002d64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c3c:	68db      	ldr	r3, [r3, #12]
 8002c3e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6819      	ldr	r1, [r3, #0]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	3b01      	subs	r3, #1
 8002c4c:	011b      	lsls	r3, r3, #4
 8002c4e:	430b      	orrs	r3, r1
 8002c50:	4944      	ldr	r1, [pc, #272]	@ (8002d64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c52:	4313      	orrs	r3, r2
 8002c54:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002c56:	7bfb      	ldrb	r3, [r7, #15]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d17d      	bne.n	8002d58 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002c5c:	4b41      	ldr	r3, [pc, #260]	@ (8002d64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a40      	ldr	r2, [pc, #256]	@ (8002d64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c62:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002c66:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c68:	f7fe fb5c 	bl	8001324 <HAL_GetTick>
 8002c6c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002c6e:	e009      	b.n	8002c84 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002c70:	f7fe fb58 	bl	8001324 <HAL_GetTick>
 8002c74:	4602      	mov	r2, r0
 8002c76:	68bb      	ldr	r3, [r7, #8]
 8002c78:	1ad3      	subs	r3, r2, r3
 8002c7a:	2b02      	cmp	r3, #2
 8002c7c:	d902      	bls.n	8002c84 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002c7e:	2303      	movs	r3, #3
 8002c80:	73fb      	strb	r3, [r7, #15]
        break;
 8002c82:	e005      	b.n	8002c90 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002c84:	4b37      	ldr	r3, [pc, #220]	@ (8002d64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d1ef      	bne.n	8002c70 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002c90:	7bfb      	ldrb	r3, [r7, #15]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d160      	bne.n	8002d58 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d111      	bne.n	8002cc0 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002c9c:	4b31      	ldr	r3, [pc, #196]	@ (8002d64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c9e:	691b      	ldr	r3, [r3, #16]
 8002ca0:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002ca4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002ca8:	687a      	ldr	r2, [r7, #4]
 8002caa:	6892      	ldr	r2, [r2, #8]
 8002cac:	0211      	lsls	r1, r2, #8
 8002cae:	687a      	ldr	r2, [r7, #4]
 8002cb0:	68d2      	ldr	r2, [r2, #12]
 8002cb2:	0912      	lsrs	r2, r2, #4
 8002cb4:	0452      	lsls	r2, r2, #17
 8002cb6:	430a      	orrs	r2, r1
 8002cb8:	492a      	ldr	r1, [pc, #168]	@ (8002d64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	610b      	str	r3, [r1, #16]
 8002cbe:	e027      	b.n	8002d10 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	2b01      	cmp	r3, #1
 8002cc4:	d112      	bne.n	8002cec <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002cc6:	4b27      	ldr	r3, [pc, #156]	@ (8002d64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cc8:	691b      	ldr	r3, [r3, #16]
 8002cca:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8002cce:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002cd2:	687a      	ldr	r2, [r7, #4]
 8002cd4:	6892      	ldr	r2, [r2, #8]
 8002cd6:	0211      	lsls	r1, r2, #8
 8002cd8:	687a      	ldr	r2, [r7, #4]
 8002cda:	6912      	ldr	r2, [r2, #16]
 8002cdc:	0852      	lsrs	r2, r2, #1
 8002cde:	3a01      	subs	r2, #1
 8002ce0:	0552      	lsls	r2, r2, #21
 8002ce2:	430a      	orrs	r2, r1
 8002ce4:	491f      	ldr	r1, [pc, #124]	@ (8002d64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	610b      	str	r3, [r1, #16]
 8002cea:	e011      	b.n	8002d10 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002cec:	4b1d      	ldr	r3, [pc, #116]	@ (8002d64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cee:	691b      	ldr	r3, [r3, #16]
 8002cf0:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002cf4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002cf8:	687a      	ldr	r2, [r7, #4]
 8002cfa:	6892      	ldr	r2, [r2, #8]
 8002cfc:	0211      	lsls	r1, r2, #8
 8002cfe:	687a      	ldr	r2, [r7, #4]
 8002d00:	6952      	ldr	r2, [r2, #20]
 8002d02:	0852      	lsrs	r2, r2, #1
 8002d04:	3a01      	subs	r2, #1
 8002d06:	0652      	lsls	r2, r2, #25
 8002d08:	430a      	orrs	r2, r1
 8002d0a:	4916      	ldr	r1, [pc, #88]	@ (8002d64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d0c:	4313      	orrs	r3, r2
 8002d0e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002d10:	4b14      	ldr	r3, [pc, #80]	@ (8002d64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a13      	ldr	r2, [pc, #76]	@ (8002d64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d16:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002d1a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d1c:	f7fe fb02 	bl	8001324 <HAL_GetTick>
 8002d20:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002d22:	e009      	b.n	8002d38 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002d24:	f7fe fafe 	bl	8001324 <HAL_GetTick>
 8002d28:	4602      	mov	r2, r0
 8002d2a:	68bb      	ldr	r3, [r7, #8]
 8002d2c:	1ad3      	subs	r3, r2, r3
 8002d2e:	2b02      	cmp	r3, #2
 8002d30:	d902      	bls.n	8002d38 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002d32:	2303      	movs	r3, #3
 8002d34:	73fb      	strb	r3, [r7, #15]
          break;
 8002d36:	e005      	b.n	8002d44 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002d38:	4b0a      	ldr	r3, [pc, #40]	@ (8002d64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d0ef      	beq.n	8002d24 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002d44:	7bfb      	ldrb	r3, [r7, #15]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d106      	bne.n	8002d58 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002d4a:	4b06      	ldr	r3, [pc, #24]	@ (8002d64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d4c:	691a      	ldr	r2, [r3, #16]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	699b      	ldr	r3, [r3, #24]
 8002d52:	4904      	ldr	r1, [pc, #16]	@ (8002d64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d54:	4313      	orrs	r3, r2
 8002d56:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002d58:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	3710      	adds	r7, #16
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bd80      	pop	{r7, pc}
 8002d62:	bf00      	nop
 8002d64:	40021000 	.word	0x40021000

08002d68 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b084      	sub	sp, #16
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
 8002d70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002d72:	2300      	movs	r3, #0
 8002d74:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002d76:	4b6a      	ldr	r3, [pc, #424]	@ (8002f20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d78:	68db      	ldr	r3, [r3, #12]
 8002d7a:	f003 0303 	and.w	r3, r3, #3
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d018      	beq.n	8002db4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002d82:	4b67      	ldr	r3, [pc, #412]	@ (8002f20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d84:	68db      	ldr	r3, [r3, #12]
 8002d86:	f003 0203 	and.w	r2, r3, #3
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	429a      	cmp	r2, r3
 8002d90:	d10d      	bne.n	8002dae <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
       ||
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d009      	beq.n	8002dae <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002d9a:	4b61      	ldr	r3, [pc, #388]	@ (8002f20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d9c:	68db      	ldr	r3, [r3, #12]
 8002d9e:	091b      	lsrs	r3, r3, #4
 8002da0:	f003 0307 	and.w	r3, r3, #7
 8002da4:	1c5a      	adds	r2, r3, #1
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	685b      	ldr	r3, [r3, #4]
       ||
 8002daa:	429a      	cmp	r2, r3
 8002dac:	d047      	beq.n	8002e3e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002dae:	2301      	movs	r3, #1
 8002db0:	73fb      	strb	r3, [r7, #15]
 8002db2:	e044      	b.n	8002e3e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	2b03      	cmp	r3, #3
 8002dba:	d018      	beq.n	8002dee <RCCEx_PLLSAI2_Config+0x86>
 8002dbc:	2b03      	cmp	r3, #3
 8002dbe:	d825      	bhi.n	8002e0c <RCCEx_PLLSAI2_Config+0xa4>
 8002dc0:	2b01      	cmp	r3, #1
 8002dc2:	d002      	beq.n	8002dca <RCCEx_PLLSAI2_Config+0x62>
 8002dc4:	2b02      	cmp	r3, #2
 8002dc6:	d009      	beq.n	8002ddc <RCCEx_PLLSAI2_Config+0x74>
 8002dc8:	e020      	b.n	8002e0c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002dca:	4b55      	ldr	r3, [pc, #340]	@ (8002f20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f003 0302 	and.w	r3, r3, #2
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d11d      	bne.n	8002e12 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002dda:	e01a      	b.n	8002e12 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002ddc:	4b50      	ldr	r3, [pc, #320]	@ (8002f20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d116      	bne.n	8002e16 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002de8:	2301      	movs	r3, #1
 8002dea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002dec:	e013      	b.n	8002e16 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002dee:	4b4c      	ldr	r3, [pc, #304]	@ (8002f20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d10f      	bne.n	8002e1a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002dfa:	4b49      	ldr	r3, [pc, #292]	@ (8002f20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d109      	bne.n	8002e1a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002e06:	2301      	movs	r3, #1
 8002e08:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002e0a:	e006      	b.n	8002e1a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	73fb      	strb	r3, [r7, #15]
      break;
 8002e10:	e004      	b.n	8002e1c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002e12:	bf00      	nop
 8002e14:	e002      	b.n	8002e1c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002e16:	bf00      	nop
 8002e18:	e000      	b.n	8002e1c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002e1a:	bf00      	nop
    }

    if(status == HAL_OK)
 8002e1c:	7bfb      	ldrb	r3, [r7, #15]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d10d      	bne.n	8002e3e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002e22:	4b3f      	ldr	r3, [pc, #252]	@ (8002f20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e24:	68db      	ldr	r3, [r3, #12]
 8002e26:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6819      	ldr	r1, [r3, #0]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	3b01      	subs	r3, #1
 8002e34:	011b      	lsls	r3, r3, #4
 8002e36:	430b      	orrs	r3, r1
 8002e38:	4939      	ldr	r1, [pc, #228]	@ (8002f20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002e3e:	7bfb      	ldrb	r3, [r7, #15]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d167      	bne.n	8002f14 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002e44:	4b36      	ldr	r3, [pc, #216]	@ (8002f20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a35      	ldr	r2, [pc, #212]	@ (8002f20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e4a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002e4e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e50:	f7fe fa68 	bl	8001324 <HAL_GetTick>
 8002e54:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002e56:	e009      	b.n	8002e6c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002e58:	f7fe fa64 	bl	8001324 <HAL_GetTick>
 8002e5c:	4602      	mov	r2, r0
 8002e5e:	68bb      	ldr	r3, [r7, #8]
 8002e60:	1ad3      	subs	r3, r2, r3
 8002e62:	2b02      	cmp	r3, #2
 8002e64:	d902      	bls.n	8002e6c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002e66:	2303      	movs	r3, #3
 8002e68:	73fb      	strb	r3, [r7, #15]
        break;
 8002e6a:	e005      	b.n	8002e78 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002e6c:	4b2c      	ldr	r3, [pc, #176]	@ (8002f20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d1ef      	bne.n	8002e58 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002e78:	7bfb      	ldrb	r3, [r7, #15]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d14a      	bne.n	8002f14 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d111      	bne.n	8002ea8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002e84:	4b26      	ldr	r3, [pc, #152]	@ (8002f20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e86:	695b      	ldr	r3, [r3, #20]
 8002e88:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002e8c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002e90:	687a      	ldr	r2, [r7, #4]
 8002e92:	6892      	ldr	r2, [r2, #8]
 8002e94:	0211      	lsls	r1, r2, #8
 8002e96:	687a      	ldr	r2, [r7, #4]
 8002e98:	68d2      	ldr	r2, [r2, #12]
 8002e9a:	0912      	lsrs	r2, r2, #4
 8002e9c:	0452      	lsls	r2, r2, #17
 8002e9e:	430a      	orrs	r2, r1
 8002ea0:	491f      	ldr	r1, [pc, #124]	@ (8002f20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	614b      	str	r3, [r1, #20]
 8002ea6:	e011      	b.n	8002ecc <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002ea8:	4b1d      	ldr	r3, [pc, #116]	@ (8002f20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002eaa:	695b      	ldr	r3, [r3, #20]
 8002eac:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002eb0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002eb4:	687a      	ldr	r2, [r7, #4]
 8002eb6:	6892      	ldr	r2, [r2, #8]
 8002eb8:	0211      	lsls	r1, r2, #8
 8002eba:	687a      	ldr	r2, [r7, #4]
 8002ebc:	6912      	ldr	r2, [r2, #16]
 8002ebe:	0852      	lsrs	r2, r2, #1
 8002ec0:	3a01      	subs	r2, #1
 8002ec2:	0652      	lsls	r2, r2, #25
 8002ec4:	430a      	orrs	r2, r1
 8002ec6:	4916      	ldr	r1, [pc, #88]	@ (8002f20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002ecc:	4b14      	ldr	r3, [pc, #80]	@ (8002f20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a13      	ldr	r2, [pc, #76]	@ (8002f20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ed2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ed6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ed8:	f7fe fa24 	bl	8001324 <HAL_GetTick>
 8002edc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002ede:	e009      	b.n	8002ef4 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002ee0:	f7fe fa20 	bl	8001324 <HAL_GetTick>
 8002ee4:	4602      	mov	r2, r0
 8002ee6:	68bb      	ldr	r3, [r7, #8]
 8002ee8:	1ad3      	subs	r3, r2, r3
 8002eea:	2b02      	cmp	r3, #2
 8002eec:	d902      	bls.n	8002ef4 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002eee:	2303      	movs	r3, #3
 8002ef0:	73fb      	strb	r3, [r7, #15]
          break;
 8002ef2:	e005      	b.n	8002f00 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002ef4:	4b0a      	ldr	r3, [pc, #40]	@ (8002f20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d0ef      	beq.n	8002ee0 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002f00:	7bfb      	ldrb	r3, [r7, #15]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d106      	bne.n	8002f14 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002f06:	4b06      	ldr	r3, [pc, #24]	@ (8002f20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f08:	695a      	ldr	r2, [r3, #20]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	695b      	ldr	r3, [r3, #20]
 8002f0e:	4904      	ldr	r1, [pc, #16]	@ (8002f20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f10:	4313      	orrs	r3, r2
 8002f12:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002f14:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f16:	4618      	mov	r0, r3
 8002f18:	3710      	adds	r7, #16
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd80      	pop	{r7, pc}
 8002f1e:	bf00      	nop
 8002f20:	40021000 	.word	0x40021000

08002f24 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b084      	sub	sp, #16
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d101      	bne.n	8002f36 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002f32:	2301      	movs	r3, #1
 8002f34:	e095      	b.n	8003062 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d108      	bne.n	8002f50 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002f46:	d009      	beq.n	8002f5c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	61da      	str	r2, [r3, #28]
 8002f4e:	e005      	b.n	8002f5c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2200      	movs	r2, #0
 8002f54:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2200      	movs	r2, #0
 8002f5a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002f68:	b2db      	uxtb	r3, r3
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d106      	bne.n	8002f7c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2200      	movs	r2, #0
 8002f72:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002f76:	6878      	ldr	r0, [r7, #4]
 8002f78:	f7fd ff86 	bl	8000e88 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2202      	movs	r2, #2
 8002f80:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	681a      	ldr	r2, [r3, #0]
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002f92:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	68db      	ldr	r3, [r3, #12]
 8002f98:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002f9c:	d902      	bls.n	8002fa4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	60fb      	str	r3, [r7, #12]
 8002fa2:	e002      	b.n	8002faa <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002fa4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002fa8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	68db      	ldr	r3, [r3, #12]
 8002fae:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8002fb2:	d007      	beq.n	8002fc4 <HAL_SPI_Init+0xa0>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	68db      	ldr	r3, [r3, #12]
 8002fb8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002fbc:	d002      	beq.n	8002fc4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	689b      	ldr	r3, [r3, #8]
 8002fd0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002fd4:	431a      	orrs	r2, r3
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	691b      	ldr	r3, [r3, #16]
 8002fda:	f003 0302 	and.w	r3, r3, #2
 8002fde:	431a      	orrs	r2, r3
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	695b      	ldr	r3, [r3, #20]
 8002fe4:	f003 0301 	and.w	r3, r3, #1
 8002fe8:	431a      	orrs	r2, r3
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	699b      	ldr	r3, [r3, #24]
 8002fee:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002ff2:	431a      	orrs	r2, r3
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	69db      	ldr	r3, [r3, #28]
 8002ff8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002ffc:	431a      	orrs	r2, r3
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6a1b      	ldr	r3, [r3, #32]
 8003002:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003006:	ea42 0103 	orr.w	r1, r2, r3
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800300e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	430a      	orrs	r2, r1
 8003018:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	699b      	ldr	r3, [r3, #24]
 800301e:	0c1b      	lsrs	r3, r3, #16
 8003020:	f003 0204 	and.w	r2, r3, #4
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003028:	f003 0310 	and.w	r3, r3, #16
 800302c:	431a      	orrs	r2, r3
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003032:	f003 0308 	and.w	r3, r3, #8
 8003036:	431a      	orrs	r2, r3
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	68db      	ldr	r3, [r3, #12]
 800303c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003040:	ea42 0103 	orr.w	r1, r2, r3
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	430a      	orrs	r2, r1
 8003050:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2200      	movs	r2, #0
 8003056:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2201      	movs	r2, #1
 800305c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8003060:	2300      	movs	r3, #0
}
 8003062:	4618      	mov	r0, r3
 8003064:	3710      	adds	r7, #16
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}

0800306a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800306a:	b580      	push	{r7, lr}
 800306c:	b088      	sub	sp, #32
 800306e:	af00      	add	r7, sp, #0
 8003070:	60f8      	str	r0, [r7, #12]
 8003072:	60b9      	str	r1, [r7, #8]
 8003074:	603b      	str	r3, [r7, #0]
 8003076:	4613      	mov	r3, r2
 8003078:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800307a:	2300      	movs	r3, #0
 800307c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003084:	2b01      	cmp	r3, #1
 8003086:	d101      	bne.n	800308c <HAL_SPI_Transmit+0x22>
 8003088:	2302      	movs	r3, #2
 800308a:	e15f      	b.n	800334c <HAL_SPI_Transmit+0x2e2>
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	2201      	movs	r2, #1
 8003090:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003094:	f7fe f946 	bl	8001324 <HAL_GetTick>
 8003098:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800309a:	88fb      	ldrh	r3, [r7, #6]
 800309c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80030a4:	b2db      	uxtb	r3, r3
 80030a6:	2b01      	cmp	r3, #1
 80030a8:	d002      	beq.n	80030b0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80030aa:	2302      	movs	r3, #2
 80030ac:	77fb      	strb	r3, [r7, #31]
    goto error;
 80030ae:	e148      	b.n	8003342 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 80030b0:	68bb      	ldr	r3, [r7, #8]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d002      	beq.n	80030bc <HAL_SPI_Transmit+0x52>
 80030b6:	88fb      	ldrh	r3, [r7, #6]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d102      	bne.n	80030c2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80030bc:	2301      	movs	r3, #1
 80030be:	77fb      	strb	r3, [r7, #31]
    goto error;
 80030c0:	e13f      	b.n	8003342 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	2203      	movs	r2, #3
 80030c6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	2200      	movs	r2, #0
 80030ce:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	68ba      	ldr	r2, [r7, #8]
 80030d4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	88fa      	ldrh	r2, [r7, #6]
 80030da:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	88fa      	ldrh	r2, [r7, #6]
 80030e0:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	2200      	movs	r2, #0
 80030e6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	2200      	movs	r2, #0
 80030ec:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	2200      	movs	r2, #0
 80030f4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	2200      	movs	r2, #0
 80030fc:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	2200      	movs	r2, #0
 8003102:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	689b      	ldr	r3, [r3, #8]
 8003108:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800310c:	d10f      	bne.n	800312e <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	681a      	ldr	r2, [r3, #0]
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800311c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	681a      	ldr	r2, [r3, #0]
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800312c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003138:	2b40      	cmp	r3, #64	@ 0x40
 800313a:	d007      	beq.n	800314c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	681a      	ldr	r2, [r3, #0]
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800314a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	68db      	ldr	r3, [r3, #12]
 8003150:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003154:	d94f      	bls.n	80031f6 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d002      	beq.n	8003164 <HAL_SPI_Transmit+0xfa>
 800315e:	8afb      	ldrh	r3, [r7, #22]
 8003160:	2b01      	cmp	r3, #1
 8003162:	d142      	bne.n	80031ea <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003168:	881a      	ldrh	r2, [r3, #0]
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003174:	1c9a      	adds	r2, r3, #2
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800317e:	b29b      	uxth	r3, r3
 8003180:	3b01      	subs	r3, #1
 8003182:	b29a      	uxth	r2, r3
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003188:	e02f      	b.n	80031ea <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	689b      	ldr	r3, [r3, #8]
 8003190:	f003 0302 	and.w	r3, r3, #2
 8003194:	2b02      	cmp	r3, #2
 8003196:	d112      	bne.n	80031be <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800319c:	881a      	ldrh	r2, [r3, #0]
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031a8:	1c9a      	adds	r2, r3, #2
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80031b2:	b29b      	uxth	r3, r3
 80031b4:	3b01      	subs	r3, #1
 80031b6:	b29a      	uxth	r2, r3
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80031bc:	e015      	b.n	80031ea <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80031be:	f7fe f8b1 	bl	8001324 <HAL_GetTick>
 80031c2:	4602      	mov	r2, r0
 80031c4:	69bb      	ldr	r3, [r7, #24]
 80031c6:	1ad3      	subs	r3, r2, r3
 80031c8:	683a      	ldr	r2, [r7, #0]
 80031ca:	429a      	cmp	r2, r3
 80031cc:	d803      	bhi.n	80031d6 <HAL_SPI_Transmit+0x16c>
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80031d4:	d102      	bne.n	80031dc <HAL_SPI_Transmit+0x172>
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d106      	bne.n	80031ea <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 80031dc:	2303      	movs	r3, #3
 80031de:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	2201      	movs	r2, #1
 80031e4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 80031e8:	e0ab      	b.n	8003342 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80031ee:	b29b      	uxth	r3, r3
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d1ca      	bne.n	800318a <HAL_SPI_Transmit+0x120>
 80031f4:	e080      	b.n	80032f8 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d002      	beq.n	8003204 <HAL_SPI_Transmit+0x19a>
 80031fe:	8afb      	ldrh	r3, [r7, #22]
 8003200:	2b01      	cmp	r3, #1
 8003202:	d174      	bne.n	80032ee <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003208:	b29b      	uxth	r3, r3
 800320a:	2b01      	cmp	r3, #1
 800320c:	d912      	bls.n	8003234 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003212:	881a      	ldrh	r2, [r3, #0]
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800321e:	1c9a      	adds	r2, r3, #2
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003228:	b29b      	uxth	r3, r3
 800322a:	3b02      	subs	r3, #2
 800322c:	b29a      	uxth	r2, r3
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003232:	e05c      	b.n	80032ee <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	330c      	adds	r3, #12
 800323e:	7812      	ldrb	r2, [r2, #0]
 8003240:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003246:	1c5a      	adds	r2, r3, #1
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003250:	b29b      	uxth	r3, r3
 8003252:	3b01      	subs	r3, #1
 8003254:	b29a      	uxth	r2, r3
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800325a:	e048      	b.n	80032ee <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	689b      	ldr	r3, [r3, #8]
 8003262:	f003 0302 	and.w	r3, r3, #2
 8003266:	2b02      	cmp	r3, #2
 8003268:	d12b      	bne.n	80032c2 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800326e:	b29b      	uxth	r3, r3
 8003270:	2b01      	cmp	r3, #1
 8003272:	d912      	bls.n	800329a <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003278:	881a      	ldrh	r2, [r3, #0]
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003284:	1c9a      	adds	r2, r3, #2
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800328e:	b29b      	uxth	r3, r3
 8003290:	3b02      	subs	r3, #2
 8003292:	b29a      	uxth	r2, r3
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003298:	e029      	b.n	80032ee <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	330c      	adds	r3, #12
 80032a4:	7812      	ldrb	r2, [r2, #0]
 80032a6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032ac:	1c5a      	adds	r2, r3, #1
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80032b6:	b29b      	uxth	r3, r3
 80032b8:	3b01      	subs	r3, #1
 80032ba:	b29a      	uxth	r2, r3
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80032c0:	e015      	b.n	80032ee <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80032c2:	f7fe f82f 	bl	8001324 <HAL_GetTick>
 80032c6:	4602      	mov	r2, r0
 80032c8:	69bb      	ldr	r3, [r7, #24]
 80032ca:	1ad3      	subs	r3, r2, r3
 80032cc:	683a      	ldr	r2, [r7, #0]
 80032ce:	429a      	cmp	r2, r3
 80032d0:	d803      	bhi.n	80032da <HAL_SPI_Transmit+0x270>
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80032d8:	d102      	bne.n	80032e0 <HAL_SPI_Transmit+0x276>
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d106      	bne.n	80032ee <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 80032e0:	2303      	movs	r3, #3
 80032e2:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	2201      	movs	r2, #1
 80032e8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 80032ec:	e029      	b.n	8003342 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80032f2:	b29b      	uxth	r3, r3
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d1b1      	bne.n	800325c <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80032f8:	69ba      	ldr	r2, [r7, #24]
 80032fa:	6839      	ldr	r1, [r7, #0]
 80032fc:	68f8      	ldr	r0, [r7, #12]
 80032fe:	f000 fcf9 	bl	8003cf4 <SPI_EndRxTxTransaction>
 8003302:	4603      	mov	r3, r0
 8003304:	2b00      	cmp	r3, #0
 8003306:	d002      	beq.n	800330e <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	2220      	movs	r2, #32
 800330c:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	689b      	ldr	r3, [r3, #8]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d10a      	bne.n	800332c <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003316:	2300      	movs	r3, #0
 8003318:	613b      	str	r3, [r7, #16]
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	68db      	ldr	r3, [r3, #12]
 8003320:	613b      	str	r3, [r7, #16]
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	689b      	ldr	r3, [r3, #8]
 8003328:	613b      	str	r3, [r7, #16]
 800332a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003330:	2b00      	cmp	r3, #0
 8003332:	d002      	beq.n	800333a <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8003334:	2301      	movs	r3, #1
 8003336:	77fb      	strb	r3, [r7, #31]
 8003338:	e003      	b.n	8003342 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	2201      	movs	r2, #1
 800333e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	2200      	movs	r2, #0
 8003346:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 800334a:	7ffb      	ldrb	r3, [r7, #31]
}
 800334c:	4618      	mov	r0, r3
 800334e:	3720      	adds	r7, #32
 8003350:	46bd      	mov	sp, r7
 8003352:	bd80      	pop	{r7, pc}

08003354 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b088      	sub	sp, #32
 8003358:	af02      	add	r7, sp, #8
 800335a:	60f8      	str	r0, [r7, #12]
 800335c:	60b9      	str	r1, [r7, #8]
 800335e:	603b      	str	r3, [r7, #0]
 8003360:	4613      	mov	r3, r2
 8003362:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003364:	2300      	movs	r3, #0
 8003366:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800336e:	b2db      	uxtb	r3, r3
 8003370:	2b01      	cmp	r3, #1
 8003372:	d002      	beq.n	800337a <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8003374:	2302      	movs	r3, #2
 8003376:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003378:	e11a      	b.n	80035b0 <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003382:	d112      	bne.n	80033aa <HAL_SPI_Receive+0x56>
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	689b      	ldr	r3, [r3, #8]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d10e      	bne.n	80033aa <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	2204      	movs	r2, #4
 8003390:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003394:	88fa      	ldrh	r2, [r7, #6]
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	9300      	str	r3, [sp, #0]
 800339a:	4613      	mov	r3, r2
 800339c:	68ba      	ldr	r2, [r7, #8]
 800339e:	68b9      	ldr	r1, [r7, #8]
 80033a0:	68f8      	ldr	r0, [r7, #12]
 80033a2:	f000 f90e 	bl	80035c2 <HAL_SPI_TransmitReceive>
 80033a6:	4603      	mov	r3, r0
 80033a8:	e107      	b.n	80035ba <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80033b0:	2b01      	cmp	r3, #1
 80033b2:	d101      	bne.n	80033b8 <HAL_SPI_Receive+0x64>
 80033b4:	2302      	movs	r3, #2
 80033b6:	e100      	b.n	80035ba <HAL_SPI_Receive+0x266>
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	2201      	movs	r2, #1
 80033bc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80033c0:	f7fd ffb0 	bl	8001324 <HAL_GetTick>
 80033c4:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 80033c6:	68bb      	ldr	r3, [r7, #8]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d002      	beq.n	80033d2 <HAL_SPI_Receive+0x7e>
 80033cc:	88fb      	ldrh	r3, [r7, #6]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d102      	bne.n	80033d8 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80033d2:	2301      	movs	r3, #1
 80033d4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80033d6:	e0eb      	b.n	80035b0 <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	2204      	movs	r2, #4
 80033dc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	2200      	movs	r2, #0
 80033e4:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	68ba      	ldr	r2, [r7, #8]
 80033ea:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	88fa      	ldrh	r2, [r7, #6]
 80033f0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	88fa      	ldrh	r2, [r7, #6]
 80033f8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	2200      	movs	r2, #0
 8003400:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	2200      	movs	r2, #0
 8003406:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	2200      	movs	r2, #0
 800340c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	2200      	movs	r2, #0
 8003412:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	2200      	movs	r2, #0
 8003418:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	68db      	ldr	r3, [r3, #12]
 800341e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003422:	d908      	bls.n	8003436 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	685a      	ldr	r2, [r3, #4]
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003432:	605a      	str	r2, [r3, #4]
 8003434:	e007      	b.n	8003446 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	685a      	ldr	r2, [r3, #4]
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003444:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	689b      	ldr	r3, [r3, #8]
 800344a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800344e:	d10f      	bne.n	8003470 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	681a      	ldr	r2, [r3, #0]
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800345e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	681a      	ldr	r2, [r3, #0]
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800346e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800347a:	2b40      	cmp	r3, #64	@ 0x40
 800347c:	d007      	beq.n	800348e <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	681a      	ldr	r2, [r3, #0]
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800348c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	68db      	ldr	r3, [r3, #12]
 8003492:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003496:	d86f      	bhi.n	8003578 <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003498:	e034      	b.n	8003504 <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	689b      	ldr	r3, [r3, #8]
 80034a0:	f003 0301 	and.w	r3, r3, #1
 80034a4:	2b01      	cmp	r3, #1
 80034a6:	d117      	bne.n	80034d8 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f103 020c 	add.w	r2, r3, #12
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034b4:	7812      	ldrb	r2, [r2, #0]
 80034b6:	b2d2      	uxtb	r2, r2
 80034b8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034be:	1c5a      	adds	r2, r3, #1
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80034ca:	b29b      	uxth	r3, r3
 80034cc:	3b01      	subs	r3, #1
 80034ce:	b29a      	uxth	r2, r3
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 80034d6:	e015      	b.n	8003504 <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80034d8:	f7fd ff24 	bl	8001324 <HAL_GetTick>
 80034dc:	4602      	mov	r2, r0
 80034de:	693b      	ldr	r3, [r7, #16]
 80034e0:	1ad3      	subs	r3, r2, r3
 80034e2:	683a      	ldr	r2, [r7, #0]
 80034e4:	429a      	cmp	r2, r3
 80034e6:	d803      	bhi.n	80034f0 <HAL_SPI_Receive+0x19c>
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80034ee:	d102      	bne.n	80034f6 <HAL_SPI_Receive+0x1a2>
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d106      	bne.n	8003504 <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 80034f6:	2303      	movs	r3, #3
 80034f8:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	2201      	movs	r2, #1
 80034fe:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8003502:	e055      	b.n	80035b0 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800350a:	b29b      	uxth	r3, r3
 800350c:	2b00      	cmp	r3, #0
 800350e:	d1c4      	bne.n	800349a <HAL_SPI_Receive+0x146>
 8003510:	e038      	b.n	8003584 <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	689b      	ldr	r3, [r3, #8]
 8003518:	f003 0301 	and.w	r3, r3, #1
 800351c:	2b01      	cmp	r3, #1
 800351e:	d115      	bne.n	800354c <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	68da      	ldr	r2, [r3, #12]
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800352a:	b292      	uxth	r2, r2
 800352c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003532:	1c9a      	adds	r2, r3, #2
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800353e:	b29b      	uxth	r3, r3
 8003540:	3b01      	subs	r3, #1
 8003542:	b29a      	uxth	r2, r3
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 800354a:	e015      	b.n	8003578 <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800354c:	f7fd feea 	bl	8001324 <HAL_GetTick>
 8003550:	4602      	mov	r2, r0
 8003552:	693b      	ldr	r3, [r7, #16]
 8003554:	1ad3      	subs	r3, r2, r3
 8003556:	683a      	ldr	r2, [r7, #0]
 8003558:	429a      	cmp	r2, r3
 800355a:	d803      	bhi.n	8003564 <HAL_SPI_Receive+0x210>
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003562:	d102      	bne.n	800356a <HAL_SPI_Receive+0x216>
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d106      	bne.n	8003578 <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 800356a:	2303      	movs	r3, #3
 800356c:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	2201      	movs	r2, #1
 8003572:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8003576:	e01b      	b.n	80035b0 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800357e:	b29b      	uxth	r3, r3
 8003580:	2b00      	cmp	r3, #0
 8003582:	d1c6      	bne.n	8003512 <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003584:	693a      	ldr	r2, [r7, #16]
 8003586:	6839      	ldr	r1, [r7, #0]
 8003588:	68f8      	ldr	r0, [r7, #12]
 800358a:	f000 fb5b 	bl	8003c44 <SPI_EndRxTransaction>
 800358e:	4603      	mov	r3, r0
 8003590:	2b00      	cmp	r3, #0
 8003592:	d002      	beq.n	800359a <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	2220      	movs	r2, #32
 8003598:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d002      	beq.n	80035a8 <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 80035a2:	2301      	movs	r3, #1
 80035a4:	75fb      	strb	r3, [r7, #23]
 80035a6:	e003      	b.n	80035b0 <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	2201      	movs	r2, #1
 80035ac:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	2200      	movs	r2, #0
 80035b4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 80035b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80035ba:	4618      	mov	r0, r3
 80035bc:	3718      	adds	r7, #24
 80035be:	46bd      	mov	sp, r7
 80035c0:	bd80      	pop	{r7, pc}

080035c2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80035c2:	b580      	push	{r7, lr}
 80035c4:	b08a      	sub	sp, #40	@ 0x28
 80035c6:	af00      	add	r7, sp, #0
 80035c8:	60f8      	str	r0, [r7, #12]
 80035ca:	60b9      	str	r1, [r7, #8]
 80035cc:	607a      	str	r2, [r7, #4]
 80035ce:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80035d0:	2301      	movs	r3, #1
 80035d2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80035d4:	2300      	movs	r3, #0
 80035d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80035e0:	2b01      	cmp	r3, #1
 80035e2:	d101      	bne.n	80035e8 <HAL_SPI_TransmitReceive+0x26>
 80035e4:	2302      	movs	r3, #2
 80035e6:	e20a      	b.n	80039fe <HAL_SPI_TransmitReceive+0x43c>
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	2201      	movs	r2, #1
 80035ec:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80035f0:	f7fd fe98 	bl	8001324 <HAL_GetTick>
 80035f4:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80035fc:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8003604:	887b      	ldrh	r3, [r7, #2]
 8003606:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8003608:	887b      	ldrh	r3, [r7, #2]
 800360a:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800360c:	7efb      	ldrb	r3, [r7, #27]
 800360e:	2b01      	cmp	r3, #1
 8003610:	d00e      	beq.n	8003630 <HAL_SPI_TransmitReceive+0x6e>
 8003612:	697b      	ldr	r3, [r7, #20]
 8003614:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003618:	d106      	bne.n	8003628 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	689b      	ldr	r3, [r3, #8]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d102      	bne.n	8003628 <HAL_SPI_TransmitReceive+0x66>
 8003622:	7efb      	ldrb	r3, [r7, #27]
 8003624:	2b04      	cmp	r3, #4
 8003626:	d003      	beq.n	8003630 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8003628:	2302      	movs	r3, #2
 800362a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 800362e:	e1e0      	b.n	80039f2 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003630:	68bb      	ldr	r3, [r7, #8]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d005      	beq.n	8003642 <HAL_SPI_TransmitReceive+0x80>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d002      	beq.n	8003642 <HAL_SPI_TransmitReceive+0x80>
 800363c:	887b      	ldrh	r3, [r7, #2]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d103      	bne.n	800364a <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8003642:	2301      	movs	r3, #1
 8003644:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8003648:	e1d3      	b.n	80039f2 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003650:	b2db      	uxtb	r3, r3
 8003652:	2b04      	cmp	r3, #4
 8003654:	d003      	beq.n	800365e <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	2205      	movs	r2, #5
 800365a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	2200      	movs	r2, #0
 8003662:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	687a      	ldr	r2, [r7, #4]
 8003668:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	887a      	ldrh	r2, [r7, #2]
 800366e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	887a      	ldrh	r2, [r7, #2]
 8003676:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	68ba      	ldr	r2, [r7, #8]
 800367e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	887a      	ldrh	r2, [r7, #2]
 8003684:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	887a      	ldrh	r2, [r7, #2]
 800368a:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	2200      	movs	r2, #0
 8003690:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	2200      	movs	r2, #0
 8003696:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	68db      	ldr	r3, [r3, #12]
 800369c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80036a0:	d802      	bhi.n	80036a8 <HAL_SPI_TransmitReceive+0xe6>
 80036a2:	8a3b      	ldrh	r3, [r7, #16]
 80036a4:	2b01      	cmp	r3, #1
 80036a6:	d908      	bls.n	80036ba <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	685a      	ldr	r2, [r3, #4]
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80036b6:	605a      	str	r2, [r3, #4]
 80036b8:	e007      	b.n	80036ca <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	685a      	ldr	r2, [r3, #4]
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80036c8:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036d4:	2b40      	cmp	r3, #64	@ 0x40
 80036d6:	d007      	beq.n	80036e8 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	681a      	ldr	r2, [r3, #0]
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80036e6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	68db      	ldr	r3, [r3, #12]
 80036ec:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80036f0:	f240 8081 	bls.w	80037f6 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d002      	beq.n	8003702 <HAL_SPI_TransmitReceive+0x140>
 80036fc:	8a7b      	ldrh	r3, [r7, #18]
 80036fe:	2b01      	cmp	r3, #1
 8003700:	d16d      	bne.n	80037de <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003706:	881a      	ldrh	r2, [r3, #0]
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003712:	1c9a      	adds	r2, r3, #2
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800371c:	b29b      	uxth	r3, r3
 800371e:	3b01      	subs	r3, #1
 8003720:	b29a      	uxth	r2, r3
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003726:	e05a      	b.n	80037de <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	689b      	ldr	r3, [r3, #8]
 800372e:	f003 0302 	and.w	r3, r3, #2
 8003732:	2b02      	cmp	r3, #2
 8003734:	d11b      	bne.n	800376e <HAL_SPI_TransmitReceive+0x1ac>
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800373a:	b29b      	uxth	r3, r3
 800373c:	2b00      	cmp	r3, #0
 800373e:	d016      	beq.n	800376e <HAL_SPI_TransmitReceive+0x1ac>
 8003740:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003742:	2b01      	cmp	r3, #1
 8003744:	d113      	bne.n	800376e <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800374a:	881a      	ldrh	r2, [r3, #0]
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003756:	1c9a      	adds	r2, r3, #2
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003760:	b29b      	uxth	r3, r3
 8003762:	3b01      	subs	r3, #1
 8003764:	b29a      	uxth	r2, r3
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800376a:	2300      	movs	r3, #0
 800376c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	689b      	ldr	r3, [r3, #8]
 8003774:	f003 0301 	and.w	r3, r3, #1
 8003778:	2b01      	cmp	r3, #1
 800377a:	d11c      	bne.n	80037b6 <HAL_SPI_TransmitReceive+0x1f4>
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003782:	b29b      	uxth	r3, r3
 8003784:	2b00      	cmp	r3, #0
 8003786:	d016      	beq.n	80037b6 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	68da      	ldr	r2, [r3, #12]
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003792:	b292      	uxth	r2, r2
 8003794:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800379a:	1c9a      	adds	r2, r3, #2
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80037a6:	b29b      	uxth	r3, r3
 80037a8:	3b01      	subs	r3, #1
 80037aa:	b29a      	uxth	r2, r3
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80037b2:	2301      	movs	r3, #1
 80037b4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80037b6:	f7fd fdb5 	bl	8001324 <HAL_GetTick>
 80037ba:	4602      	mov	r2, r0
 80037bc:	69fb      	ldr	r3, [r7, #28]
 80037be:	1ad3      	subs	r3, r2, r3
 80037c0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80037c2:	429a      	cmp	r2, r3
 80037c4:	d80b      	bhi.n	80037de <HAL_SPI_TransmitReceive+0x21c>
 80037c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037c8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80037cc:	d007      	beq.n	80037de <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 80037ce:	2303      	movs	r3, #3
 80037d0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	2201      	movs	r2, #1
 80037d8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 80037dc:	e109      	b.n	80039f2 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80037e2:	b29b      	uxth	r3, r3
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d19f      	bne.n	8003728 <HAL_SPI_TransmitReceive+0x166>
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80037ee:	b29b      	uxth	r3, r3
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d199      	bne.n	8003728 <HAL_SPI_TransmitReceive+0x166>
 80037f4:	e0e3      	b.n	80039be <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d003      	beq.n	8003806 <HAL_SPI_TransmitReceive+0x244>
 80037fe:	8a7b      	ldrh	r3, [r7, #18]
 8003800:	2b01      	cmp	r3, #1
 8003802:	f040 80cf 	bne.w	80039a4 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800380a:	b29b      	uxth	r3, r3
 800380c:	2b01      	cmp	r3, #1
 800380e:	d912      	bls.n	8003836 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003814:	881a      	ldrh	r2, [r3, #0]
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003820:	1c9a      	adds	r2, r3, #2
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800382a:	b29b      	uxth	r3, r3
 800382c:	3b02      	subs	r3, #2
 800382e:	b29a      	uxth	r2, r3
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003834:	e0b6      	b.n	80039a4 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	330c      	adds	r3, #12
 8003840:	7812      	ldrb	r2, [r2, #0]
 8003842:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003848:	1c5a      	adds	r2, r3, #1
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003852:	b29b      	uxth	r3, r3
 8003854:	3b01      	subs	r3, #1
 8003856:	b29a      	uxth	r2, r3
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800385c:	e0a2      	b.n	80039a4 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	689b      	ldr	r3, [r3, #8]
 8003864:	f003 0302 	and.w	r3, r3, #2
 8003868:	2b02      	cmp	r3, #2
 800386a:	d134      	bne.n	80038d6 <HAL_SPI_TransmitReceive+0x314>
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003870:	b29b      	uxth	r3, r3
 8003872:	2b00      	cmp	r3, #0
 8003874:	d02f      	beq.n	80038d6 <HAL_SPI_TransmitReceive+0x314>
 8003876:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003878:	2b01      	cmp	r3, #1
 800387a:	d12c      	bne.n	80038d6 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003880:	b29b      	uxth	r3, r3
 8003882:	2b01      	cmp	r3, #1
 8003884:	d912      	bls.n	80038ac <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800388a:	881a      	ldrh	r2, [r3, #0]
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003896:	1c9a      	adds	r2, r3, #2
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80038a0:	b29b      	uxth	r3, r3
 80038a2:	3b02      	subs	r3, #2
 80038a4:	b29a      	uxth	r2, r3
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80038aa:	e012      	b.n	80038d2 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	330c      	adds	r3, #12
 80038b6:	7812      	ldrb	r2, [r2, #0]
 80038b8:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038be:	1c5a      	adds	r2, r3, #1
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80038c8:	b29b      	uxth	r3, r3
 80038ca:	3b01      	subs	r3, #1
 80038cc:	b29a      	uxth	r2, r3
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80038d2:	2300      	movs	r3, #0
 80038d4:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	689b      	ldr	r3, [r3, #8]
 80038dc:	f003 0301 	and.w	r3, r3, #1
 80038e0:	2b01      	cmp	r3, #1
 80038e2:	d148      	bne.n	8003976 <HAL_SPI_TransmitReceive+0x3b4>
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80038ea:	b29b      	uxth	r3, r3
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d042      	beq.n	8003976 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80038f6:	b29b      	uxth	r3, r3
 80038f8:	2b01      	cmp	r3, #1
 80038fa:	d923      	bls.n	8003944 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	68da      	ldr	r2, [r3, #12]
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003906:	b292      	uxth	r2, r2
 8003908:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800390e:	1c9a      	adds	r2, r3, #2
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800391a:	b29b      	uxth	r3, r3
 800391c:	3b02      	subs	r3, #2
 800391e:	b29a      	uxth	r2, r3
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800392c:	b29b      	uxth	r3, r3
 800392e:	2b01      	cmp	r3, #1
 8003930:	d81f      	bhi.n	8003972 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	685a      	ldr	r2, [r3, #4]
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003940:	605a      	str	r2, [r3, #4]
 8003942:	e016      	b.n	8003972 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f103 020c 	add.w	r2, r3, #12
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003950:	7812      	ldrb	r2, [r2, #0]
 8003952:	b2d2      	uxtb	r2, r2
 8003954:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800395a:	1c5a      	adds	r2, r3, #1
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003966:	b29b      	uxth	r3, r3
 8003968:	3b01      	subs	r3, #1
 800396a:	b29a      	uxth	r2, r3
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003972:	2301      	movs	r3, #1
 8003974:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003976:	f7fd fcd5 	bl	8001324 <HAL_GetTick>
 800397a:	4602      	mov	r2, r0
 800397c:	69fb      	ldr	r3, [r7, #28]
 800397e:	1ad3      	subs	r3, r2, r3
 8003980:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003982:	429a      	cmp	r2, r3
 8003984:	d803      	bhi.n	800398e <HAL_SPI_TransmitReceive+0x3cc>
 8003986:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003988:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800398c:	d102      	bne.n	8003994 <HAL_SPI_TransmitReceive+0x3d2>
 800398e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003990:	2b00      	cmp	r3, #0
 8003992:	d107      	bne.n	80039a4 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8003994:	2303      	movs	r3, #3
 8003996:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	2201      	movs	r2, #1
 800399e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 80039a2:	e026      	b.n	80039f2 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80039a8:	b29b      	uxth	r3, r3
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	f47f af57 	bne.w	800385e <HAL_SPI_TransmitReceive+0x29c>
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80039b6:	b29b      	uxth	r3, r3
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	f47f af50 	bne.w	800385e <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80039be:	69fa      	ldr	r2, [r7, #28]
 80039c0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80039c2:	68f8      	ldr	r0, [r7, #12]
 80039c4:	f000 f996 	bl	8003cf4 <SPI_EndRxTxTransaction>
 80039c8:	4603      	mov	r3, r0
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d005      	beq.n	80039da <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 80039ce:	2301      	movs	r3, #1
 80039d0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	2220      	movs	r2, #32
 80039d8:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d003      	beq.n	80039ea <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 80039e2:	2301      	movs	r3, #1
 80039e4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80039e8:	e003      	b.n	80039f2 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	2201      	movs	r2, #1
 80039ee:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	2200      	movs	r2, #0
 80039f6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 80039fa:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 80039fe:	4618      	mov	r0, r3
 8003a00:	3728      	adds	r7, #40	@ 0x28
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bd80      	pop	{r7, pc}
	...

08003a08 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b088      	sub	sp, #32
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	60f8      	str	r0, [r7, #12]
 8003a10:	60b9      	str	r1, [r7, #8]
 8003a12:	603b      	str	r3, [r7, #0]
 8003a14:	4613      	mov	r3, r2
 8003a16:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003a18:	f7fd fc84 	bl	8001324 <HAL_GetTick>
 8003a1c:	4602      	mov	r2, r0
 8003a1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a20:	1a9b      	subs	r3, r3, r2
 8003a22:	683a      	ldr	r2, [r7, #0]
 8003a24:	4413      	add	r3, r2
 8003a26:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003a28:	f7fd fc7c 	bl	8001324 <HAL_GetTick>
 8003a2c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003a2e:	4b39      	ldr	r3, [pc, #228]	@ (8003b14 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	015b      	lsls	r3, r3, #5
 8003a34:	0d1b      	lsrs	r3, r3, #20
 8003a36:	69fa      	ldr	r2, [r7, #28]
 8003a38:	fb02 f303 	mul.w	r3, r2, r3
 8003a3c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003a3e:	e054      	b.n	8003aea <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003a46:	d050      	beq.n	8003aea <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003a48:	f7fd fc6c 	bl	8001324 <HAL_GetTick>
 8003a4c:	4602      	mov	r2, r0
 8003a4e:	69bb      	ldr	r3, [r7, #24]
 8003a50:	1ad3      	subs	r3, r2, r3
 8003a52:	69fa      	ldr	r2, [r7, #28]
 8003a54:	429a      	cmp	r2, r3
 8003a56:	d902      	bls.n	8003a5e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003a58:	69fb      	ldr	r3, [r7, #28]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d13d      	bne.n	8003ada <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	685a      	ldr	r2, [r3, #4]
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003a6c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003a76:	d111      	bne.n	8003a9c <SPI_WaitFlagStateUntilTimeout+0x94>
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	689b      	ldr	r3, [r3, #8]
 8003a7c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003a80:	d004      	beq.n	8003a8c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	689b      	ldr	r3, [r3, #8]
 8003a86:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a8a:	d107      	bne.n	8003a9c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	681a      	ldr	r2, [r3, #0]
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003a9a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003aa0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003aa4:	d10f      	bne.n	8003ac6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	681a      	ldr	r2, [r3, #0]
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003ab4:	601a      	str	r2, [r3, #0]
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	681a      	ldr	r2, [r3, #0]
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003ac4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	2201      	movs	r2, #1
 8003aca:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003ad6:	2303      	movs	r3, #3
 8003ad8:	e017      	b.n	8003b0a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003ada:	697b      	ldr	r3, [r7, #20]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d101      	bne.n	8003ae4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003ae4:	697b      	ldr	r3, [r7, #20]
 8003ae6:	3b01      	subs	r3, #1
 8003ae8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	689a      	ldr	r2, [r3, #8]
 8003af0:	68bb      	ldr	r3, [r7, #8]
 8003af2:	4013      	ands	r3, r2
 8003af4:	68ba      	ldr	r2, [r7, #8]
 8003af6:	429a      	cmp	r2, r3
 8003af8:	bf0c      	ite	eq
 8003afa:	2301      	moveq	r3, #1
 8003afc:	2300      	movne	r3, #0
 8003afe:	b2db      	uxtb	r3, r3
 8003b00:	461a      	mov	r2, r3
 8003b02:	79fb      	ldrb	r3, [r7, #7]
 8003b04:	429a      	cmp	r2, r3
 8003b06:	d19b      	bne.n	8003a40 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003b08:	2300      	movs	r3, #0
}
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	3720      	adds	r7, #32
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd80      	pop	{r7, pc}
 8003b12:	bf00      	nop
 8003b14:	20000014 	.word	0x20000014

08003b18 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b08a      	sub	sp, #40	@ 0x28
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	60f8      	str	r0, [r7, #12]
 8003b20:	60b9      	str	r1, [r7, #8]
 8003b22:	607a      	str	r2, [r7, #4]
 8003b24:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003b26:	2300      	movs	r3, #0
 8003b28:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003b2a:	f7fd fbfb 	bl	8001324 <HAL_GetTick>
 8003b2e:	4602      	mov	r2, r0
 8003b30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b32:	1a9b      	subs	r3, r3, r2
 8003b34:	683a      	ldr	r2, [r7, #0]
 8003b36:	4413      	add	r3, r2
 8003b38:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8003b3a:	f7fd fbf3 	bl	8001324 <HAL_GetTick>
 8003b3e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	330c      	adds	r3, #12
 8003b46:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003b48:	4b3d      	ldr	r3, [pc, #244]	@ (8003c40 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003b4a:	681a      	ldr	r2, [r3, #0]
 8003b4c:	4613      	mov	r3, r2
 8003b4e:	009b      	lsls	r3, r3, #2
 8003b50:	4413      	add	r3, r2
 8003b52:	00da      	lsls	r2, r3, #3
 8003b54:	1ad3      	subs	r3, r2, r3
 8003b56:	0d1b      	lsrs	r3, r3, #20
 8003b58:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b5a:	fb02 f303 	mul.w	r3, r2, r3
 8003b5e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003b60:	e060      	b.n	8003c24 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003b62:	68bb      	ldr	r3, [r7, #8]
 8003b64:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003b68:	d107      	bne.n	8003b7a <SPI_WaitFifoStateUntilTimeout+0x62>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d104      	bne.n	8003b7a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003b70:	69fb      	ldr	r3, [r7, #28]
 8003b72:	781b      	ldrb	r3, [r3, #0]
 8003b74:	b2db      	uxtb	r3, r3
 8003b76:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003b78:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003b80:	d050      	beq.n	8003c24 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003b82:	f7fd fbcf 	bl	8001324 <HAL_GetTick>
 8003b86:	4602      	mov	r2, r0
 8003b88:	6a3b      	ldr	r3, [r7, #32]
 8003b8a:	1ad3      	subs	r3, r2, r3
 8003b8c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b8e:	429a      	cmp	r2, r3
 8003b90:	d902      	bls.n	8003b98 <SPI_WaitFifoStateUntilTimeout+0x80>
 8003b92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d13d      	bne.n	8003c14 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	685a      	ldr	r2, [r3, #4]
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003ba6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003bb0:	d111      	bne.n	8003bd6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	689b      	ldr	r3, [r3, #8]
 8003bb6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003bba:	d004      	beq.n	8003bc6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	689b      	ldr	r3, [r3, #8]
 8003bc0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003bc4:	d107      	bne.n	8003bd6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	681a      	ldr	r2, [r3, #0]
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003bd4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bda:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003bde:	d10f      	bne.n	8003c00 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	681a      	ldr	r2, [r3, #0]
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003bee:	601a      	str	r2, [r3, #0]
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	681a      	ldr	r2, [r3, #0]
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003bfe:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	2201      	movs	r2, #1
 8003c04:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003c10:	2303      	movs	r3, #3
 8003c12:	e010      	b.n	8003c36 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003c14:	69bb      	ldr	r3, [r7, #24]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d101      	bne.n	8003c1e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8003c1e:	69bb      	ldr	r3, [r7, #24]
 8003c20:	3b01      	subs	r3, #1
 8003c22:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	689a      	ldr	r2, [r3, #8]
 8003c2a:	68bb      	ldr	r3, [r7, #8]
 8003c2c:	4013      	ands	r3, r2
 8003c2e:	687a      	ldr	r2, [r7, #4]
 8003c30:	429a      	cmp	r2, r3
 8003c32:	d196      	bne.n	8003b62 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003c34:	2300      	movs	r3, #0
}
 8003c36:	4618      	mov	r0, r3
 8003c38:	3728      	adds	r7, #40	@ 0x28
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bd80      	pop	{r7, pc}
 8003c3e:	bf00      	nop
 8003c40:	20000014 	.word	0x20000014

08003c44 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b086      	sub	sp, #24
 8003c48:	af02      	add	r7, sp, #8
 8003c4a:	60f8      	str	r0, [r7, #12]
 8003c4c:	60b9      	str	r1, [r7, #8]
 8003c4e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003c58:	d111      	bne.n	8003c7e <SPI_EndRxTransaction+0x3a>
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	689b      	ldr	r3, [r3, #8]
 8003c5e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003c62:	d004      	beq.n	8003c6e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	689b      	ldr	r3, [r3, #8]
 8003c68:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c6c:	d107      	bne.n	8003c7e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	681a      	ldr	r2, [r3, #0]
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003c7c:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	9300      	str	r3, [sp, #0]
 8003c82:	68bb      	ldr	r3, [r7, #8]
 8003c84:	2200      	movs	r2, #0
 8003c86:	2180      	movs	r1, #128	@ 0x80
 8003c88:	68f8      	ldr	r0, [r7, #12]
 8003c8a:	f7ff febd 	bl	8003a08 <SPI_WaitFlagStateUntilTimeout>
 8003c8e:	4603      	mov	r3, r0
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d007      	beq.n	8003ca4 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c98:	f043 0220 	orr.w	r2, r3, #32
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003ca0:	2303      	movs	r3, #3
 8003ca2:	e023      	b.n	8003cec <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003cac:	d11d      	bne.n	8003cea <SPI_EndRxTransaction+0xa6>
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	689b      	ldr	r3, [r3, #8]
 8003cb2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003cb6:	d004      	beq.n	8003cc2 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	689b      	ldr	r3, [r3, #8]
 8003cbc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003cc0:	d113      	bne.n	8003cea <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	9300      	str	r3, [sp, #0]
 8003cc6:	68bb      	ldr	r3, [r7, #8]
 8003cc8:	2200      	movs	r2, #0
 8003cca:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8003cce:	68f8      	ldr	r0, [r7, #12]
 8003cd0:	f7ff ff22 	bl	8003b18 <SPI_WaitFifoStateUntilTimeout>
 8003cd4:	4603      	mov	r3, r0
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d007      	beq.n	8003cea <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003cde:	f043 0220 	orr.w	r2, r3, #32
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8003ce6:	2303      	movs	r3, #3
 8003ce8:	e000      	b.n	8003cec <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8003cea:	2300      	movs	r3, #0
}
 8003cec:	4618      	mov	r0, r3
 8003cee:	3710      	adds	r7, #16
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	bd80      	pop	{r7, pc}

08003cf4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b086      	sub	sp, #24
 8003cf8:	af02      	add	r7, sp, #8
 8003cfa:	60f8      	str	r0, [r7, #12]
 8003cfc:	60b9      	str	r1, [r7, #8]
 8003cfe:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	9300      	str	r3, [sp, #0]
 8003d04:	68bb      	ldr	r3, [r7, #8]
 8003d06:	2200      	movs	r2, #0
 8003d08:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8003d0c:	68f8      	ldr	r0, [r7, #12]
 8003d0e:	f7ff ff03 	bl	8003b18 <SPI_WaitFifoStateUntilTimeout>
 8003d12:	4603      	mov	r3, r0
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d007      	beq.n	8003d28 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d1c:	f043 0220 	orr.w	r2, r3, #32
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003d24:	2303      	movs	r3, #3
 8003d26:	e027      	b.n	8003d78 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	9300      	str	r3, [sp, #0]
 8003d2c:	68bb      	ldr	r3, [r7, #8]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	2180      	movs	r1, #128	@ 0x80
 8003d32:	68f8      	ldr	r0, [r7, #12]
 8003d34:	f7ff fe68 	bl	8003a08 <SPI_WaitFlagStateUntilTimeout>
 8003d38:	4603      	mov	r3, r0
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d007      	beq.n	8003d4e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d42:	f043 0220 	orr.w	r2, r3, #32
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003d4a:	2303      	movs	r3, #3
 8003d4c:	e014      	b.n	8003d78 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	9300      	str	r3, [sp, #0]
 8003d52:	68bb      	ldr	r3, [r7, #8]
 8003d54:	2200      	movs	r2, #0
 8003d56:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8003d5a:	68f8      	ldr	r0, [r7, #12]
 8003d5c:	f7ff fedc 	bl	8003b18 <SPI_WaitFifoStateUntilTimeout>
 8003d60:	4603      	mov	r3, r0
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d007      	beq.n	8003d76 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d6a:	f043 0220 	orr.w	r2, r3, #32
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003d72:	2303      	movs	r3, #3
 8003d74:	e000      	b.n	8003d78 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003d76:	2300      	movs	r3, #0
}
 8003d78:	4618      	mov	r0, r3
 8003d7a:	3710      	adds	r7, #16
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	bd80      	pop	{r7, pc}

08003d80 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b082      	sub	sp, #8
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d101      	bne.n	8003d92 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	e049      	b.n	8003e26 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d98:	b2db      	uxtb	r3, r3
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d106      	bne.n	8003dac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2200      	movs	r2, #0
 8003da2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003da6:	6878      	ldr	r0, [r7, #4]
 8003da8:	f7fd f8b0 	bl	8000f0c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2202      	movs	r2, #2
 8003db0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681a      	ldr	r2, [r3, #0]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	3304      	adds	r3, #4
 8003dbc:	4619      	mov	r1, r3
 8003dbe:	4610      	mov	r0, r2
 8003dc0:	f000 f9d0 	bl	8004164 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2201      	movs	r2, #1
 8003dc8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2201      	movs	r2, #1
 8003dd0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2201      	movs	r2, #1
 8003dd8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2201      	movs	r2, #1
 8003de0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2201      	movs	r2, #1
 8003de8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2201      	movs	r2, #1
 8003df0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2201      	movs	r2, #1
 8003df8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2201      	movs	r2, #1
 8003e00:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2201      	movs	r2, #1
 8003e08:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2201      	movs	r2, #1
 8003e10:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2201      	movs	r2, #1
 8003e18:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2201      	movs	r2, #1
 8003e20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003e24:	2300      	movs	r3, #0
}
 8003e26:	4618      	mov	r0, r3
 8003e28:	3708      	adds	r7, #8
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bd80      	pop	{r7, pc}
	...

08003e30 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003e30:	b480      	push	{r7}
 8003e32:	b085      	sub	sp, #20
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e3e:	b2db      	uxtb	r3, r3
 8003e40:	2b01      	cmp	r3, #1
 8003e42:	d001      	beq.n	8003e48 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003e44:	2301      	movs	r3, #1
 8003e46:	e04f      	b.n	8003ee8 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2202      	movs	r2, #2
 8003e4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	68da      	ldr	r2, [r3, #12]
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f042 0201 	orr.w	r2, r2, #1
 8003e5e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4a23      	ldr	r2, [pc, #140]	@ (8003ef4 <HAL_TIM_Base_Start_IT+0xc4>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d01d      	beq.n	8003ea6 <HAL_TIM_Base_Start_IT+0x76>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e72:	d018      	beq.n	8003ea6 <HAL_TIM_Base_Start_IT+0x76>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a1f      	ldr	r2, [pc, #124]	@ (8003ef8 <HAL_TIM_Base_Start_IT+0xc8>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d013      	beq.n	8003ea6 <HAL_TIM_Base_Start_IT+0x76>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4a1e      	ldr	r2, [pc, #120]	@ (8003efc <HAL_TIM_Base_Start_IT+0xcc>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d00e      	beq.n	8003ea6 <HAL_TIM_Base_Start_IT+0x76>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4a1c      	ldr	r2, [pc, #112]	@ (8003f00 <HAL_TIM_Base_Start_IT+0xd0>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d009      	beq.n	8003ea6 <HAL_TIM_Base_Start_IT+0x76>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4a1b      	ldr	r2, [pc, #108]	@ (8003f04 <HAL_TIM_Base_Start_IT+0xd4>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d004      	beq.n	8003ea6 <HAL_TIM_Base_Start_IT+0x76>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4a19      	ldr	r2, [pc, #100]	@ (8003f08 <HAL_TIM_Base_Start_IT+0xd8>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d115      	bne.n	8003ed2 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	689a      	ldr	r2, [r3, #8]
 8003eac:	4b17      	ldr	r3, [pc, #92]	@ (8003f0c <HAL_TIM_Base_Start_IT+0xdc>)
 8003eae:	4013      	ands	r3, r2
 8003eb0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	2b06      	cmp	r3, #6
 8003eb6:	d015      	beq.n	8003ee4 <HAL_TIM_Base_Start_IT+0xb4>
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ebe:	d011      	beq.n	8003ee4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	681a      	ldr	r2, [r3, #0]
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f042 0201 	orr.w	r2, r2, #1
 8003ece:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ed0:	e008      	b.n	8003ee4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	681a      	ldr	r2, [r3, #0]
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f042 0201 	orr.w	r2, r2, #1
 8003ee0:	601a      	str	r2, [r3, #0]
 8003ee2:	e000      	b.n	8003ee6 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ee4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003ee6:	2300      	movs	r3, #0
}
 8003ee8:	4618      	mov	r0, r3
 8003eea:	3714      	adds	r7, #20
 8003eec:	46bd      	mov	sp, r7
 8003eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef2:	4770      	bx	lr
 8003ef4:	40012c00 	.word	0x40012c00
 8003ef8:	40000400 	.word	0x40000400
 8003efc:	40000800 	.word	0x40000800
 8003f00:	40000c00 	.word	0x40000c00
 8003f04:	40013400 	.word	0x40013400
 8003f08:	40014000 	.word	0x40014000
 8003f0c:	00010007 	.word	0x00010007

08003f10 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b084      	sub	sp, #16
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	68db      	ldr	r3, [r3, #12]
 8003f1e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	691b      	ldr	r3, [r3, #16]
 8003f26:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003f28:	68bb      	ldr	r3, [r7, #8]
 8003f2a:	f003 0302 	and.w	r3, r3, #2
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d020      	beq.n	8003f74 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	f003 0302 	and.w	r3, r3, #2
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d01b      	beq.n	8003f74 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f06f 0202 	mvn.w	r2, #2
 8003f44:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2201      	movs	r2, #1
 8003f4a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	699b      	ldr	r3, [r3, #24]
 8003f52:	f003 0303 	and.w	r3, r3, #3
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d003      	beq.n	8003f62 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003f5a:	6878      	ldr	r0, [r7, #4]
 8003f5c:	f000 f8e4 	bl	8004128 <HAL_TIM_IC_CaptureCallback>
 8003f60:	e005      	b.n	8003f6e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f62:	6878      	ldr	r0, [r7, #4]
 8003f64:	f000 f8d6 	bl	8004114 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f68:	6878      	ldr	r0, [r7, #4]
 8003f6a:	f000 f8e7 	bl	800413c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2200      	movs	r2, #0
 8003f72:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003f74:	68bb      	ldr	r3, [r7, #8]
 8003f76:	f003 0304 	and.w	r3, r3, #4
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d020      	beq.n	8003fc0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	f003 0304 	and.w	r3, r3, #4
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d01b      	beq.n	8003fc0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f06f 0204 	mvn.w	r2, #4
 8003f90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2202      	movs	r2, #2
 8003f96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	699b      	ldr	r3, [r3, #24]
 8003f9e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d003      	beq.n	8003fae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003fa6:	6878      	ldr	r0, [r7, #4]
 8003fa8:	f000 f8be 	bl	8004128 <HAL_TIM_IC_CaptureCallback>
 8003fac:	e005      	b.n	8003fba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fae:	6878      	ldr	r0, [r7, #4]
 8003fb0:	f000 f8b0 	bl	8004114 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fb4:	6878      	ldr	r0, [r7, #4]
 8003fb6:	f000 f8c1 	bl	800413c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003fc0:	68bb      	ldr	r3, [r7, #8]
 8003fc2:	f003 0308 	and.w	r3, r3, #8
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d020      	beq.n	800400c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	f003 0308 	and.w	r3, r3, #8
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d01b      	beq.n	800400c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f06f 0208 	mvn.w	r2, #8
 8003fdc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2204      	movs	r2, #4
 8003fe2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	69db      	ldr	r3, [r3, #28]
 8003fea:	f003 0303 	and.w	r3, r3, #3
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d003      	beq.n	8003ffa <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ff2:	6878      	ldr	r0, [r7, #4]
 8003ff4:	f000 f898 	bl	8004128 <HAL_TIM_IC_CaptureCallback>
 8003ff8:	e005      	b.n	8004006 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ffa:	6878      	ldr	r0, [r7, #4]
 8003ffc:	f000 f88a 	bl	8004114 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004000:	6878      	ldr	r0, [r7, #4]
 8004002:	f000 f89b 	bl	800413c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2200      	movs	r2, #0
 800400a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800400c:	68bb      	ldr	r3, [r7, #8]
 800400e:	f003 0310 	and.w	r3, r3, #16
 8004012:	2b00      	cmp	r3, #0
 8004014:	d020      	beq.n	8004058 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	f003 0310 	and.w	r3, r3, #16
 800401c:	2b00      	cmp	r3, #0
 800401e:	d01b      	beq.n	8004058 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f06f 0210 	mvn.w	r2, #16
 8004028:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2208      	movs	r2, #8
 800402e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	69db      	ldr	r3, [r3, #28]
 8004036:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800403a:	2b00      	cmp	r3, #0
 800403c:	d003      	beq.n	8004046 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800403e:	6878      	ldr	r0, [r7, #4]
 8004040:	f000 f872 	bl	8004128 <HAL_TIM_IC_CaptureCallback>
 8004044:	e005      	b.n	8004052 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004046:	6878      	ldr	r0, [r7, #4]
 8004048:	f000 f864 	bl	8004114 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800404c:	6878      	ldr	r0, [r7, #4]
 800404e:	f000 f875 	bl	800413c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2200      	movs	r2, #0
 8004056:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004058:	68bb      	ldr	r3, [r7, #8]
 800405a:	f003 0301 	and.w	r3, r3, #1
 800405e:	2b00      	cmp	r3, #0
 8004060:	d00c      	beq.n	800407c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	f003 0301 	and.w	r3, r3, #1
 8004068:	2b00      	cmp	r3, #0
 800406a:	d007      	beq.n	800407c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f06f 0201 	mvn.w	r2, #1
 8004074:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004076:	6878      	ldr	r0, [r7, #4]
 8004078:	f7fc fd00 	bl	8000a7c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004082:	2b00      	cmp	r3, #0
 8004084:	d00c      	beq.n	80040a0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800408c:	2b00      	cmp	r3, #0
 800408e:	d007      	beq.n	80040a0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004098:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800409a:	6878      	ldr	r0, [r7, #4]
 800409c:	f000 f906 	bl	80042ac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80040a0:	68bb      	ldr	r3, [r7, #8]
 80040a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d00c      	beq.n	80040c4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d007      	beq.n	80040c4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80040bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80040be:	6878      	ldr	r0, [r7, #4]
 80040c0:	f000 f8fe 	bl	80042c0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80040c4:	68bb      	ldr	r3, [r7, #8]
 80040c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d00c      	beq.n	80040e8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d007      	beq.n	80040e8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80040e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80040e2:	6878      	ldr	r0, [r7, #4]
 80040e4:	f000 f834 	bl	8004150 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80040e8:	68bb      	ldr	r3, [r7, #8]
 80040ea:	f003 0320 	and.w	r3, r3, #32
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d00c      	beq.n	800410c <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	f003 0320 	and.w	r3, r3, #32
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d007      	beq.n	800410c <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f06f 0220 	mvn.w	r2, #32
 8004104:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004106:	6878      	ldr	r0, [r7, #4]
 8004108:	f000 f8c6 	bl	8004298 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800410c:	bf00      	nop
 800410e:	3710      	adds	r7, #16
 8004110:	46bd      	mov	sp, r7
 8004112:	bd80      	pop	{r7, pc}

08004114 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004114:	b480      	push	{r7}
 8004116:	b083      	sub	sp, #12
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800411c:	bf00      	nop
 800411e:	370c      	adds	r7, #12
 8004120:	46bd      	mov	sp, r7
 8004122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004126:	4770      	bx	lr

08004128 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004128:	b480      	push	{r7}
 800412a:	b083      	sub	sp, #12
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004130:	bf00      	nop
 8004132:	370c      	adds	r7, #12
 8004134:	46bd      	mov	sp, r7
 8004136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413a:	4770      	bx	lr

0800413c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800413c:	b480      	push	{r7}
 800413e:	b083      	sub	sp, #12
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004144:	bf00      	nop
 8004146:	370c      	adds	r7, #12
 8004148:	46bd      	mov	sp, r7
 800414a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414e:	4770      	bx	lr

08004150 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004150:	b480      	push	{r7}
 8004152:	b083      	sub	sp, #12
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004158:	bf00      	nop
 800415a:	370c      	adds	r7, #12
 800415c:	46bd      	mov	sp, r7
 800415e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004162:	4770      	bx	lr

08004164 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004164:	b480      	push	{r7}
 8004166:	b085      	sub	sp, #20
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
 800416c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	4a40      	ldr	r2, [pc, #256]	@ (8004278 <TIM_Base_SetConfig+0x114>)
 8004178:	4293      	cmp	r3, r2
 800417a:	d013      	beq.n	80041a4 <TIM_Base_SetConfig+0x40>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004182:	d00f      	beq.n	80041a4 <TIM_Base_SetConfig+0x40>
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	4a3d      	ldr	r2, [pc, #244]	@ (800427c <TIM_Base_SetConfig+0x118>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d00b      	beq.n	80041a4 <TIM_Base_SetConfig+0x40>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	4a3c      	ldr	r2, [pc, #240]	@ (8004280 <TIM_Base_SetConfig+0x11c>)
 8004190:	4293      	cmp	r3, r2
 8004192:	d007      	beq.n	80041a4 <TIM_Base_SetConfig+0x40>
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	4a3b      	ldr	r2, [pc, #236]	@ (8004284 <TIM_Base_SetConfig+0x120>)
 8004198:	4293      	cmp	r3, r2
 800419a:	d003      	beq.n	80041a4 <TIM_Base_SetConfig+0x40>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	4a3a      	ldr	r2, [pc, #232]	@ (8004288 <TIM_Base_SetConfig+0x124>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d108      	bne.n	80041b6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80041aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	68fa      	ldr	r2, [r7, #12]
 80041b2:	4313      	orrs	r3, r2
 80041b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	4a2f      	ldr	r2, [pc, #188]	@ (8004278 <TIM_Base_SetConfig+0x114>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d01f      	beq.n	80041fe <TIM_Base_SetConfig+0x9a>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80041c4:	d01b      	beq.n	80041fe <TIM_Base_SetConfig+0x9a>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	4a2c      	ldr	r2, [pc, #176]	@ (800427c <TIM_Base_SetConfig+0x118>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d017      	beq.n	80041fe <TIM_Base_SetConfig+0x9a>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	4a2b      	ldr	r2, [pc, #172]	@ (8004280 <TIM_Base_SetConfig+0x11c>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d013      	beq.n	80041fe <TIM_Base_SetConfig+0x9a>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	4a2a      	ldr	r2, [pc, #168]	@ (8004284 <TIM_Base_SetConfig+0x120>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d00f      	beq.n	80041fe <TIM_Base_SetConfig+0x9a>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	4a29      	ldr	r2, [pc, #164]	@ (8004288 <TIM_Base_SetConfig+0x124>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d00b      	beq.n	80041fe <TIM_Base_SetConfig+0x9a>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	4a28      	ldr	r2, [pc, #160]	@ (800428c <TIM_Base_SetConfig+0x128>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d007      	beq.n	80041fe <TIM_Base_SetConfig+0x9a>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	4a27      	ldr	r2, [pc, #156]	@ (8004290 <TIM_Base_SetConfig+0x12c>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d003      	beq.n	80041fe <TIM_Base_SetConfig+0x9a>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	4a26      	ldr	r2, [pc, #152]	@ (8004294 <TIM_Base_SetConfig+0x130>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d108      	bne.n	8004210 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004204:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	68db      	ldr	r3, [r3, #12]
 800420a:	68fa      	ldr	r2, [r7, #12]
 800420c:	4313      	orrs	r3, r2
 800420e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	695b      	ldr	r3, [r3, #20]
 800421a:	4313      	orrs	r3, r2
 800421c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	68fa      	ldr	r2, [r7, #12]
 8004222:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	689a      	ldr	r2, [r3, #8]
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	681a      	ldr	r2, [r3, #0]
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	4a10      	ldr	r2, [pc, #64]	@ (8004278 <TIM_Base_SetConfig+0x114>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d00f      	beq.n	800425c <TIM_Base_SetConfig+0xf8>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	4a12      	ldr	r2, [pc, #72]	@ (8004288 <TIM_Base_SetConfig+0x124>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d00b      	beq.n	800425c <TIM_Base_SetConfig+0xf8>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	4a11      	ldr	r2, [pc, #68]	@ (800428c <TIM_Base_SetConfig+0x128>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d007      	beq.n	800425c <TIM_Base_SetConfig+0xf8>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	4a10      	ldr	r2, [pc, #64]	@ (8004290 <TIM_Base_SetConfig+0x12c>)
 8004250:	4293      	cmp	r3, r2
 8004252:	d003      	beq.n	800425c <TIM_Base_SetConfig+0xf8>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	4a0f      	ldr	r2, [pc, #60]	@ (8004294 <TIM_Base_SetConfig+0x130>)
 8004258:	4293      	cmp	r3, r2
 800425a:	d103      	bne.n	8004264 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	691a      	ldr	r2, [r3, #16]
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2201      	movs	r2, #1
 8004268:	615a      	str	r2, [r3, #20]
}
 800426a:	bf00      	nop
 800426c:	3714      	adds	r7, #20
 800426e:	46bd      	mov	sp, r7
 8004270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004274:	4770      	bx	lr
 8004276:	bf00      	nop
 8004278:	40012c00 	.word	0x40012c00
 800427c:	40000400 	.word	0x40000400
 8004280:	40000800 	.word	0x40000800
 8004284:	40000c00 	.word	0x40000c00
 8004288:	40013400 	.word	0x40013400
 800428c:	40014000 	.word	0x40014000
 8004290:	40014400 	.word	0x40014400
 8004294:	40014800 	.word	0x40014800

08004298 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004298:	b480      	push	{r7}
 800429a:	b083      	sub	sp, #12
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80042a0:	bf00      	nop
 80042a2:	370c      	adds	r7, #12
 80042a4:	46bd      	mov	sp, r7
 80042a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042aa:	4770      	bx	lr

080042ac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80042ac:	b480      	push	{r7}
 80042ae:	b083      	sub	sp, #12
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80042b4:	bf00      	nop
 80042b6:	370c      	adds	r7, #12
 80042b8:	46bd      	mov	sp, r7
 80042ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042be:	4770      	bx	lr

080042c0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80042c0:	b480      	push	{r7}
 80042c2:	b083      	sub	sp, #12
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80042c8:	bf00      	nop
 80042ca:	370c      	adds	r7, #12
 80042cc:	46bd      	mov	sp, r7
 80042ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d2:	4770      	bx	lr

080042d4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b082      	sub	sp, #8
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d101      	bne.n	80042e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80042e2:	2301      	movs	r3, #1
 80042e4:	e040      	b.n	8004368 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d106      	bne.n	80042fc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2200      	movs	r2, #0
 80042f2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80042f6:	6878      	ldr	r0, [r7, #4]
 80042f8:	f7fc fe2e 	bl	8000f58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2224      	movs	r2, #36	@ 0x24
 8004300:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	681a      	ldr	r2, [r3, #0]
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f022 0201 	bic.w	r2, r2, #1
 8004310:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004316:	2b00      	cmp	r3, #0
 8004318:	d002      	beq.n	8004320 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800431a:	6878      	ldr	r0, [r7, #4]
 800431c:	f000 fb6a 	bl	80049f4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004320:	6878      	ldr	r0, [r7, #4]
 8004322:	f000 f8af 	bl	8004484 <UART_SetConfig>
 8004326:	4603      	mov	r3, r0
 8004328:	2b01      	cmp	r3, #1
 800432a:	d101      	bne.n	8004330 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800432c:	2301      	movs	r3, #1
 800432e:	e01b      	b.n	8004368 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	685a      	ldr	r2, [r3, #4]
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800433e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	689a      	ldr	r2, [r3, #8]
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800434e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	681a      	ldr	r2, [r3, #0]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f042 0201 	orr.w	r2, r2, #1
 800435e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004360:	6878      	ldr	r0, [r7, #4]
 8004362:	f000 fbe9 	bl	8004b38 <UART_CheckIdleState>
 8004366:	4603      	mov	r3, r0
}
 8004368:	4618      	mov	r0, r3
 800436a:	3708      	adds	r7, #8
 800436c:	46bd      	mov	sp, r7
 800436e:	bd80      	pop	{r7, pc}

08004370 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b08a      	sub	sp, #40	@ 0x28
 8004374:	af02      	add	r7, sp, #8
 8004376:	60f8      	str	r0, [r7, #12]
 8004378:	60b9      	str	r1, [r7, #8]
 800437a:	603b      	str	r3, [r7, #0]
 800437c:	4613      	mov	r3, r2
 800437e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004384:	2b20      	cmp	r3, #32
 8004386:	d177      	bne.n	8004478 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8004388:	68bb      	ldr	r3, [r7, #8]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d002      	beq.n	8004394 <HAL_UART_Transmit+0x24>
 800438e:	88fb      	ldrh	r3, [r7, #6]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d101      	bne.n	8004398 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004394:	2301      	movs	r3, #1
 8004396:	e070      	b.n	800447a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	2200      	movs	r2, #0
 800439c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	2221      	movs	r2, #33	@ 0x21
 80043a4:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80043a6:	f7fc ffbd 	bl	8001324 <HAL_GetTick>
 80043aa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	88fa      	ldrh	r2, [r7, #6]
 80043b0:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	88fa      	ldrh	r2, [r7, #6]
 80043b8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	689b      	ldr	r3, [r3, #8]
 80043c0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80043c4:	d108      	bne.n	80043d8 <HAL_UART_Transmit+0x68>
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	691b      	ldr	r3, [r3, #16]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d104      	bne.n	80043d8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80043ce:	2300      	movs	r3, #0
 80043d0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80043d2:	68bb      	ldr	r3, [r7, #8]
 80043d4:	61bb      	str	r3, [r7, #24]
 80043d6:	e003      	b.n	80043e0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80043d8:	68bb      	ldr	r3, [r7, #8]
 80043da:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80043dc:	2300      	movs	r3, #0
 80043de:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80043e0:	e02f      	b.n	8004442 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	9300      	str	r3, [sp, #0]
 80043e6:	697b      	ldr	r3, [r7, #20]
 80043e8:	2200      	movs	r2, #0
 80043ea:	2180      	movs	r1, #128	@ 0x80
 80043ec:	68f8      	ldr	r0, [r7, #12]
 80043ee:	f000 fc4b 	bl	8004c88 <UART_WaitOnFlagUntilTimeout>
 80043f2:	4603      	mov	r3, r0
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d004      	beq.n	8004402 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	2220      	movs	r2, #32
 80043fc:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80043fe:	2303      	movs	r3, #3
 8004400:	e03b      	b.n	800447a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8004402:	69fb      	ldr	r3, [r7, #28]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d10b      	bne.n	8004420 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004408:	69bb      	ldr	r3, [r7, #24]
 800440a:	881a      	ldrh	r2, [r3, #0]
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004414:	b292      	uxth	r2, r2
 8004416:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004418:	69bb      	ldr	r3, [r7, #24]
 800441a:	3302      	adds	r3, #2
 800441c:	61bb      	str	r3, [r7, #24]
 800441e:	e007      	b.n	8004430 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004420:	69fb      	ldr	r3, [r7, #28]
 8004422:	781a      	ldrb	r2, [r3, #0]
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800442a:	69fb      	ldr	r3, [r7, #28]
 800442c:	3301      	adds	r3, #1
 800442e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004436:	b29b      	uxth	r3, r3
 8004438:	3b01      	subs	r3, #1
 800443a:	b29a      	uxth	r2, r3
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004448:	b29b      	uxth	r3, r3
 800444a:	2b00      	cmp	r3, #0
 800444c:	d1c9      	bne.n	80043e2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	9300      	str	r3, [sp, #0]
 8004452:	697b      	ldr	r3, [r7, #20]
 8004454:	2200      	movs	r2, #0
 8004456:	2140      	movs	r1, #64	@ 0x40
 8004458:	68f8      	ldr	r0, [r7, #12]
 800445a:	f000 fc15 	bl	8004c88 <UART_WaitOnFlagUntilTimeout>
 800445e:	4603      	mov	r3, r0
 8004460:	2b00      	cmp	r3, #0
 8004462:	d004      	beq.n	800446e <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	2220      	movs	r2, #32
 8004468:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800446a:	2303      	movs	r3, #3
 800446c:	e005      	b.n	800447a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	2220      	movs	r2, #32
 8004472:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004474:	2300      	movs	r3, #0
 8004476:	e000      	b.n	800447a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8004478:	2302      	movs	r3, #2
  }
}
 800447a:	4618      	mov	r0, r3
 800447c:	3720      	adds	r7, #32
 800447e:	46bd      	mov	sp, r7
 8004480:	bd80      	pop	{r7, pc}
	...

08004484 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004484:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004488:	b08a      	sub	sp, #40	@ 0x28
 800448a:	af00      	add	r7, sp, #0
 800448c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800448e:	2300      	movs	r3, #0
 8004490:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	689a      	ldr	r2, [r3, #8]
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	691b      	ldr	r3, [r3, #16]
 800449c:	431a      	orrs	r2, r3
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	695b      	ldr	r3, [r3, #20]
 80044a2:	431a      	orrs	r2, r3
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	69db      	ldr	r3, [r3, #28]
 80044a8:	4313      	orrs	r3, r2
 80044aa:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	681a      	ldr	r2, [r3, #0]
 80044b2:	4ba4      	ldr	r3, [pc, #656]	@ (8004744 <UART_SetConfig+0x2c0>)
 80044b4:	4013      	ands	r3, r2
 80044b6:	68fa      	ldr	r2, [r7, #12]
 80044b8:	6812      	ldr	r2, [r2, #0]
 80044ba:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80044bc:	430b      	orrs	r3, r1
 80044be:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	685b      	ldr	r3, [r3, #4]
 80044c6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	68da      	ldr	r2, [r3, #12]
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	430a      	orrs	r2, r1
 80044d4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	699b      	ldr	r3, [r3, #24]
 80044da:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4a99      	ldr	r2, [pc, #612]	@ (8004748 <UART_SetConfig+0x2c4>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d004      	beq.n	80044f0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	6a1b      	ldr	r3, [r3, #32]
 80044ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80044ec:	4313      	orrs	r3, r2
 80044ee:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	689b      	ldr	r3, [r3, #8]
 80044f6:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004500:	430a      	orrs	r2, r1
 8004502:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4a90      	ldr	r2, [pc, #576]	@ (800474c <UART_SetConfig+0x2c8>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d126      	bne.n	800455c <UART_SetConfig+0xd8>
 800450e:	4b90      	ldr	r3, [pc, #576]	@ (8004750 <UART_SetConfig+0x2cc>)
 8004510:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004514:	f003 0303 	and.w	r3, r3, #3
 8004518:	2b03      	cmp	r3, #3
 800451a:	d81b      	bhi.n	8004554 <UART_SetConfig+0xd0>
 800451c:	a201      	add	r2, pc, #4	@ (adr r2, 8004524 <UART_SetConfig+0xa0>)
 800451e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004522:	bf00      	nop
 8004524:	08004535 	.word	0x08004535
 8004528:	08004545 	.word	0x08004545
 800452c:	0800453d 	.word	0x0800453d
 8004530:	0800454d 	.word	0x0800454d
 8004534:	2301      	movs	r3, #1
 8004536:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800453a:	e116      	b.n	800476a <UART_SetConfig+0x2e6>
 800453c:	2302      	movs	r3, #2
 800453e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004542:	e112      	b.n	800476a <UART_SetConfig+0x2e6>
 8004544:	2304      	movs	r3, #4
 8004546:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800454a:	e10e      	b.n	800476a <UART_SetConfig+0x2e6>
 800454c:	2308      	movs	r3, #8
 800454e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004552:	e10a      	b.n	800476a <UART_SetConfig+0x2e6>
 8004554:	2310      	movs	r3, #16
 8004556:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800455a:	e106      	b.n	800476a <UART_SetConfig+0x2e6>
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4a7c      	ldr	r2, [pc, #496]	@ (8004754 <UART_SetConfig+0x2d0>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d138      	bne.n	80045d8 <UART_SetConfig+0x154>
 8004566:	4b7a      	ldr	r3, [pc, #488]	@ (8004750 <UART_SetConfig+0x2cc>)
 8004568:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800456c:	f003 030c 	and.w	r3, r3, #12
 8004570:	2b0c      	cmp	r3, #12
 8004572:	d82d      	bhi.n	80045d0 <UART_SetConfig+0x14c>
 8004574:	a201      	add	r2, pc, #4	@ (adr r2, 800457c <UART_SetConfig+0xf8>)
 8004576:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800457a:	bf00      	nop
 800457c:	080045b1 	.word	0x080045b1
 8004580:	080045d1 	.word	0x080045d1
 8004584:	080045d1 	.word	0x080045d1
 8004588:	080045d1 	.word	0x080045d1
 800458c:	080045c1 	.word	0x080045c1
 8004590:	080045d1 	.word	0x080045d1
 8004594:	080045d1 	.word	0x080045d1
 8004598:	080045d1 	.word	0x080045d1
 800459c:	080045b9 	.word	0x080045b9
 80045a0:	080045d1 	.word	0x080045d1
 80045a4:	080045d1 	.word	0x080045d1
 80045a8:	080045d1 	.word	0x080045d1
 80045ac:	080045c9 	.word	0x080045c9
 80045b0:	2300      	movs	r3, #0
 80045b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80045b6:	e0d8      	b.n	800476a <UART_SetConfig+0x2e6>
 80045b8:	2302      	movs	r3, #2
 80045ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80045be:	e0d4      	b.n	800476a <UART_SetConfig+0x2e6>
 80045c0:	2304      	movs	r3, #4
 80045c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80045c6:	e0d0      	b.n	800476a <UART_SetConfig+0x2e6>
 80045c8:	2308      	movs	r3, #8
 80045ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80045ce:	e0cc      	b.n	800476a <UART_SetConfig+0x2e6>
 80045d0:	2310      	movs	r3, #16
 80045d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80045d6:	e0c8      	b.n	800476a <UART_SetConfig+0x2e6>
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	4a5e      	ldr	r2, [pc, #376]	@ (8004758 <UART_SetConfig+0x2d4>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d125      	bne.n	800462e <UART_SetConfig+0x1aa>
 80045e2:	4b5b      	ldr	r3, [pc, #364]	@ (8004750 <UART_SetConfig+0x2cc>)
 80045e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045e8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80045ec:	2b30      	cmp	r3, #48	@ 0x30
 80045ee:	d016      	beq.n	800461e <UART_SetConfig+0x19a>
 80045f0:	2b30      	cmp	r3, #48	@ 0x30
 80045f2:	d818      	bhi.n	8004626 <UART_SetConfig+0x1a2>
 80045f4:	2b20      	cmp	r3, #32
 80045f6:	d00a      	beq.n	800460e <UART_SetConfig+0x18a>
 80045f8:	2b20      	cmp	r3, #32
 80045fa:	d814      	bhi.n	8004626 <UART_SetConfig+0x1a2>
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d002      	beq.n	8004606 <UART_SetConfig+0x182>
 8004600:	2b10      	cmp	r3, #16
 8004602:	d008      	beq.n	8004616 <UART_SetConfig+0x192>
 8004604:	e00f      	b.n	8004626 <UART_SetConfig+0x1a2>
 8004606:	2300      	movs	r3, #0
 8004608:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800460c:	e0ad      	b.n	800476a <UART_SetConfig+0x2e6>
 800460e:	2302      	movs	r3, #2
 8004610:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004614:	e0a9      	b.n	800476a <UART_SetConfig+0x2e6>
 8004616:	2304      	movs	r3, #4
 8004618:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800461c:	e0a5      	b.n	800476a <UART_SetConfig+0x2e6>
 800461e:	2308      	movs	r3, #8
 8004620:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004624:	e0a1      	b.n	800476a <UART_SetConfig+0x2e6>
 8004626:	2310      	movs	r3, #16
 8004628:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800462c:	e09d      	b.n	800476a <UART_SetConfig+0x2e6>
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	4a4a      	ldr	r2, [pc, #296]	@ (800475c <UART_SetConfig+0x2d8>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d125      	bne.n	8004684 <UART_SetConfig+0x200>
 8004638:	4b45      	ldr	r3, [pc, #276]	@ (8004750 <UART_SetConfig+0x2cc>)
 800463a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800463e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004642:	2bc0      	cmp	r3, #192	@ 0xc0
 8004644:	d016      	beq.n	8004674 <UART_SetConfig+0x1f0>
 8004646:	2bc0      	cmp	r3, #192	@ 0xc0
 8004648:	d818      	bhi.n	800467c <UART_SetConfig+0x1f8>
 800464a:	2b80      	cmp	r3, #128	@ 0x80
 800464c:	d00a      	beq.n	8004664 <UART_SetConfig+0x1e0>
 800464e:	2b80      	cmp	r3, #128	@ 0x80
 8004650:	d814      	bhi.n	800467c <UART_SetConfig+0x1f8>
 8004652:	2b00      	cmp	r3, #0
 8004654:	d002      	beq.n	800465c <UART_SetConfig+0x1d8>
 8004656:	2b40      	cmp	r3, #64	@ 0x40
 8004658:	d008      	beq.n	800466c <UART_SetConfig+0x1e8>
 800465a:	e00f      	b.n	800467c <UART_SetConfig+0x1f8>
 800465c:	2300      	movs	r3, #0
 800465e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004662:	e082      	b.n	800476a <UART_SetConfig+0x2e6>
 8004664:	2302      	movs	r3, #2
 8004666:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800466a:	e07e      	b.n	800476a <UART_SetConfig+0x2e6>
 800466c:	2304      	movs	r3, #4
 800466e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004672:	e07a      	b.n	800476a <UART_SetConfig+0x2e6>
 8004674:	2308      	movs	r3, #8
 8004676:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800467a:	e076      	b.n	800476a <UART_SetConfig+0x2e6>
 800467c:	2310      	movs	r3, #16
 800467e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004682:	e072      	b.n	800476a <UART_SetConfig+0x2e6>
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4a35      	ldr	r2, [pc, #212]	@ (8004760 <UART_SetConfig+0x2dc>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d12a      	bne.n	80046e4 <UART_SetConfig+0x260>
 800468e:	4b30      	ldr	r3, [pc, #192]	@ (8004750 <UART_SetConfig+0x2cc>)
 8004690:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004694:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004698:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800469c:	d01a      	beq.n	80046d4 <UART_SetConfig+0x250>
 800469e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80046a2:	d81b      	bhi.n	80046dc <UART_SetConfig+0x258>
 80046a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80046a8:	d00c      	beq.n	80046c4 <UART_SetConfig+0x240>
 80046aa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80046ae:	d815      	bhi.n	80046dc <UART_SetConfig+0x258>
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d003      	beq.n	80046bc <UART_SetConfig+0x238>
 80046b4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80046b8:	d008      	beq.n	80046cc <UART_SetConfig+0x248>
 80046ba:	e00f      	b.n	80046dc <UART_SetConfig+0x258>
 80046bc:	2300      	movs	r3, #0
 80046be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80046c2:	e052      	b.n	800476a <UART_SetConfig+0x2e6>
 80046c4:	2302      	movs	r3, #2
 80046c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80046ca:	e04e      	b.n	800476a <UART_SetConfig+0x2e6>
 80046cc:	2304      	movs	r3, #4
 80046ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80046d2:	e04a      	b.n	800476a <UART_SetConfig+0x2e6>
 80046d4:	2308      	movs	r3, #8
 80046d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80046da:	e046      	b.n	800476a <UART_SetConfig+0x2e6>
 80046dc:	2310      	movs	r3, #16
 80046de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80046e2:	e042      	b.n	800476a <UART_SetConfig+0x2e6>
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4a17      	ldr	r2, [pc, #92]	@ (8004748 <UART_SetConfig+0x2c4>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d13a      	bne.n	8004764 <UART_SetConfig+0x2e0>
 80046ee:	4b18      	ldr	r3, [pc, #96]	@ (8004750 <UART_SetConfig+0x2cc>)
 80046f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046f4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80046f8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80046fc:	d01a      	beq.n	8004734 <UART_SetConfig+0x2b0>
 80046fe:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004702:	d81b      	bhi.n	800473c <UART_SetConfig+0x2b8>
 8004704:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004708:	d00c      	beq.n	8004724 <UART_SetConfig+0x2a0>
 800470a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800470e:	d815      	bhi.n	800473c <UART_SetConfig+0x2b8>
 8004710:	2b00      	cmp	r3, #0
 8004712:	d003      	beq.n	800471c <UART_SetConfig+0x298>
 8004714:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004718:	d008      	beq.n	800472c <UART_SetConfig+0x2a8>
 800471a:	e00f      	b.n	800473c <UART_SetConfig+0x2b8>
 800471c:	2300      	movs	r3, #0
 800471e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004722:	e022      	b.n	800476a <UART_SetConfig+0x2e6>
 8004724:	2302      	movs	r3, #2
 8004726:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800472a:	e01e      	b.n	800476a <UART_SetConfig+0x2e6>
 800472c:	2304      	movs	r3, #4
 800472e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004732:	e01a      	b.n	800476a <UART_SetConfig+0x2e6>
 8004734:	2308      	movs	r3, #8
 8004736:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800473a:	e016      	b.n	800476a <UART_SetConfig+0x2e6>
 800473c:	2310      	movs	r3, #16
 800473e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004742:	e012      	b.n	800476a <UART_SetConfig+0x2e6>
 8004744:	efff69f3 	.word	0xefff69f3
 8004748:	40008000 	.word	0x40008000
 800474c:	40013800 	.word	0x40013800
 8004750:	40021000 	.word	0x40021000
 8004754:	40004400 	.word	0x40004400
 8004758:	40004800 	.word	0x40004800
 800475c:	40004c00 	.word	0x40004c00
 8004760:	40005000 	.word	0x40005000
 8004764:	2310      	movs	r3, #16
 8004766:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4a9f      	ldr	r2, [pc, #636]	@ (80049ec <UART_SetConfig+0x568>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d17a      	bne.n	800486a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004774:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004778:	2b08      	cmp	r3, #8
 800477a:	d824      	bhi.n	80047c6 <UART_SetConfig+0x342>
 800477c:	a201      	add	r2, pc, #4	@ (adr r2, 8004784 <UART_SetConfig+0x300>)
 800477e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004782:	bf00      	nop
 8004784:	080047a9 	.word	0x080047a9
 8004788:	080047c7 	.word	0x080047c7
 800478c:	080047b1 	.word	0x080047b1
 8004790:	080047c7 	.word	0x080047c7
 8004794:	080047b7 	.word	0x080047b7
 8004798:	080047c7 	.word	0x080047c7
 800479c:	080047c7 	.word	0x080047c7
 80047a0:	080047c7 	.word	0x080047c7
 80047a4:	080047bf 	.word	0x080047bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80047a8:	f7fd fe74 	bl	8002494 <HAL_RCC_GetPCLK1Freq>
 80047ac:	61f8      	str	r0, [r7, #28]
        break;
 80047ae:	e010      	b.n	80047d2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80047b0:	4b8f      	ldr	r3, [pc, #572]	@ (80049f0 <UART_SetConfig+0x56c>)
 80047b2:	61fb      	str	r3, [r7, #28]
        break;
 80047b4:	e00d      	b.n	80047d2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80047b6:	f7fd fdd5 	bl	8002364 <HAL_RCC_GetSysClockFreq>
 80047ba:	61f8      	str	r0, [r7, #28]
        break;
 80047bc:	e009      	b.n	80047d2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80047be:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80047c2:	61fb      	str	r3, [r7, #28]
        break;
 80047c4:	e005      	b.n	80047d2 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80047c6:	2300      	movs	r3, #0
 80047c8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80047ca:	2301      	movs	r3, #1
 80047cc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80047d0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80047d2:	69fb      	ldr	r3, [r7, #28]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	f000 80fb 	beq.w	80049d0 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	685a      	ldr	r2, [r3, #4]
 80047de:	4613      	mov	r3, r2
 80047e0:	005b      	lsls	r3, r3, #1
 80047e2:	4413      	add	r3, r2
 80047e4:	69fa      	ldr	r2, [r7, #28]
 80047e6:	429a      	cmp	r2, r3
 80047e8:	d305      	bcc.n	80047f6 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	685b      	ldr	r3, [r3, #4]
 80047ee:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80047f0:	69fa      	ldr	r2, [r7, #28]
 80047f2:	429a      	cmp	r2, r3
 80047f4:	d903      	bls.n	80047fe <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80047f6:	2301      	movs	r3, #1
 80047f8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80047fc:	e0e8      	b.n	80049d0 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80047fe:	69fb      	ldr	r3, [r7, #28]
 8004800:	2200      	movs	r2, #0
 8004802:	461c      	mov	r4, r3
 8004804:	4615      	mov	r5, r2
 8004806:	f04f 0200 	mov.w	r2, #0
 800480a:	f04f 0300 	mov.w	r3, #0
 800480e:	022b      	lsls	r3, r5, #8
 8004810:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004814:	0222      	lsls	r2, r4, #8
 8004816:	68f9      	ldr	r1, [r7, #12]
 8004818:	6849      	ldr	r1, [r1, #4]
 800481a:	0849      	lsrs	r1, r1, #1
 800481c:	2000      	movs	r0, #0
 800481e:	4688      	mov	r8, r1
 8004820:	4681      	mov	r9, r0
 8004822:	eb12 0a08 	adds.w	sl, r2, r8
 8004826:	eb43 0b09 	adc.w	fp, r3, r9
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	685b      	ldr	r3, [r3, #4]
 800482e:	2200      	movs	r2, #0
 8004830:	603b      	str	r3, [r7, #0]
 8004832:	607a      	str	r2, [r7, #4]
 8004834:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004838:	4650      	mov	r0, sl
 800483a:	4659      	mov	r1, fp
 800483c:	f7fb fd18 	bl	8000270 <__aeabi_uldivmod>
 8004840:	4602      	mov	r2, r0
 8004842:	460b      	mov	r3, r1
 8004844:	4613      	mov	r3, r2
 8004846:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004848:	69bb      	ldr	r3, [r7, #24]
 800484a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800484e:	d308      	bcc.n	8004862 <UART_SetConfig+0x3de>
 8004850:	69bb      	ldr	r3, [r7, #24]
 8004852:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004856:	d204      	bcs.n	8004862 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	69ba      	ldr	r2, [r7, #24]
 800485e:	60da      	str	r2, [r3, #12]
 8004860:	e0b6      	b.n	80049d0 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004862:	2301      	movs	r3, #1
 8004864:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004868:	e0b2      	b.n	80049d0 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	69db      	ldr	r3, [r3, #28]
 800486e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004872:	d15e      	bne.n	8004932 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004874:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004878:	2b08      	cmp	r3, #8
 800487a:	d828      	bhi.n	80048ce <UART_SetConfig+0x44a>
 800487c:	a201      	add	r2, pc, #4	@ (adr r2, 8004884 <UART_SetConfig+0x400>)
 800487e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004882:	bf00      	nop
 8004884:	080048a9 	.word	0x080048a9
 8004888:	080048b1 	.word	0x080048b1
 800488c:	080048b9 	.word	0x080048b9
 8004890:	080048cf 	.word	0x080048cf
 8004894:	080048bf 	.word	0x080048bf
 8004898:	080048cf 	.word	0x080048cf
 800489c:	080048cf 	.word	0x080048cf
 80048a0:	080048cf 	.word	0x080048cf
 80048a4:	080048c7 	.word	0x080048c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80048a8:	f7fd fdf4 	bl	8002494 <HAL_RCC_GetPCLK1Freq>
 80048ac:	61f8      	str	r0, [r7, #28]
        break;
 80048ae:	e014      	b.n	80048da <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80048b0:	f7fd fe06 	bl	80024c0 <HAL_RCC_GetPCLK2Freq>
 80048b4:	61f8      	str	r0, [r7, #28]
        break;
 80048b6:	e010      	b.n	80048da <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80048b8:	4b4d      	ldr	r3, [pc, #308]	@ (80049f0 <UART_SetConfig+0x56c>)
 80048ba:	61fb      	str	r3, [r7, #28]
        break;
 80048bc:	e00d      	b.n	80048da <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80048be:	f7fd fd51 	bl	8002364 <HAL_RCC_GetSysClockFreq>
 80048c2:	61f8      	str	r0, [r7, #28]
        break;
 80048c4:	e009      	b.n	80048da <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80048c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80048ca:	61fb      	str	r3, [r7, #28]
        break;
 80048cc:	e005      	b.n	80048da <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80048ce:	2300      	movs	r3, #0
 80048d0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80048d2:	2301      	movs	r3, #1
 80048d4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80048d8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80048da:	69fb      	ldr	r3, [r7, #28]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d077      	beq.n	80049d0 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80048e0:	69fb      	ldr	r3, [r7, #28]
 80048e2:	005a      	lsls	r2, r3, #1
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	685b      	ldr	r3, [r3, #4]
 80048e8:	085b      	lsrs	r3, r3, #1
 80048ea:	441a      	add	r2, r3
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	685b      	ldr	r3, [r3, #4]
 80048f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80048f4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80048f6:	69bb      	ldr	r3, [r7, #24]
 80048f8:	2b0f      	cmp	r3, #15
 80048fa:	d916      	bls.n	800492a <UART_SetConfig+0x4a6>
 80048fc:	69bb      	ldr	r3, [r7, #24]
 80048fe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004902:	d212      	bcs.n	800492a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004904:	69bb      	ldr	r3, [r7, #24]
 8004906:	b29b      	uxth	r3, r3
 8004908:	f023 030f 	bic.w	r3, r3, #15
 800490c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800490e:	69bb      	ldr	r3, [r7, #24]
 8004910:	085b      	lsrs	r3, r3, #1
 8004912:	b29b      	uxth	r3, r3
 8004914:	f003 0307 	and.w	r3, r3, #7
 8004918:	b29a      	uxth	r2, r3
 800491a:	8afb      	ldrh	r3, [r7, #22]
 800491c:	4313      	orrs	r3, r2
 800491e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	8afa      	ldrh	r2, [r7, #22]
 8004926:	60da      	str	r2, [r3, #12]
 8004928:	e052      	b.n	80049d0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800492a:	2301      	movs	r3, #1
 800492c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004930:	e04e      	b.n	80049d0 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004932:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004936:	2b08      	cmp	r3, #8
 8004938:	d827      	bhi.n	800498a <UART_SetConfig+0x506>
 800493a:	a201      	add	r2, pc, #4	@ (adr r2, 8004940 <UART_SetConfig+0x4bc>)
 800493c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004940:	08004965 	.word	0x08004965
 8004944:	0800496d 	.word	0x0800496d
 8004948:	08004975 	.word	0x08004975
 800494c:	0800498b 	.word	0x0800498b
 8004950:	0800497b 	.word	0x0800497b
 8004954:	0800498b 	.word	0x0800498b
 8004958:	0800498b 	.word	0x0800498b
 800495c:	0800498b 	.word	0x0800498b
 8004960:	08004983 	.word	0x08004983
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004964:	f7fd fd96 	bl	8002494 <HAL_RCC_GetPCLK1Freq>
 8004968:	61f8      	str	r0, [r7, #28]
        break;
 800496a:	e014      	b.n	8004996 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800496c:	f7fd fda8 	bl	80024c0 <HAL_RCC_GetPCLK2Freq>
 8004970:	61f8      	str	r0, [r7, #28]
        break;
 8004972:	e010      	b.n	8004996 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004974:	4b1e      	ldr	r3, [pc, #120]	@ (80049f0 <UART_SetConfig+0x56c>)
 8004976:	61fb      	str	r3, [r7, #28]
        break;
 8004978:	e00d      	b.n	8004996 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800497a:	f7fd fcf3 	bl	8002364 <HAL_RCC_GetSysClockFreq>
 800497e:	61f8      	str	r0, [r7, #28]
        break;
 8004980:	e009      	b.n	8004996 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004982:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004986:	61fb      	str	r3, [r7, #28]
        break;
 8004988:	e005      	b.n	8004996 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800498a:	2300      	movs	r3, #0
 800498c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800498e:	2301      	movs	r3, #1
 8004990:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004994:	bf00      	nop
    }

    if (pclk != 0U)
 8004996:	69fb      	ldr	r3, [r7, #28]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d019      	beq.n	80049d0 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	685b      	ldr	r3, [r3, #4]
 80049a0:	085a      	lsrs	r2, r3, #1
 80049a2:	69fb      	ldr	r3, [r7, #28]
 80049a4:	441a      	add	r2, r3
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	685b      	ldr	r3, [r3, #4]
 80049aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80049ae:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80049b0:	69bb      	ldr	r3, [r7, #24]
 80049b2:	2b0f      	cmp	r3, #15
 80049b4:	d909      	bls.n	80049ca <UART_SetConfig+0x546>
 80049b6:	69bb      	ldr	r3, [r7, #24]
 80049b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80049bc:	d205      	bcs.n	80049ca <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80049be:	69bb      	ldr	r3, [r7, #24]
 80049c0:	b29a      	uxth	r2, r3
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	60da      	str	r2, [r3, #12]
 80049c8:	e002      	b.n	80049d0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80049ca:	2301      	movs	r3, #1
 80049cc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	2200      	movs	r2, #0
 80049d4:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	2200      	movs	r2, #0
 80049da:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80049dc:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80049e0:	4618      	mov	r0, r3
 80049e2:	3728      	adds	r7, #40	@ 0x28
 80049e4:	46bd      	mov	sp, r7
 80049e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80049ea:	bf00      	nop
 80049ec:	40008000 	.word	0x40008000
 80049f0:	00f42400 	.word	0x00f42400

080049f4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80049f4:	b480      	push	{r7}
 80049f6:	b083      	sub	sp, #12
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a00:	f003 0308 	and.w	r3, r3, #8
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d00a      	beq.n	8004a1e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	685b      	ldr	r3, [r3, #4]
 8004a0e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	430a      	orrs	r2, r1
 8004a1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a22:	f003 0301 	and.w	r3, r3, #1
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d00a      	beq.n	8004a40 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	685b      	ldr	r3, [r3, #4]
 8004a30:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	430a      	orrs	r2, r1
 8004a3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a44:	f003 0302 	and.w	r3, r3, #2
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d00a      	beq.n	8004a62 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	685b      	ldr	r3, [r3, #4]
 8004a52:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	430a      	orrs	r2, r1
 8004a60:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a66:	f003 0304 	and.w	r3, r3, #4
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d00a      	beq.n	8004a84 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	685b      	ldr	r3, [r3, #4]
 8004a74:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	430a      	orrs	r2, r1
 8004a82:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a88:	f003 0310 	and.w	r3, r3, #16
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d00a      	beq.n	8004aa6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	689b      	ldr	r3, [r3, #8]
 8004a96:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	430a      	orrs	r2, r1
 8004aa4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004aaa:	f003 0320 	and.w	r3, r3, #32
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d00a      	beq.n	8004ac8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	689b      	ldr	r3, [r3, #8]
 8004ab8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	430a      	orrs	r2, r1
 8004ac6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004acc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d01a      	beq.n	8004b0a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	685b      	ldr	r3, [r3, #4]
 8004ada:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	430a      	orrs	r2, r1
 8004ae8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004aee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004af2:	d10a      	bne.n	8004b0a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	685b      	ldr	r3, [r3, #4]
 8004afa:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	430a      	orrs	r2, r1
 8004b08:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d00a      	beq.n	8004b2c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	685b      	ldr	r3, [r3, #4]
 8004b1c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	430a      	orrs	r2, r1
 8004b2a:	605a      	str	r2, [r3, #4]
  }
}
 8004b2c:	bf00      	nop
 8004b2e:	370c      	adds	r7, #12
 8004b30:	46bd      	mov	sp, r7
 8004b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b36:	4770      	bx	lr

08004b38 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b098      	sub	sp, #96	@ 0x60
 8004b3c:	af02      	add	r7, sp, #8
 8004b3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2200      	movs	r2, #0
 8004b44:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004b48:	f7fc fbec 	bl	8001324 <HAL_GetTick>
 8004b4c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f003 0308 	and.w	r3, r3, #8
 8004b58:	2b08      	cmp	r3, #8
 8004b5a:	d12e      	bne.n	8004bba <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b5c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004b60:	9300      	str	r3, [sp, #0]
 8004b62:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b64:	2200      	movs	r2, #0
 8004b66:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004b6a:	6878      	ldr	r0, [r7, #4]
 8004b6c:	f000 f88c 	bl	8004c88 <UART_WaitOnFlagUntilTimeout>
 8004b70:	4603      	mov	r3, r0
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d021      	beq.n	8004bba <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b7e:	e853 3f00 	ldrex	r3, [r3]
 8004b82:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004b84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b86:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004b8a:	653b      	str	r3, [r7, #80]	@ 0x50
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	461a      	mov	r2, r3
 8004b92:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004b94:	647b      	str	r3, [r7, #68]	@ 0x44
 8004b96:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b98:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004b9a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004b9c:	e841 2300 	strex	r3, r2, [r1]
 8004ba0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004ba2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d1e6      	bne.n	8004b76 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2220      	movs	r2, #32
 8004bac:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004bb6:	2303      	movs	r3, #3
 8004bb8:	e062      	b.n	8004c80 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f003 0304 	and.w	r3, r3, #4
 8004bc4:	2b04      	cmp	r3, #4
 8004bc6:	d149      	bne.n	8004c5c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004bc8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004bcc:	9300      	str	r3, [sp, #0]
 8004bce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004bd6:	6878      	ldr	r0, [r7, #4]
 8004bd8:	f000 f856 	bl	8004c88 <UART_WaitOnFlagUntilTimeout>
 8004bdc:	4603      	mov	r3, r0
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d03c      	beq.n	8004c5c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004be8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bea:	e853 3f00 	ldrex	r3, [r3]
 8004bee:	623b      	str	r3, [r7, #32]
   return(result);
 8004bf0:	6a3b      	ldr	r3, [r7, #32]
 8004bf2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004bf6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	461a      	mov	r2, r3
 8004bfe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004c00:	633b      	str	r3, [r7, #48]	@ 0x30
 8004c02:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c04:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004c06:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004c08:	e841 2300 	strex	r3, r2, [r1]
 8004c0c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004c0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d1e6      	bne.n	8004be2 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	3308      	adds	r3, #8
 8004c1a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c1c:	693b      	ldr	r3, [r7, #16]
 8004c1e:	e853 3f00 	ldrex	r3, [r3]
 8004c22:	60fb      	str	r3, [r7, #12]
   return(result);
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	f023 0301 	bic.w	r3, r3, #1
 8004c2a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	3308      	adds	r3, #8
 8004c32:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004c34:	61fa      	str	r2, [r7, #28]
 8004c36:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c38:	69b9      	ldr	r1, [r7, #24]
 8004c3a:	69fa      	ldr	r2, [r7, #28]
 8004c3c:	e841 2300 	strex	r3, r2, [r1]
 8004c40:	617b      	str	r3, [r7, #20]
   return(result);
 8004c42:	697b      	ldr	r3, [r7, #20]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d1e5      	bne.n	8004c14 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2220      	movs	r2, #32
 8004c4c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2200      	movs	r2, #0
 8004c54:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c58:	2303      	movs	r3, #3
 8004c5a:	e011      	b.n	8004c80 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2220      	movs	r2, #32
 8004c60:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2220      	movs	r2, #32
 8004c66:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2200      	movs	r2, #0
 8004c74:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2200      	movs	r2, #0
 8004c7a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004c7e:	2300      	movs	r3, #0
}
 8004c80:	4618      	mov	r0, r3
 8004c82:	3758      	adds	r7, #88	@ 0x58
 8004c84:	46bd      	mov	sp, r7
 8004c86:	bd80      	pop	{r7, pc}

08004c88 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b084      	sub	sp, #16
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	60f8      	str	r0, [r7, #12]
 8004c90:	60b9      	str	r1, [r7, #8]
 8004c92:	603b      	str	r3, [r7, #0]
 8004c94:	4613      	mov	r3, r2
 8004c96:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c98:	e049      	b.n	8004d2e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c9a:	69bb      	ldr	r3, [r7, #24]
 8004c9c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004ca0:	d045      	beq.n	8004d2e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ca2:	f7fc fb3f 	bl	8001324 <HAL_GetTick>
 8004ca6:	4602      	mov	r2, r0
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	1ad3      	subs	r3, r2, r3
 8004cac:	69ba      	ldr	r2, [r7, #24]
 8004cae:	429a      	cmp	r2, r3
 8004cb0:	d302      	bcc.n	8004cb8 <UART_WaitOnFlagUntilTimeout+0x30>
 8004cb2:	69bb      	ldr	r3, [r7, #24]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d101      	bne.n	8004cbc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004cb8:	2303      	movs	r3, #3
 8004cba:	e048      	b.n	8004d4e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f003 0304 	and.w	r3, r3, #4
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d031      	beq.n	8004d2e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	69db      	ldr	r3, [r3, #28]
 8004cd0:	f003 0308 	and.w	r3, r3, #8
 8004cd4:	2b08      	cmp	r3, #8
 8004cd6:	d110      	bne.n	8004cfa <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	2208      	movs	r2, #8
 8004cde:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004ce0:	68f8      	ldr	r0, [r7, #12]
 8004ce2:	f000 f838 	bl	8004d56 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	2208      	movs	r2, #8
 8004cea:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	e029      	b.n	8004d4e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	69db      	ldr	r3, [r3, #28]
 8004d00:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004d04:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004d08:	d111      	bne.n	8004d2e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004d12:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004d14:	68f8      	ldr	r0, [r7, #12]
 8004d16:	f000 f81e 	bl	8004d56 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	2220      	movs	r2, #32
 8004d1e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	2200      	movs	r2, #0
 8004d26:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004d2a:	2303      	movs	r3, #3
 8004d2c:	e00f      	b.n	8004d4e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	69da      	ldr	r2, [r3, #28]
 8004d34:	68bb      	ldr	r3, [r7, #8]
 8004d36:	4013      	ands	r3, r2
 8004d38:	68ba      	ldr	r2, [r7, #8]
 8004d3a:	429a      	cmp	r2, r3
 8004d3c:	bf0c      	ite	eq
 8004d3e:	2301      	moveq	r3, #1
 8004d40:	2300      	movne	r3, #0
 8004d42:	b2db      	uxtb	r3, r3
 8004d44:	461a      	mov	r2, r3
 8004d46:	79fb      	ldrb	r3, [r7, #7]
 8004d48:	429a      	cmp	r2, r3
 8004d4a:	d0a6      	beq.n	8004c9a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004d4c:	2300      	movs	r3, #0
}
 8004d4e:	4618      	mov	r0, r3
 8004d50:	3710      	adds	r7, #16
 8004d52:	46bd      	mov	sp, r7
 8004d54:	bd80      	pop	{r7, pc}

08004d56 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004d56:	b480      	push	{r7}
 8004d58:	b095      	sub	sp, #84	@ 0x54
 8004d5a:	af00      	add	r7, sp, #0
 8004d5c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d66:	e853 3f00 	ldrex	r3, [r3]
 8004d6a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004d6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d6e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004d72:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	461a      	mov	r2, r3
 8004d7a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004d7c:	643b      	str	r3, [r7, #64]	@ 0x40
 8004d7e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d80:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004d82:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004d84:	e841 2300 	strex	r3, r2, [r1]
 8004d88:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004d8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d1e6      	bne.n	8004d5e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	3308      	adds	r3, #8
 8004d96:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d98:	6a3b      	ldr	r3, [r7, #32]
 8004d9a:	e853 3f00 	ldrex	r3, [r3]
 8004d9e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004da0:	69fb      	ldr	r3, [r7, #28]
 8004da2:	f023 0301 	bic.w	r3, r3, #1
 8004da6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	3308      	adds	r3, #8
 8004dae:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004db0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004db2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004db4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004db6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004db8:	e841 2300 	strex	r3, r2, [r1]
 8004dbc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004dbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d1e5      	bne.n	8004d90 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004dc8:	2b01      	cmp	r3, #1
 8004dca:	d118      	bne.n	8004dfe <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	e853 3f00 	ldrex	r3, [r3]
 8004dd8:	60bb      	str	r3, [r7, #8]
   return(result);
 8004dda:	68bb      	ldr	r3, [r7, #8]
 8004ddc:	f023 0310 	bic.w	r3, r3, #16
 8004de0:	647b      	str	r3, [r7, #68]	@ 0x44
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	461a      	mov	r2, r3
 8004de8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004dea:	61bb      	str	r3, [r7, #24]
 8004dec:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dee:	6979      	ldr	r1, [r7, #20]
 8004df0:	69ba      	ldr	r2, [r7, #24]
 8004df2:	e841 2300 	strex	r3, r2, [r1]
 8004df6:	613b      	str	r3, [r7, #16]
   return(result);
 8004df8:	693b      	ldr	r3, [r7, #16]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d1e6      	bne.n	8004dcc <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2220      	movs	r2, #32
 8004e02:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2200      	movs	r2, #0
 8004e0a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2200      	movs	r2, #0
 8004e10:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004e12:	bf00      	nop
 8004e14:	3754      	adds	r7, #84	@ 0x54
 8004e16:	46bd      	mov	sp, r7
 8004e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1c:	4770      	bx	lr
	...

08004e20 <WIZCHIP_READ>:

#if   (_WIZCHIP_ == 5500)
////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b084      	sub	sp, #16
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
   uint8_t ret;
   uint8_t spi_data[3];

   WIZCHIP_CRITICAL_ENTER();
 8004e28:	4b22      	ldr	r3, [pc, #136]	@ (8004eb4 <WIZCHIP_READ+0x94>)
 8004e2a:	68db      	ldr	r3, [r3, #12]
 8004e2c:	4798      	blx	r3
   WIZCHIP.CS._select();
 8004e2e:	4b21      	ldr	r3, [pc, #132]	@ (8004eb4 <WIZCHIP_READ+0x94>)
 8004e30:	695b      	ldr	r3, [r3, #20]
 8004e32:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8004e34:	4b1f      	ldr	r3, [pc, #124]	@ (8004eb4 <WIZCHIP_READ+0x94>)
 8004e36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d003      	beq.n	8004e44 <WIZCHIP_READ+0x24>
 8004e3c:	4b1d      	ldr	r3, [pc, #116]	@ (8004eb4 <WIZCHIP_READ+0x94>)
 8004e3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d114      	bne.n	8004e6e <WIZCHIP_READ+0x4e>
   {
	   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8004e44:	4b1b      	ldr	r3, [pc, #108]	@ (8004eb4 <WIZCHIP_READ+0x94>)
 8004e46:	6a1b      	ldr	r3, [r3, #32]
 8004e48:	687a      	ldr	r2, [r7, #4]
 8004e4a:	0c12      	lsrs	r2, r2, #16
 8004e4c:	b2d2      	uxtb	r2, r2
 8004e4e:	4610      	mov	r0, r2
 8004e50:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8004e52:	4b18      	ldr	r3, [pc, #96]	@ (8004eb4 <WIZCHIP_READ+0x94>)
 8004e54:	6a1b      	ldr	r3, [r3, #32]
 8004e56:	687a      	ldr	r2, [r7, #4]
 8004e58:	0a12      	lsrs	r2, r2, #8
 8004e5a:	b2d2      	uxtb	r2, r2
 8004e5c:	4610      	mov	r0, r2
 8004e5e:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8004e60:	4b14      	ldr	r3, [pc, #80]	@ (8004eb4 <WIZCHIP_READ+0x94>)
 8004e62:	6a1b      	ldr	r3, [r3, #32]
 8004e64:	687a      	ldr	r2, [r7, #4]
 8004e66:	b2d2      	uxtb	r2, r2
 8004e68:	4610      	mov	r0, r2
 8004e6a:	4798      	blx	r3
 8004e6c:	e011      	b.n	8004e92 <WIZCHIP_READ+0x72>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	0c1b      	lsrs	r3, r3, #16
 8004e72:	b2db      	uxtb	r3, r3
 8004e74:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	0a1b      	lsrs	r3, r3, #8
 8004e7a:	b2db      	uxtb	r3, r3
 8004e7c:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	b2db      	uxtb	r3, r3
 8004e82:	73bb      	strb	r3, [r7, #14]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8004e84:	4b0b      	ldr	r3, [pc, #44]	@ (8004eb4 <WIZCHIP_READ+0x94>)
 8004e86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e88:	f107 020c 	add.w	r2, r7, #12
 8004e8c:	2103      	movs	r1, #3
 8004e8e:	4610      	mov	r0, r2
 8004e90:	4798      	blx	r3
   }
   ret = WIZCHIP.IF.SPI._read_byte();
 8004e92:	4b08      	ldr	r3, [pc, #32]	@ (8004eb4 <WIZCHIP_READ+0x94>)
 8004e94:	69db      	ldr	r3, [r3, #28]
 8004e96:	4798      	blx	r3
 8004e98:	4603      	mov	r3, r0
 8004e9a:	73fb      	strb	r3, [r7, #15]

   WIZCHIP.CS._deselect();
 8004e9c:	4b05      	ldr	r3, [pc, #20]	@ (8004eb4 <WIZCHIP_READ+0x94>)
 8004e9e:	699b      	ldr	r3, [r3, #24]
 8004ea0:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8004ea2:	4b04      	ldr	r3, [pc, #16]	@ (8004eb4 <WIZCHIP_READ+0x94>)
 8004ea4:	691b      	ldr	r3, [r3, #16]
 8004ea6:	4798      	blx	r3
   return ret;
 8004ea8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004eaa:	4618      	mov	r0, r3
 8004eac:	3710      	adds	r7, #16
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	bd80      	pop	{r7, pc}
 8004eb2:	bf00      	nop
 8004eb4:	20000020 	.word	0x20000020

08004eb8 <WIZCHIP_WRITE>:

void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b084      	sub	sp, #16
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
 8004ec0:	460b      	mov	r3, r1
 8004ec2:	70fb      	strb	r3, [r7, #3]
   uint8_t spi_data[4];

   WIZCHIP_CRITICAL_ENTER();
 8004ec4:	4b22      	ldr	r3, [pc, #136]	@ (8004f50 <WIZCHIP_WRITE+0x98>)
 8004ec6:	68db      	ldr	r3, [r3, #12]
 8004ec8:	4798      	blx	r3
   WIZCHIP.CS._select();
 8004eca:	4b21      	ldr	r3, [pc, #132]	@ (8004f50 <WIZCHIP_WRITE+0x98>)
 8004ecc:	695b      	ldr	r3, [r3, #20]
 8004ece:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	f043 0304 	orr.w	r3, r3, #4
 8004ed6:	607b      	str	r3, [r7, #4]

   //if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8004ed8:	4b1d      	ldr	r3, [pc, #116]	@ (8004f50 <WIZCHIP_WRITE+0x98>)
 8004eda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d119      	bne.n	8004f14 <WIZCHIP_WRITE+0x5c>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8004ee0:	4b1b      	ldr	r3, [pc, #108]	@ (8004f50 <WIZCHIP_WRITE+0x98>)
 8004ee2:	6a1b      	ldr	r3, [r3, #32]
 8004ee4:	687a      	ldr	r2, [r7, #4]
 8004ee6:	0c12      	lsrs	r2, r2, #16
 8004ee8:	b2d2      	uxtb	r2, r2
 8004eea:	4610      	mov	r0, r2
 8004eec:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8004eee:	4b18      	ldr	r3, [pc, #96]	@ (8004f50 <WIZCHIP_WRITE+0x98>)
 8004ef0:	6a1b      	ldr	r3, [r3, #32]
 8004ef2:	687a      	ldr	r2, [r7, #4]
 8004ef4:	0a12      	lsrs	r2, r2, #8
 8004ef6:	b2d2      	uxtb	r2, r2
 8004ef8:	4610      	mov	r0, r2
 8004efa:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8004efc:	4b14      	ldr	r3, [pc, #80]	@ (8004f50 <WIZCHIP_WRITE+0x98>)
 8004efe:	6a1b      	ldr	r3, [r3, #32]
 8004f00:	687a      	ldr	r2, [r7, #4]
 8004f02:	b2d2      	uxtb	r2, r2
 8004f04:	4610      	mov	r0, r2
 8004f06:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte(wb);
 8004f08:	4b11      	ldr	r3, [pc, #68]	@ (8004f50 <WIZCHIP_WRITE+0x98>)
 8004f0a:	6a1b      	ldr	r3, [r3, #32]
 8004f0c:	78fa      	ldrb	r2, [r7, #3]
 8004f0e:	4610      	mov	r0, r2
 8004f10:	4798      	blx	r3
 8004f12:	e013      	b.n	8004f3c <WIZCHIP_WRITE+0x84>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	0c1b      	lsrs	r3, r3, #16
 8004f18:	b2db      	uxtb	r3, r3
 8004f1a:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	0a1b      	lsrs	r3, r3, #8
 8004f20:	b2db      	uxtb	r3, r3
 8004f22:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	b2db      	uxtb	r3, r3
 8004f28:	73bb      	strb	r3, [r7, #14]
		spi_data[3] = wb;
 8004f2a:	78fb      	ldrb	r3, [r7, #3]
 8004f2c:	73fb      	strb	r3, [r7, #15]
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
 8004f2e:	4b08      	ldr	r3, [pc, #32]	@ (8004f50 <WIZCHIP_WRITE+0x98>)
 8004f30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f32:	f107 020c 	add.w	r2, r7, #12
 8004f36:	2104      	movs	r1, #4
 8004f38:	4610      	mov	r0, r2
 8004f3a:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8004f3c:	4b04      	ldr	r3, [pc, #16]	@ (8004f50 <WIZCHIP_WRITE+0x98>)
 8004f3e:	699b      	ldr	r3, [r3, #24]
 8004f40:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8004f42:	4b03      	ldr	r3, [pc, #12]	@ (8004f50 <WIZCHIP_WRITE+0x98>)
 8004f44:	691b      	ldr	r3, [r3, #16]
 8004f46:	4798      	blx	r3
}
 8004f48:	bf00      	nop
 8004f4a:	3710      	adds	r7, #16
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	bd80      	pop	{r7, pc}
 8004f50:	20000020 	.word	0x20000020

08004f54 <WIZCHIP_READ_BUF>:
         
void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8004f54:	b590      	push	{r4, r7, lr}
 8004f56:	b087      	sub	sp, #28
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	60f8      	str	r0, [r7, #12]
 8004f5c:	60b9      	str	r1, [r7, #8]
 8004f5e:	4613      	mov	r3, r2
 8004f60:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 8004f62:	4b2b      	ldr	r3, [pc, #172]	@ (8005010 <WIZCHIP_READ_BUF+0xbc>)
 8004f64:	68db      	ldr	r3, [r3, #12]
 8004f66:	4798      	blx	r3
   WIZCHIP.CS._select();
 8004f68:	4b29      	ldr	r3, [pc, #164]	@ (8005010 <WIZCHIP_READ_BUF+0xbc>)
 8004f6a:	695b      	ldr	r3, [r3, #20]
 8004f6c:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8004f6e:	4b28      	ldr	r3, [pc, #160]	@ (8005010 <WIZCHIP_READ_BUF+0xbc>)
 8004f70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d003      	beq.n	8004f7e <WIZCHIP_READ_BUF+0x2a>
 8004f76:	4b26      	ldr	r3, [pc, #152]	@ (8005010 <WIZCHIP_READ_BUF+0xbc>)
 8004f78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d126      	bne.n	8004fcc <WIZCHIP_READ_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8004f7e:	4b24      	ldr	r3, [pc, #144]	@ (8005010 <WIZCHIP_READ_BUF+0xbc>)
 8004f80:	6a1b      	ldr	r3, [r3, #32]
 8004f82:	68fa      	ldr	r2, [r7, #12]
 8004f84:	0c12      	lsrs	r2, r2, #16
 8004f86:	b2d2      	uxtb	r2, r2
 8004f88:	4610      	mov	r0, r2
 8004f8a:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8004f8c:	4b20      	ldr	r3, [pc, #128]	@ (8005010 <WIZCHIP_READ_BUF+0xbc>)
 8004f8e:	6a1b      	ldr	r3, [r3, #32]
 8004f90:	68fa      	ldr	r2, [r7, #12]
 8004f92:	0a12      	lsrs	r2, r2, #8
 8004f94:	b2d2      	uxtb	r2, r2
 8004f96:	4610      	mov	r0, r2
 8004f98:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8004f9a:	4b1d      	ldr	r3, [pc, #116]	@ (8005010 <WIZCHIP_READ_BUF+0xbc>)
 8004f9c:	6a1b      	ldr	r3, [r3, #32]
 8004f9e:	68fa      	ldr	r2, [r7, #12]
 8004fa0:	b2d2      	uxtb	r2, r2
 8004fa2:	4610      	mov	r0, r2
 8004fa4:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	82fb      	strh	r3, [r7, #22]
 8004faa:	e00a      	b.n	8004fc2 <WIZCHIP_READ_BUF+0x6e>
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
 8004fac:	4b18      	ldr	r3, [pc, #96]	@ (8005010 <WIZCHIP_READ_BUF+0xbc>)
 8004fae:	69db      	ldr	r3, [r3, #28]
 8004fb0:	8afa      	ldrh	r2, [r7, #22]
 8004fb2:	68b9      	ldr	r1, [r7, #8]
 8004fb4:	188c      	adds	r4, r1, r2
 8004fb6:	4798      	blx	r3
 8004fb8:	4603      	mov	r3, r0
 8004fba:	7023      	strb	r3, [r4, #0]
		for(i = 0; i < len; i++)
 8004fbc:	8afb      	ldrh	r3, [r7, #22]
 8004fbe:	3301      	adds	r3, #1
 8004fc0:	82fb      	strh	r3, [r7, #22]
 8004fc2:	8afa      	ldrh	r2, [r7, #22]
 8004fc4:	88fb      	ldrh	r3, [r7, #6]
 8004fc6:	429a      	cmp	r2, r3
 8004fc8:	d3f0      	bcc.n	8004fac <WIZCHIP_READ_BUF+0x58>
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8004fca:	e017      	b.n	8004ffc <WIZCHIP_READ_BUF+0xa8>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	0c1b      	lsrs	r3, r3, #16
 8004fd0:	b2db      	uxtb	r3, r3
 8004fd2:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	0a1b      	lsrs	r3, r3, #8
 8004fd8:	b2db      	uxtb	r3, r3
 8004fda:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	b2db      	uxtb	r3, r3
 8004fe0:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8004fe2:	4b0b      	ldr	r3, [pc, #44]	@ (8005010 <WIZCHIP_READ_BUF+0xbc>)
 8004fe4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fe6:	f107 0210 	add.w	r2, r7, #16
 8004fea:	2103      	movs	r1, #3
 8004fec:	4610      	mov	r0, r2
 8004fee:	4798      	blx	r3
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
 8004ff0:	4b07      	ldr	r3, [pc, #28]	@ (8005010 <WIZCHIP_READ_BUF+0xbc>)
 8004ff2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ff4:	88fa      	ldrh	r2, [r7, #6]
 8004ff6:	4611      	mov	r1, r2
 8004ff8:	68b8      	ldr	r0, [r7, #8]
 8004ffa:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8004ffc:	4b04      	ldr	r3, [pc, #16]	@ (8005010 <WIZCHIP_READ_BUF+0xbc>)
 8004ffe:	699b      	ldr	r3, [r3, #24]
 8005000:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8005002:	4b03      	ldr	r3, [pc, #12]	@ (8005010 <WIZCHIP_READ_BUF+0xbc>)
 8005004:	691b      	ldr	r3, [r3, #16]
 8005006:	4798      	blx	r3
}
 8005008:	bf00      	nop
 800500a:	371c      	adds	r7, #28
 800500c:	46bd      	mov	sp, r7
 800500e:	bd90      	pop	{r4, r7, pc}
 8005010:	20000020 	.word	0x20000020

08005014 <WIZCHIP_WRITE_BUF>:

void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b086      	sub	sp, #24
 8005018:	af00      	add	r7, sp, #0
 800501a:	60f8      	str	r0, [r7, #12]
 800501c:	60b9      	str	r1, [r7, #8]
 800501e:	4613      	mov	r3, r2
 8005020:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 8005022:	4b2b      	ldr	r3, [pc, #172]	@ (80050d0 <WIZCHIP_WRITE_BUF+0xbc>)
 8005024:	68db      	ldr	r3, [r3, #12]
 8005026:	4798      	blx	r3
   WIZCHIP.CS._select();
 8005028:	4b29      	ldr	r3, [pc, #164]	@ (80050d0 <WIZCHIP_WRITE_BUF+0xbc>)
 800502a:	695b      	ldr	r3, [r3, #20]
 800502c:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	f043 0304 	orr.w	r3, r3, #4
 8005034:	60fb      	str	r3, [r7, #12]

   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8005036:	4b26      	ldr	r3, [pc, #152]	@ (80050d0 <WIZCHIP_WRITE_BUF+0xbc>)
 8005038:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800503a:	2b00      	cmp	r3, #0
 800503c:	d126      	bne.n	800508c <WIZCHIP_WRITE_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 800503e:	4b24      	ldr	r3, [pc, #144]	@ (80050d0 <WIZCHIP_WRITE_BUF+0xbc>)
 8005040:	6a1b      	ldr	r3, [r3, #32]
 8005042:	68fa      	ldr	r2, [r7, #12]
 8005044:	0c12      	lsrs	r2, r2, #16
 8005046:	b2d2      	uxtb	r2, r2
 8005048:	4610      	mov	r0, r2
 800504a:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 800504c:	4b20      	ldr	r3, [pc, #128]	@ (80050d0 <WIZCHIP_WRITE_BUF+0xbc>)
 800504e:	6a1b      	ldr	r3, [r3, #32]
 8005050:	68fa      	ldr	r2, [r7, #12]
 8005052:	0a12      	lsrs	r2, r2, #8
 8005054:	b2d2      	uxtb	r2, r2
 8005056:	4610      	mov	r0, r2
 8005058:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 800505a:	4b1d      	ldr	r3, [pc, #116]	@ (80050d0 <WIZCHIP_WRITE_BUF+0xbc>)
 800505c:	6a1b      	ldr	r3, [r3, #32]
 800505e:	68fa      	ldr	r2, [r7, #12]
 8005060:	b2d2      	uxtb	r2, r2
 8005062:	4610      	mov	r0, r2
 8005064:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8005066:	2300      	movs	r3, #0
 8005068:	82fb      	strh	r3, [r7, #22]
 800506a:	e00a      	b.n	8005082 <WIZCHIP_WRITE_BUF+0x6e>
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
 800506c:	4b18      	ldr	r3, [pc, #96]	@ (80050d0 <WIZCHIP_WRITE_BUF+0xbc>)
 800506e:	6a1b      	ldr	r3, [r3, #32]
 8005070:	8afa      	ldrh	r2, [r7, #22]
 8005072:	68b9      	ldr	r1, [r7, #8]
 8005074:	440a      	add	r2, r1
 8005076:	7812      	ldrb	r2, [r2, #0]
 8005078:	4610      	mov	r0, r2
 800507a:	4798      	blx	r3
		for(i = 0; i < len; i++)
 800507c:	8afb      	ldrh	r3, [r7, #22]
 800507e:	3301      	adds	r3, #1
 8005080:	82fb      	strh	r3, [r7, #22]
 8005082:	8afa      	ldrh	r2, [r7, #22]
 8005084:	88fb      	ldrh	r3, [r7, #6]
 8005086:	429a      	cmp	r2, r3
 8005088:	d3f0      	bcc.n	800506c <WIZCHIP_WRITE_BUF+0x58>
 800508a:	e017      	b.n	80050bc <WIZCHIP_WRITE_BUF+0xa8>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	0c1b      	lsrs	r3, r3, #16
 8005090:	b2db      	uxtb	r3, r3
 8005092:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	0a1b      	lsrs	r3, r3, #8
 8005098:	b2db      	uxtb	r3, r3
 800509a:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	b2db      	uxtb	r3, r3
 80050a0:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 80050a2:	4b0b      	ldr	r3, [pc, #44]	@ (80050d0 <WIZCHIP_WRITE_BUF+0xbc>)
 80050a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050a6:	f107 0210 	add.w	r2, r7, #16
 80050aa:	2103      	movs	r1, #3
 80050ac:	4610      	mov	r0, r2
 80050ae:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
 80050b0:	4b07      	ldr	r3, [pc, #28]	@ (80050d0 <WIZCHIP_WRITE_BUF+0xbc>)
 80050b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050b4:	88fa      	ldrh	r2, [r7, #6]
 80050b6:	4611      	mov	r1, r2
 80050b8:	68b8      	ldr	r0, [r7, #8]
 80050ba:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 80050bc:	4b04      	ldr	r3, [pc, #16]	@ (80050d0 <WIZCHIP_WRITE_BUF+0xbc>)
 80050be:	699b      	ldr	r3, [r3, #24]
 80050c0:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80050c2:	4b03      	ldr	r3, [pc, #12]	@ (80050d0 <WIZCHIP_WRITE_BUF+0xbc>)
 80050c4:	691b      	ldr	r3, [r3, #16]
 80050c6:	4798      	blx	r3
}
 80050c8:	bf00      	nop
 80050ca:	3718      	adds	r7, #24
 80050cc:	46bd      	mov	sp, r7
 80050ce:	bd80      	pop	{r7, pc}
 80050d0:	20000020 	.word	0x20000020

080050d4 <getSn_TX_FSR>:


uint16_t getSn_TX_FSR(uint8_t sn)
{
 80050d4:	b590      	push	{r4, r7, lr}
 80050d6:	b085      	sub	sp, #20
 80050d8:	af00      	add	r7, sp, #0
 80050da:	4603      	mov	r3, r0
 80050dc:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 80050de:	2300      	movs	r3, #0
 80050e0:	81fb      	strh	r3, [r7, #14]
 80050e2:	2300      	movs	r3, #0
 80050e4:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
 80050e6:	79fb      	ldrb	r3, [r7, #7]
 80050e8:	009b      	lsls	r3, r3, #2
 80050ea:	3301      	adds	r3, #1
 80050ec:	00db      	lsls	r3, r3, #3
 80050ee:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80050f2:	4618      	mov	r0, r3
 80050f4:	f7ff fe94 	bl	8004e20 <WIZCHIP_READ>
 80050f8:	4603      	mov	r3, r0
 80050fa:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 80050fc:	89bb      	ldrh	r3, [r7, #12]
 80050fe:	021b      	lsls	r3, r3, #8
 8005100:	b29c      	uxth	r4, r3
 8005102:	79fb      	ldrb	r3, [r7, #7]
 8005104:	009b      	lsls	r3, r3, #2
 8005106:	3301      	adds	r3, #1
 8005108:	00db      	lsls	r3, r3, #3
 800510a:	f503 5304 	add.w	r3, r3, #8448	@ 0x2100
 800510e:	4618      	mov	r0, r3
 8005110:	f7ff fe86 	bl	8004e20 <WIZCHIP_READ>
 8005114:	4603      	mov	r3, r0
 8005116:	4423      	add	r3, r4
 8005118:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 800511a:	89bb      	ldrh	r3, [r7, #12]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d019      	beq.n	8005154 <getSn_TX_FSR+0x80>
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
 8005120:	79fb      	ldrb	r3, [r7, #7]
 8005122:	009b      	lsls	r3, r3, #2
 8005124:	3301      	adds	r3, #1
 8005126:	00db      	lsls	r3, r3, #3
 8005128:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800512c:	4618      	mov	r0, r3
 800512e:	f7ff fe77 	bl	8004e20 <WIZCHIP_READ>
 8005132:	4603      	mov	r3, r0
 8005134:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8005136:	89fb      	ldrh	r3, [r7, #14]
 8005138:	021b      	lsls	r3, r3, #8
 800513a:	b29c      	uxth	r4, r3
 800513c:	79fb      	ldrb	r3, [r7, #7]
 800513e:	009b      	lsls	r3, r3, #2
 8005140:	3301      	adds	r3, #1
 8005142:	00db      	lsls	r3, r3, #3
 8005144:	f503 5304 	add.w	r3, r3, #8448	@ 0x2100
 8005148:	4618      	mov	r0, r3
 800514a:	f7ff fe69 	bl	8004e20 <WIZCHIP_READ>
 800514e:	4603      	mov	r3, r0
 8005150:	4423      	add	r3, r4
 8005152:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 8005154:	89fa      	ldrh	r2, [r7, #14]
 8005156:	89bb      	ldrh	r3, [r7, #12]
 8005158:	429a      	cmp	r2, r3
 800515a:	d1c4      	bne.n	80050e6 <getSn_TX_FSR+0x12>
   return val;
 800515c:	89fb      	ldrh	r3, [r7, #14]
}
 800515e:	4618      	mov	r0, r3
 8005160:	3714      	adds	r7, #20
 8005162:	46bd      	mov	sp, r7
 8005164:	bd90      	pop	{r4, r7, pc}

08005166 <getSn_RX_RSR>:


uint16_t getSn_RX_RSR(uint8_t sn)
{
 8005166:	b590      	push	{r4, r7, lr}
 8005168:	b085      	sub	sp, #20
 800516a:	af00      	add	r7, sp, #0
 800516c:	4603      	mov	r3, r0
 800516e:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 8005170:	2300      	movs	r3, #0
 8005172:	81fb      	strh	r3, [r7, #14]
 8005174:	2300      	movs	r3, #0
 8005176:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
 8005178:	79fb      	ldrb	r3, [r7, #7]
 800517a:	009b      	lsls	r3, r3, #2
 800517c:	3301      	adds	r3, #1
 800517e:	00db      	lsls	r3, r3, #3
 8005180:	f503 5318 	add.w	r3, r3, #9728	@ 0x2600
 8005184:	4618      	mov	r0, r3
 8005186:	f7ff fe4b 	bl	8004e20 <WIZCHIP_READ>
 800518a:	4603      	mov	r3, r0
 800518c:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 800518e:	89bb      	ldrh	r3, [r7, #12]
 8005190:	021b      	lsls	r3, r3, #8
 8005192:	b29c      	uxth	r4, r3
 8005194:	79fb      	ldrb	r3, [r7, #7]
 8005196:	009b      	lsls	r3, r3, #2
 8005198:	3301      	adds	r3, #1
 800519a:	00db      	lsls	r3, r3, #3
 800519c:	f503 531c 	add.w	r3, r3, #9984	@ 0x2700
 80051a0:	4618      	mov	r0, r3
 80051a2:	f7ff fe3d 	bl	8004e20 <WIZCHIP_READ>
 80051a6:	4603      	mov	r3, r0
 80051a8:	4423      	add	r3, r4
 80051aa:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 80051ac:	89bb      	ldrh	r3, [r7, #12]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d019      	beq.n	80051e6 <getSn_RX_RSR+0x80>
      {
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
 80051b2:	79fb      	ldrb	r3, [r7, #7]
 80051b4:	009b      	lsls	r3, r3, #2
 80051b6:	3301      	adds	r3, #1
 80051b8:	00db      	lsls	r3, r3, #3
 80051ba:	f503 5318 	add.w	r3, r3, #9728	@ 0x2600
 80051be:	4618      	mov	r0, r3
 80051c0:	f7ff fe2e 	bl	8004e20 <WIZCHIP_READ>
 80051c4:	4603      	mov	r3, r0
 80051c6:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 80051c8:	89fb      	ldrh	r3, [r7, #14]
 80051ca:	021b      	lsls	r3, r3, #8
 80051cc:	b29c      	uxth	r4, r3
 80051ce:	79fb      	ldrb	r3, [r7, #7]
 80051d0:	009b      	lsls	r3, r3, #2
 80051d2:	3301      	adds	r3, #1
 80051d4:	00db      	lsls	r3, r3, #3
 80051d6:	f503 531c 	add.w	r3, r3, #9984	@ 0x2700
 80051da:	4618      	mov	r0, r3
 80051dc:	f7ff fe20 	bl	8004e20 <WIZCHIP_READ>
 80051e0:	4603      	mov	r3, r0
 80051e2:	4423      	add	r3, r4
 80051e4:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 80051e6:	89fa      	ldrh	r2, [r7, #14]
 80051e8:	89bb      	ldrh	r3, [r7, #12]
 80051ea:	429a      	cmp	r2, r3
 80051ec:	d1c4      	bne.n	8005178 <getSn_RX_RSR+0x12>
   return val;
 80051ee:	89fb      	ldrh	r3, [r7, #14]
}
 80051f0:	4618      	mov	r0, r3
 80051f2:	3714      	adds	r7, #20
 80051f4:	46bd      	mov	sp, r7
 80051f6:	bd90      	pop	{r4, r7, pc}

080051f8 <wiz_send_data>:

void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 80051f8:	b590      	push	{r4, r7, lr}
 80051fa:	b085      	sub	sp, #20
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	4603      	mov	r3, r0
 8005200:	6039      	str	r1, [r7, #0]
 8005202:	71fb      	strb	r3, [r7, #7]
 8005204:	4613      	mov	r3, r2
 8005206:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8005208:	2300      	movs	r3, #0
 800520a:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 800520c:	2300      	movs	r3, #0
 800520e:	60bb      	str	r3, [r7, #8]

   if(len == 0)  return;
 8005210:	88bb      	ldrh	r3, [r7, #4]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d046      	beq.n	80052a4 <wiz_send_data+0xac>
   ptr = getSn_TX_WR(sn);
 8005216:	79fb      	ldrb	r3, [r7, #7]
 8005218:	009b      	lsls	r3, r3, #2
 800521a:	3301      	adds	r3, #1
 800521c:	00db      	lsls	r3, r3, #3
 800521e:	f503 5310 	add.w	r3, r3, #9216	@ 0x2400
 8005222:	4618      	mov	r0, r3
 8005224:	f7ff fdfc 	bl	8004e20 <WIZCHIP_READ>
 8005228:	4603      	mov	r3, r0
 800522a:	021b      	lsls	r3, r3, #8
 800522c:	b29c      	uxth	r4, r3
 800522e:	79fb      	ldrb	r3, [r7, #7]
 8005230:	009b      	lsls	r3, r3, #2
 8005232:	3301      	adds	r3, #1
 8005234:	00db      	lsls	r3, r3, #3
 8005236:	f503 5314 	add.w	r3, r3, #9472	@ 0x2500
 800523a:	4618      	mov	r0, r3
 800523c:	f7ff fdf0 	bl	8004e20 <WIZCHIP_READ>
 8005240:	4603      	mov	r3, r0
 8005242:	4423      	add	r3, r4
 8005244:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = (ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
 8005246:	89fb      	ldrh	r3, [r7, #14]
 8005248:	021b      	lsls	r3, r3, #8
 800524a:	79fa      	ldrb	r2, [r7, #7]
 800524c:	0092      	lsls	r2, r2, #2
 800524e:	3202      	adds	r2, #2
 8005250:	00d2      	lsls	r2, r2, #3
 8005252:	4413      	add	r3, r2
 8005254:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
 8005256:	88bb      	ldrh	r3, [r7, #4]
 8005258:	461a      	mov	r2, r3
 800525a:	6839      	ldr	r1, [r7, #0]
 800525c:	68b8      	ldr	r0, [r7, #8]
 800525e:	f7ff fed9 	bl	8005014 <WIZCHIP_WRITE_BUF>
   
   ptr += len;
 8005262:	89fa      	ldrh	r2, [r7, #14]
 8005264:	88bb      	ldrh	r3, [r7, #4]
 8005266:	4413      	add	r3, r2
 8005268:	81fb      	strh	r3, [r7, #14]
   setSn_TX_WR(sn,ptr);
 800526a:	79fb      	ldrb	r3, [r7, #7]
 800526c:	009b      	lsls	r3, r3, #2
 800526e:	3301      	adds	r3, #1
 8005270:	00db      	lsls	r3, r3, #3
 8005272:	f503 5310 	add.w	r3, r3, #9216	@ 0x2400
 8005276:	461a      	mov	r2, r3
 8005278:	89fb      	ldrh	r3, [r7, #14]
 800527a:	0a1b      	lsrs	r3, r3, #8
 800527c:	b29b      	uxth	r3, r3
 800527e:	b2db      	uxtb	r3, r3
 8005280:	4619      	mov	r1, r3
 8005282:	4610      	mov	r0, r2
 8005284:	f7ff fe18 	bl	8004eb8 <WIZCHIP_WRITE>
 8005288:	79fb      	ldrb	r3, [r7, #7]
 800528a:	009b      	lsls	r3, r3, #2
 800528c:	3301      	adds	r3, #1
 800528e:	00db      	lsls	r3, r3, #3
 8005290:	f503 5314 	add.w	r3, r3, #9472	@ 0x2500
 8005294:	461a      	mov	r2, r3
 8005296:	89fb      	ldrh	r3, [r7, #14]
 8005298:	b2db      	uxtb	r3, r3
 800529a:	4619      	mov	r1, r3
 800529c:	4610      	mov	r0, r2
 800529e:	f7ff fe0b 	bl	8004eb8 <WIZCHIP_WRITE>
 80052a2:	e000      	b.n	80052a6 <wiz_send_data+0xae>
   if(len == 0)  return;
 80052a4:	bf00      	nop
}
 80052a6:	3714      	adds	r7, #20
 80052a8:	46bd      	mov	sp, r7
 80052aa:	bd90      	pop	{r4, r7, pc}

080052ac <wiz_recv_data>:

void wiz_recv_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 80052ac:	b590      	push	{r4, r7, lr}
 80052ae:	b085      	sub	sp, #20
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	4603      	mov	r3, r0
 80052b4:	6039      	str	r1, [r7, #0]
 80052b6:	71fb      	strb	r3, [r7, #7]
 80052b8:	4613      	mov	r3, r2
 80052ba:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 80052bc:	2300      	movs	r3, #0
 80052be:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 80052c0:	2300      	movs	r3, #0
 80052c2:	60bb      	str	r3, [r7, #8]
   
   if(len == 0) return;
 80052c4:	88bb      	ldrh	r3, [r7, #4]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d046      	beq.n	8005358 <wiz_recv_data+0xac>
   ptr = getSn_RX_RD(sn);
 80052ca:	79fb      	ldrb	r3, [r7, #7]
 80052cc:	009b      	lsls	r3, r3, #2
 80052ce:	3301      	adds	r3, #1
 80052d0:	00db      	lsls	r3, r3, #3
 80052d2:	f503 5320 	add.w	r3, r3, #10240	@ 0x2800
 80052d6:	4618      	mov	r0, r3
 80052d8:	f7ff fda2 	bl	8004e20 <WIZCHIP_READ>
 80052dc:	4603      	mov	r3, r0
 80052de:	021b      	lsls	r3, r3, #8
 80052e0:	b29c      	uxth	r4, r3
 80052e2:	79fb      	ldrb	r3, [r7, #7]
 80052e4:	009b      	lsls	r3, r3, #2
 80052e6:	3301      	adds	r3, #1
 80052e8:	00db      	lsls	r3, r3, #3
 80052ea:	f503 5324 	add.w	r3, r3, #10496	@ 0x2900
 80052ee:	4618      	mov	r0, r3
 80052f0:	f7ff fd96 	bl	8004e20 <WIZCHIP_READ>
 80052f4:	4603      	mov	r3, r0
 80052f6:	4423      	add	r3, r4
 80052f8:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = ((ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
 80052fa:	89fb      	ldrh	r3, [r7, #14]
 80052fc:	021b      	lsls	r3, r3, #8
 80052fe:	79fa      	ldrb	r2, [r7, #7]
 8005300:	0092      	lsls	r2, r2, #2
 8005302:	3203      	adds	r2, #3
 8005304:	00d2      	lsls	r2, r2, #3
 8005306:	4413      	add	r3, r2
 8005308:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_READ_BUF(addrsel, wizdata, len);
 800530a:	88bb      	ldrh	r3, [r7, #4]
 800530c:	461a      	mov	r2, r3
 800530e:	6839      	ldr	r1, [r7, #0]
 8005310:	68b8      	ldr	r0, [r7, #8]
 8005312:	f7ff fe1f 	bl	8004f54 <WIZCHIP_READ_BUF>
   ptr += len;
 8005316:	89fa      	ldrh	r2, [r7, #14]
 8005318:	88bb      	ldrh	r3, [r7, #4]
 800531a:	4413      	add	r3, r2
 800531c:	81fb      	strh	r3, [r7, #14]
   
   setSn_RX_RD(sn,ptr);
 800531e:	79fb      	ldrb	r3, [r7, #7]
 8005320:	009b      	lsls	r3, r3, #2
 8005322:	3301      	adds	r3, #1
 8005324:	00db      	lsls	r3, r3, #3
 8005326:	f503 5320 	add.w	r3, r3, #10240	@ 0x2800
 800532a:	461a      	mov	r2, r3
 800532c:	89fb      	ldrh	r3, [r7, #14]
 800532e:	0a1b      	lsrs	r3, r3, #8
 8005330:	b29b      	uxth	r3, r3
 8005332:	b2db      	uxtb	r3, r3
 8005334:	4619      	mov	r1, r3
 8005336:	4610      	mov	r0, r2
 8005338:	f7ff fdbe 	bl	8004eb8 <WIZCHIP_WRITE>
 800533c:	79fb      	ldrb	r3, [r7, #7]
 800533e:	009b      	lsls	r3, r3, #2
 8005340:	3301      	adds	r3, #1
 8005342:	00db      	lsls	r3, r3, #3
 8005344:	f503 5324 	add.w	r3, r3, #10496	@ 0x2900
 8005348:	461a      	mov	r2, r3
 800534a:	89fb      	ldrh	r3, [r7, #14]
 800534c:	b2db      	uxtb	r3, r3
 800534e:	4619      	mov	r1, r3
 8005350:	4610      	mov	r0, r2
 8005352:	f7ff fdb1 	bl	8004eb8 <WIZCHIP_WRITE>
 8005356:	e000      	b.n	800535a <wiz_recv_data+0xae>
   if(len == 0) return;
 8005358:	bf00      	nop
}
 800535a:	3714      	adds	r7, #20
 800535c:	46bd      	mov	sp, r7
 800535e:	bd90      	pop	{r4, r7, pc}

08005360 <socket>:
   }while(0);              \



int8_t socket(uint8_t sn, uint8_t protocol, uint16_t port, uint8_t flag)
{
 8005360:	b590      	push	{r4, r7, lr}
 8005362:	b085      	sub	sp, #20
 8005364:	af00      	add	r7, sp, #0
 8005366:	4604      	mov	r4, r0
 8005368:	4608      	mov	r0, r1
 800536a:	4611      	mov	r1, r2
 800536c:	461a      	mov	r2, r3
 800536e:	4623      	mov	r3, r4
 8005370:	71fb      	strb	r3, [r7, #7]
 8005372:	4603      	mov	r3, r0
 8005374:	71bb      	strb	r3, [r7, #6]
 8005376:	460b      	mov	r3, r1
 8005378:	80bb      	strh	r3, [r7, #4]
 800537a:	4613      	mov	r3, r2
 800537c:	70fb      	strb	r3, [r7, #3]
	CHECK_SOCKNUM();
 800537e:	79fb      	ldrb	r3, [r7, #7]
 8005380:	2b08      	cmp	r3, #8
 8005382:	d902      	bls.n	800538a <socket+0x2a>
 8005384:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005388:	e0f0      	b.n	800556c <socket+0x20c>
	switch(protocol)
 800538a:	79bb      	ldrb	r3, [r7, #6]
 800538c:	2b01      	cmp	r3, #1
 800538e:	d005      	beq.n	800539c <socket+0x3c>
 8005390:	2b00      	cmp	r3, #0
 8005392:	dd11      	ble.n	80053b8 <socket+0x58>
 8005394:	3b02      	subs	r3, #2
 8005396:	2b02      	cmp	r3, #2
 8005398:	d80e      	bhi.n	80053b8 <socket+0x58>
	    break;
         }
      case Sn_MR_UDP :
      case Sn_MR_MACRAW :
	  case Sn_MR_IPRAW :
         break;
 800539a:	e011      	b.n	80053c0 <socket+0x60>
            getSIPR((uint8_t*)&taddr);
 800539c:	f107 030c 	add.w	r3, r7, #12
 80053a0:	2204      	movs	r2, #4
 80053a2:	4619      	mov	r1, r3
 80053a4:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 80053a8:	f7ff fdd4 	bl	8004f54 <WIZCHIP_READ_BUF>
            if(taddr == 0) return SOCKERR_SOCKINIT;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d105      	bne.n	80053be <socket+0x5e>
 80053b2:	f06f 0302 	mvn.w	r3, #2
 80053b6:	e0d9      	b.n	800556c <socket+0x20c>
   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_PPPoE :
         break;
   #endif
      default :
         return SOCKERR_SOCKMODE;
 80053b8:	f06f 0304 	mvn.w	r3, #4
 80053bc:	e0d6      	b.n	800556c <socket+0x20c>
	    break;
 80053be:	bf00      	nop
	}
	//M20150601 : For SF_TCP_ALIGN & W5300
	//if((flag & 0x06) != 0) return SOCKERR_SOCKFLAG;
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 80053c0:	78fb      	ldrb	r3, [r7, #3]
 80053c2:	f003 0304 	and.w	r3, r3, #4
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d002      	beq.n	80053d0 <socket+0x70>
 80053ca:	f06f 0305 	mvn.w	r3, #5
 80053ce:	e0cd      	b.n	800556c <socket+0x20c>
#if _WIZCHIP_ == 5200
   if(flag & 0x10) return SOCKERR_SOCKFLAG;
#endif
	   
	if(flag != 0)
 80053d0:	78fb      	ldrb	r3, [r7, #3]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d028      	beq.n	8005428 <socket+0xc8>
	{
   	switch(protocol)
 80053d6:	79bb      	ldrb	r3, [r7, #6]
 80053d8:	2b01      	cmp	r3, #1
 80053da:	d002      	beq.n	80053e2 <socket+0x82>
 80053dc:	2b02      	cmp	r3, #2
 80053de:	d008      	beq.n	80053f2 <socket+0x92>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
      	      }
   	      #endif
   	      break;
   	   default:
   	      break;
 80053e0:	e022      	b.n	8005428 <socket+0xc8>
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK))==0) return SOCKERR_SOCKFLAG;
 80053e2:	78fb      	ldrb	r3, [r7, #3]
 80053e4:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d11a      	bne.n	8005422 <socket+0xc2>
 80053ec:	f06f 0305 	mvn.w	r3, #5
 80053f0:	e0bc      	b.n	800556c <socket+0x20c>
   	      if(flag & SF_IGMP_VER2)
 80053f2:	78fb      	ldrb	r3, [r7, #3]
 80053f4:	f003 0320 	and.w	r3, r3, #32
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d006      	beq.n	800540a <socket+0xaa>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 80053fc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005400:	2b00      	cmp	r3, #0
 8005402:	db02      	blt.n	800540a <socket+0xaa>
 8005404:	f06f 0305 	mvn.w	r3, #5
 8005408:	e0b0      	b.n	800556c <socket+0x20c>
      	      if(flag & SF_UNI_BLOCK)
 800540a:	78fb      	ldrb	r3, [r7, #3]
 800540c:	f003 0310 	and.w	r3, r3, #16
 8005410:	2b00      	cmp	r3, #0
 8005412:	d008      	beq.n	8005426 <socket+0xc6>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
 8005414:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005418:	2b00      	cmp	r3, #0
 800541a:	db04      	blt.n	8005426 <socket+0xc6>
 800541c:	f06f 0305 	mvn.w	r3, #5
 8005420:	e0a4      	b.n	800556c <socket+0x20c>
   	      break;
 8005422:	bf00      	nop
 8005424:	e000      	b.n	8005428 <socket+0xc8>
   	      break;
 8005426:	bf00      	nop
   	}
   }
	close(sn);
 8005428:	79fb      	ldrb	r3, [r7, #7]
 800542a:	4618      	mov	r0, r3
 800542c:	f000 f8ac 	bl	8005588 <close>
	//M20150601
	#if _WIZCHIP_ == 5300
	   setSn_MR(sn, ((uint16_t)(protocol | (flag & 0xF0))) | (((uint16_t)(flag & 0x02)) << 7) );
    #else
	   setSn_MR(sn, (protocol | (flag & 0xF0)));
 8005430:	79fb      	ldrb	r3, [r7, #7]
 8005432:	009b      	lsls	r3, r3, #2
 8005434:	3301      	adds	r3, #1
 8005436:	00db      	lsls	r3, r3, #3
 8005438:	4618      	mov	r0, r3
 800543a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800543e:	f023 030f 	bic.w	r3, r3, #15
 8005442:	b25a      	sxtb	r2, r3
 8005444:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8005448:	4313      	orrs	r3, r2
 800544a:	b25b      	sxtb	r3, r3
 800544c:	b2db      	uxtb	r3, r3
 800544e:	4619      	mov	r1, r3
 8005450:	f7ff fd32 	bl	8004eb8 <WIZCHIP_WRITE>
    #endif
	if(!port)
 8005454:	88bb      	ldrh	r3, [r7, #4]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d110      	bne.n	800547c <socket+0x11c>
	{
	   port = sock_any_port++;
 800545a:	4b46      	ldr	r3, [pc, #280]	@ (8005574 <socket+0x214>)
 800545c:	881b      	ldrh	r3, [r3, #0]
 800545e:	1c5a      	adds	r2, r3, #1
 8005460:	b291      	uxth	r1, r2
 8005462:	4a44      	ldr	r2, [pc, #272]	@ (8005574 <socket+0x214>)
 8005464:	8011      	strh	r1, [r2, #0]
 8005466:	80bb      	strh	r3, [r7, #4]
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 8005468:	4b42      	ldr	r3, [pc, #264]	@ (8005574 <socket+0x214>)
 800546a:	881b      	ldrh	r3, [r3, #0]
 800546c:	f64f 72f0 	movw	r2, #65520	@ 0xfff0
 8005470:	4293      	cmp	r3, r2
 8005472:	d103      	bne.n	800547c <socket+0x11c>
 8005474:	4b3f      	ldr	r3, [pc, #252]	@ (8005574 <socket+0x214>)
 8005476:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 800547a:	801a      	strh	r2, [r3, #0]
	}
   setSn_PORT(sn,port);	
 800547c:	79fb      	ldrb	r3, [r7, #7]
 800547e:	009b      	lsls	r3, r3, #2
 8005480:	3301      	adds	r3, #1
 8005482:	00db      	lsls	r3, r3, #3
 8005484:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005488:	461a      	mov	r2, r3
 800548a:	88bb      	ldrh	r3, [r7, #4]
 800548c:	0a1b      	lsrs	r3, r3, #8
 800548e:	b29b      	uxth	r3, r3
 8005490:	b2db      	uxtb	r3, r3
 8005492:	4619      	mov	r1, r3
 8005494:	4610      	mov	r0, r2
 8005496:	f7ff fd0f 	bl	8004eb8 <WIZCHIP_WRITE>
 800549a:	79fb      	ldrb	r3, [r7, #7]
 800549c:	009b      	lsls	r3, r3, #2
 800549e:	3301      	adds	r3, #1
 80054a0:	00db      	lsls	r3, r3, #3
 80054a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80054a6:	461a      	mov	r2, r3
 80054a8:	88bb      	ldrh	r3, [r7, #4]
 80054aa:	b2db      	uxtb	r3, r3
 80054ac:	4619      	mov	r1, r3
 80054ae:	4610      	mov	r0, r2
 80054b0:	f7ff fd02 	bl	8004eb8 <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 80054b4:	79fb      	ldrb	r3, [r7, #7]
 80054b6:	009b      	lsls	r3, r3, #2
 80054b8:	3301      	adds	r3, #1
 80054ba:	00db      	lsls	r3, r3, #3
 80054bc:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80054c0:	2101      	movs	r1, #1
 80054c2:	4618      	mov	r0, r3
 80054c4:	f7ff fcf8 	bl	8004eb8 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 80054c8:	bf00      	nop
 80054ca:	79fb      	ldrb	r3, [r7, #7]
 80054cc:	009b      	lsls	r3, r3, #2
 80054ce:	3301      	adds	r3, #1
 80054d0:	00db      	lsls	r3, r3, #3
 80054d2:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80054d6:	4618      	mov	r0, r3
 80054d8:	f7ff fca2 	bl	8004e20 <WIZCHIP_READ>
 80054dc:	4603      	mov	r3, r0
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d1f3      	bne.n	80054ca <socket+0x16a>
   //A20150401 : For release the previous sock_io_mode
   sock_io_mode &= ~(1 <<sn);
 80054e2:	79fb      	ldrb	r3, [r7, #7]
 80054e4:	2201      	movs	r2, #1
 80054e6:	fa02 f303 	lsl.w	r3, r2, r3
 80054ea:	b21b      	sxth	r3, r3
 80054ec:	43db      	mvns	r3, r3
 80054ee:	b21a      	sxth	r2, r3
 80054f0:	4b21      	ldr	r3, [pc, #132]	@ (8005578 <socket+0x218>)
 80054f2:	881b      	ldrh	r3, [r3, #0]
 80054f4:	b21b      	sxth	r3, r3
 80054f6:	4013      	ands	r3, r2
 80054f8:	b21b      	sxth	r3, r3
 80054fa:	b29a      	uxth	r2, r3
 80054fc:	4b1e      	ldr	r3, [pc, #120]	@ (8005578 <socket+0x218>)
 80054fe:	801a      	strh	r2, [r3, #0]
   //
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 8005500:	78fb      	ldrb	r3, [r7, #3]
 8005502:	f003 0201 	and.w	r2, r3, #1
 8005506:	79fb      	ldrb	r3, [r7, #7]
 8005508:	fa02 f303 	lsl.w	r3, r2, r3
 800550c:	b21a      	sxth	r2, r3
 800550e:	4b1a      	ldr	r3, [pc, #104]	@ (8005578 <socket+0x218>)
 8005510:	881b      	ldrh	r3, [r3, #0]
 8005512:	b21b      	sxth	r3, r3
 8005514:	4313      	orrs	r3, r2
 8005516:	b21b      	sxth	r3, r3
 8005518:	b29a      	uxth	r2, r3
 800551a:	4b17      	ldr	r3, [pc, #92]	@ (8005578 <socket+0x218>)
 800551c:	801a      	strh	r2, [r3, #0]
   sock_is_sending &= ~(1<<sn);
 800551e:	79fb      	ldrb	r3, [r7, #7]
 8005520:	2201      	movs	r2, #1
 8005522:	fa02 f303 	lsl.w	r3, r2, r3
 8005526:	b21b      	sxth	r3, r3
 8005528:	43db      	mvns	r3, r3
 800552a:	b21a      	sxth	r2, r3
 800552c:	4b13      	ldr	r3, [pc, #76]	@ (800557c <socket+0x21c>)
 800552e:	881b      	ldrh	r3, [r3, #0]
 8005530:	b21b      	sxth	r3, r3
 8005532:	4013      	ands	r3, r2
 8005534:	b21b      	sxth	r3, r3
 8005536:	b29a      	uxth	r2, r3
 8005538:	4b10      	ldr	r3, [pc, #64]	@ (800557c <socket+0x21c>)
 800553a:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 800553c:	79fb      	ldrb	r3, [r7, #7]
 800553e:	4a10      	ldr	r2, [pc, #64]	@ (8005580 <socket+0x220>)
 8005540:	2100      	movs	r1, #0
 8005542:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   //M20150601 : repalce 0 with PACK_COMPLETED
   //sock_pack_info[sn] = 0;
   sock_pack_info[sn] = PACK_COMPLETED;
 8005546:	79fb      	ldrb	r3, [r7, #7]
 8005548:	4a0e      	ldr	r2, [pc, #56]	@ (8005584 <socket+0x224>)
 800554a:	2100      	movs	r1, #0
 800554c:	54d1      	strb	r1, [r2, r3]
   //
   while(getSn_SR(sn) == SOCK_CLOSED);
 800554e:	bf00      	nop
 8005550:	79fb      	ldrb	r3, [r7, #7]
 8005552:	009b      	lsls	r3, r3, #2
 8005554:	3301      	adds	r3, #1
 8005556:	00db      	lsls	r3, r3, #3
 8005558:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 800555c:	4618      	mov	r0, r3
 800555e:	f7ff fc5f 	bl	8004e20 <WIZCHIP_READ>
 8005562:	4603      	mov	r3, r0
 8005564:	2b00      	cmp	r3, #0
 8005566:	d0f3      	beq.n	8005550 <socket+0x1f0>
   return (int8_t)sn;
 8005568:	f997 3007 	ldrsb.w	r3, [r7, #7]
}	   
 800556c:	4618      	mov	r0, r3
 800556e:	3714      	adds	r7, #20
 8005570:	46bd      	mov	sp, r7
 8005572:	bd90      	pop	{r4, r7, pc}
 8005574:	2000001e 	.word	0x2000001e
 8005578:	20000a04 	.word	0x20000a04
 800557c:	20000a06 	.word	0x20000a06
 8005580:	20000a08 	.word	0x20000a08
 8005584:	20000a18 	.word	0x20000a18

08005588 <close>:

int8_t close(uint8_t sn)
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b082      	sub	sp, #8
 800558c:	af00      	add	r7, sp, #0
 800558e:	4603      	mov	r3, r0
 8005590:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 8005592:	79fb      	ldrb	r3, [r7, #7]
 8005594:	2b08      	cmp	r3, #8
 8005596:	d902      	bls.n	800559e <close+0x16>
 8005598:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800559c:	e055      	b.n	800564a <close+0xc2>
      while(getSn_CR(sn) != 0);
      while(getSn_SR(sn) != SOCK_UDP);
      sendto(sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
   };   
#endif 
	setSn_CR(sn,Sn_CR_CLOSE);
 800559e:	79fb      	ldrb	r3, [r7, #7]
 80055a0:	009b      	lsls	r3, r3, #2
 80055a2:	3301      	adds	r3, #1
 80055a4:	00db      	lsls	r3, r3, #3
 80055a6:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80055aa:	2110      	movs	r1, #16
 80055ac:	4618      	mov	r0, r3
 80055ae:	f7ff fc83 	bl	8004eb8 <WIZCHIP_WRITE>
   /* wait to process the command... */
	while( getSn_CR(sn) );
 80055b2:	bf00      	nop
 80055b4:	79fb      	ldrb	r3, [r7, #7]
 80055b6:	009b      	lsls	r3, r3, #2
 80055b8:	3301      	adds	r3, #1
 80055ba:	00db      	lsls	r3, r3, #3
 80055bc:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80055c0:	4618      	mov	r0, r3
 80055c2:	f7ff fc2d 	bl	8004e20 <WIZCHIP_READ>
 80055c6:	4603      	mov	r3, r0
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d1f3      	bne.n	80055b4 <close+0x2c>
	/* clear all interrupt of the socket. */
	setSn_IR(sn, 0xFF);
 80055cc:	79fb      	ldrb	r3, [r7, #7]
 80055ce:	009b      	lsls	r3, r3, #2
 80055d0:	3301      	adds	r3, #1
 80055d2:	00db      	lsls	r3, r3, #3
 80055d4:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80055d8:	211f      	movs	r1, #31
 80055da:	4618      	mov	r0, r3
 80055dc:	f7ff fc6c 	bl	8004eb8 <WIZCHIP_WRITE>
	//A20150401 : Release the sock_io_mode of socket n.
	sock_io_mode &= ~(1<<sn);
 80055e0:	79fb      	ldrb	r3, [r7, #7]
 80055e2:	2201      	movs	r2, #1
 80055e4:	fa02 f303 	lsl.w	r3, r2, r3
 80055e8:	b21b      	sxth	r3, r3
 80055ea:	43db      	mvns	r3, r3
 80055ec:	b21a      	sxth	r2, r3
 80055ee:	4b19      	ldr	r3, [pc, #100]	@ (8005654 <close+0xcc>)
 80055f0:	881b      	ldrh	r3, [r3, #0]
 80055f2:	b21b      	sxth	r3, r3
 80055f4:	4013      	ands	r3, r2
 80055f6:	b21b      	sxth	r3, r3
 80055f8:	b29a      	uxth	r2, r3
 80055fa:	4b16      	ldr	r3, [pc, #88]	@ (8005654 <close+0xcc>)
 80055fc:	801a      	strh	r2, [r3, #0]
	//
	sock_is_sending &= ~(1<<sn);
 80055fe:	79fb      	ldrb	r3, [r7, #7]
 8005600:	2201      	movs	r2, #1
 8005602:	fa02 f303 	lsl.w	r3, r2, r3
 8005606:	b21b      	sxth	r3, r3
 8005608:	43db      	mvns	r3, r3
 800560a:	b21a      	sxth	r2, r3
 800560c:	4b12      	ldr	r3, [pc, #72]	@ (8005658 <close+0xd0>)
 800560e:	881b      	ldrh	r3, [r3, #0]
 8005610:	b21b      	sxth	r3, r3
 8005612:	4013      	ands	r3, r2
 8005614:	b21b      	sxth	r3, r3
 8005616:	b29a      	uxth	r2, r3
 8005618:	4b0f      	ldr	r3, [pc, #60]	@ (8005658 <close+0xd0>)
 800561a:	801a      	strh	r2, [r3, #0]
	sock_remained_size[sn] = 0;
 800561c:	79fb      	ldrb	r3, [r7, #7]
 800561e:	4a0f      	ldr	r2, [pc, #60]	@ (800565c <close+0xd4>)
 8005620:	2100      	movs	r1, #0
 8005622:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	sock_pack_info[sn] = 0;
 8005626:	79fb      	ldrb	r3, [r7, #7]
 8005628:	4a0d      	ldr	r2, [pc, #52]	@ (8005660 <close+0xd8>)
 800562a:	2100      	movs	r1, #0
 800562c:	54d1      	strb	r1, [r2, r3]
	while(getSn_SR(sn) != SOCK_CLOSED);
 800562e:	bf00      	nop
 8005630:	79fb      	ldrb	r3, [r7, #7]
 8005632:	009b      	lsls	r3, r3, #2
 8005634:	3301      	adds	r3, #1
 8005636:	00db      	lsls	r3, r3, #3
 8005638:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 800563c:	4618      	mov	r0, r3
 800563e:	f7ff fbef 	bl	8004e20 <WIZCHIP_READ>
 8005642:	4603      	mov	r3, r0
 8005644:	2b00      	cmp	r3, #0
 8005646:	d1f3      	bne.n	8005630 <close+0xa8>
	return SOCK_OK;
 8005648:	2301      	movs	r3, #1
}
 800564a:	4618      	mov	r0, r3
 800564c:	3708      	adds	r7, #8
 800564e:	46bd      	mov	sp, r7
 8005650:	bd80      	pop	{r7, pc}
 8005652:	bf00      	nop
 8005654:	20000a04 	.word	0x20000a04
 8005658:	20000a06 	.word	0x20000a06
 800565c:	20000a08 	.word	0x20000a08
 8005660:	20000a18 	.word	0x20000a18

08005664 <connect>:
   return SOCK_OK;
}


int8_t connect(uint8_t sn, uint8_t * addr, uint16_t port)
{
 8005664:	b580      	push	{r7, lr}
 8005666:	b084      	sub	sp, #16
 8005668:	af00      	add	r7, sp, #0
 800566a:	4603      	mov	r3, r0
 800566c:	6039      	str	r1, [r7, #0]
 800566e:	71fb      	strb	r3, [r7, #7]
 8005670:	4613      	mov	r3, r2
 8005672:	80bb      	strh	r3, [r7, #4]
   CHECK_SOCKNUM();
 8005674:	79fb      	ldrb	r3, [r7, #7]
 8005676:	2b08      	cmp	r3, #8
 8005678:	d902      	bls.n	8005680 <connect+0x1c>
 800567a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800567e:	e0c6      	b.n	800580e <connect+0x1aa>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8005680:	79fb      	ldrb	r3, [r7, #7]
 8005682:	009b      	lsls	r3, r3, #2
 8005684:	3301      	adds	r3, #1
 8005686:	00db      	lsls	r3, r3, #3
 8005688:	4618      	mov	r0, r3
 800568a:	f7ff fbc9 	bl	8004e20 <WIZCHIP_READ>
 800568e:	4603      	mov	r3, r0
 8005690:	f003 030f 	and.w	r3, r3, #15
 8005694:	2b01      	cmp	r3, #1
 8005696:	d002      	beq.n	800569e <connect+0x3a>
 8005698:	f06f 0304 	mvn.w	r3, #4
 800569c:	e0b7      	b.n	800580e <connect+0x1aa>
   CHECK_SOCKINIT();
 800569e:	79fb      	ldrb	r3, [r7, #7]
 80056a0:	009b      	lsls	r3, r3, #2
 80056a2:	3301      	adds	r3, #1
 80056a4:	00db      	lsls	r3, r3, #3
 80056a6:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 80056aa:	4618      	mov	r0, r3
 80056ac:	f7ff fbb8 	bl	8004e20 <WIZCHIP_READ>
 80056b0:	4603      	mov	r3, r0
 80056b2:	2b13      	cmp	r3, #19
 80056b4:	d002      	beq.n	80056bc <connect+0x58>
 80056b6:	f06f 0302 	mvn.w	r3, #2
 80056ba:	e0a8      	b.n	800580e <connect+0x1aa>
   //M20140501 : For avoiding fatal error on memory align mismatched
   //if( *((uint32_t*)addr) == 0xFFFFFFFF || *((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   {
      uint32_t taddr;
      taddr = ((uint32_t)addr[0] & 0x000000FF);
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	781b      	ldrb	r3, [r3, #0]
 80056c0:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	021b      	lsls	r3, r3, #8
 80056c6:	683a      	ldr	r2, [r7, #0]
 80056c8:	3201      	adds	r2, #1
 80056ca:	7812      	ldrb	r2, [r2, #0]
 80056cc:	4413      	add	r3, r2
 80056ce:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	021b      	lsls	r3, r3, #8
 80056d4:	683a      	ldr	r2, [r7, #0]
 80056d6:	3202      	adds	r2, #2
 80056d8:	7812      	ldrb	r2, [r2, #0]
 80056da:	4413      	add	r3, r2
 80056dc:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	021b      	lsls	r3, r3, #8
 80056e2:	683a      	ldr	r2, [r7, #0]
 80056e4:	3203      	adds	r2, #3
 80056e6:	7812      	ldrb	r2, [r2, #0]
 80056e8:	4413      	add	r3, r2
 80056ea:	60fb      	str	r3, [r7, #12]
      if( taddr == 0xFFFFFFFF || taddr == 0) return SOCKERR_IPINVALID;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80056f2:	d002      	beq.n	80056fa <connect+0x96>
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d102      	bne.n	8005700 <connect+0x9c>
 80056fa:	f06f 030b 	mvn.w	r3, #11
 80056fe:	e086      	b.n	800580e <connect+0x1aa>
   }
   //
	
	if(port == 0) return SOCKERR_PORTZERO;
 8005700:	88bb      	ldrh	r3, [r7, #4]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d102      	bne.n	800570c <connect+0xa8>
 8005706:	f06f 030a 	mvn.w	r3, #10
 800570a:	e080      	b.n	800580e <connect+0x1aa>
	setSn_DIPR(sn,addr);
 800570c:	79fb      	ldrb	r3, [r7, #7]
 800570e:	009b      	lsls	r3, r3, #2
 8005710:	3301      	adds	r3, #1
 8005712:	00db      	lsls	r3, r3, #3
 8005714:	f503 6340 	add.w	r3, r3, #3072	@ 0xc00
 8005718:	2204      	movs	r2, #4
 800571a:	6839      	ldr	r1, [r7, #0]
 800571c:	4618      	mov	r0, r3
 800571e:	f7ff fc79 	bl	8005014 <WIZCHIP_WRITE_BUF>
	setSn_DPORT(sn,port);
 8005722:	79fb      	ldrb	r3, [r7, #7]
 8005724:	009b      	lsls	r3, r3, #2
 8005726:	3301      	adds	r3, #1
 8005728:	00db      	lsls	r3, r3, #3
 800572a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800572e:	461a      	mov	r2, r3
 8005730:	88bb      	ldrh	r3, [r7, #4]
 8005732:	0a1b      	lsrs	r3, r3, #8
 8005734:	b29b      	uxth	r3, r3
 8005736:	b2db      	uxtb	r3, r3
 8005738:	4619      	mov	r1, r3
 800573a:	4610      	mov	r0, r2
 800573c:	f7ff fbbc 	bl	8004eb8 <WIZCHIP_WRITE>
 8005740:	79fb      	ldrb	r3, [r7, #7]
 8005742:	009b      	lsls	r3, r3, #2
 8005744:	3301      	adds	r3, #1
 8005746:	00db      	lsls	r3, r3, #3
 8005748:	f503 5388 	add.w	r3, r3, #4352	@ 0x1100
 800574c:	461a      	mov	r2, r3
 800574e:	88bb      	ldrh	r3, [r7, #4]
 8005750:	b2db      	uxtb	r3, r3
 8005752:	4619      	mov	r1, r3
 8005754:	4610      	mov	r0, r2
 8005756:	f7ff fbaf 	bl	8004eb8 <WIZCHIP_WRITE>
	setSn_CR(sn,Sn_CR_CONNECT);
 800575a:	79fb      	ldrb	r3, [r7, #7]
 800575c:	009b      	lsls	r3, r3, #2
 800575e:	3301      	adds	r3, #1
 8005760:	00db      	lsls	r3, r3, #3
 8005762:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8005766:	2104      	movs	r1, #4
 8005768:	4618      	mov	r0, r3
 800576a:	f7ff fba5 	bl	8004eb8 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 800576e:	bf00      	nop
 8005770:	79fb      	ldrb	r3, [r7, #7]
 8005772:	009b      	lsls	r3, r3, #2
 8005774:	3301      	adds	r3, #1
 8005776:	00db      	lsls	r3, r3, #3
 8005778:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800577c:	4618      	mov	r0, r3
 800577e:	f7ff fb4f 	bl	8004e20 <WIZCHIP_READ>
 8005782:	4603      	mov	r3, r0
 8005784:	2b00      	cmp	r3, #0
 8005786:	d1f3      	bne.n	8005770 <connect+0x10c>
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 8005788:	4b23      	ldr	r3, [pc, #140]	@ (8005818 <connect+0x1b4>)
 800578a:	881b      	ldrh	r3, [r3, #0]
 800578c:	461a      	mov	r2, r3
 800578e:	79fb      	ldrb	r3, [r7, #7]
 8005790:	fa42 f303 	asr.w	r3, r2, r3
 8005794:	f003 0301 	and.w	r3, r3, #1
 8005798:	2b00      	cmp	r3, #0
 800579a:	d02b      	beq.n	80057f4 <connect+0x190>
 800579c:	2300      	movs	r3, #0
 800579e:	e036      	b.n	800580e <connect+0x1aa>
   while(getSn_SR(sn) != SOCK_ESTABLISHED)
   {
		if (getSn_IR(sn) & Sn_IR_TIMEOUT)
 80057a0:	79fb      	ldrb	r3, [r7, #7]
 80057a2:	009b      	lsls	r3, r3, #2
 80057a4:	3301      	adds	r3, #1
 80057a6:	00db      	lsls	r3, r3, #3
 80057a8:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80057ac:	4618      	mov	r0, r3
 80057ae:	f7ff fb37 	bl	8004e20 <WIZCHIP_READ>
 80057b2:	4603      	mov	r3, r0
 80057b4:	f003 0308 	and.w	r3, r3, #8
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d00c      	beq.n	80057d6 <connect+0x172>
		{
			setSn_IR(sn, Sn_IR_TIMEOUT);
 80057bc:	79fb      	ldrb	r3, [r7, #7]
 80057be:	009b      	lsls	r3, r3, #2
 80057c0:	3301      	adds	r3, #1
 80057c2:	00db      	lsls	r3, r3, #3
 80057c4:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80057c8:	2108      	movs	r1, #8
 80057ca:	4618      	mov	r0, r3
 80057cc:	f7ff fb74 	bl	8004eb8 <WIZCHIP_WRITE>
            return SOCKERR_TIMEOUT;
 80057d0:	f06f 030c 	mvn.w	r3, #12
 80057d4:	e01b      	b.n	800580e <connect+0x1aa>
		}

		if (getSn_SR(sn) == SOCK_CLOSED)
 80057d6:	79fb      	ldrb	r3, [r7, #7]
 80057d8:	009b      	lsls	r3, r3, #2
 80057da:	3301      	adds	r3, #1
 80057dc:	00db      	lsls	r3, r3, #3
 80057de:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 80057e2:	4618      	mov	r0, r3
 80057e4:	f7ff fb1c 	bl	8004e20 <WIZCHIP_READ>
 80057e8:	4603      	mov	r3, r0
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d102      	bne.n	80057f4 <connect+0x190>
		{
			return SOCKERR_SOCKCLOSED;
 80057ee:	f06f 0303 	mvn.w	r3, #3
 80057f2:	e00c      	b.n	800580e <connect+0x1aa>
   while(getSn_SR(sn) != SOCK_ESTABLISHED)
 80057f4:	79fb      	ldrb	r3, [r7, #7]
 80057f6:	009b      	lsls	r3, r3, #2
 80057f8:	3301      	adds	r3, #1
 80057fa:	00db      	lsls	r3, r3, #3
 80057fc:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8005800:	4618      	mov	r0, r3
 8005802:	f7ff fb0d 	bl	8004e20 <WIZCHIP_READ>
 8005806:	4603      	mov	r3, r0
 8005808:	2b17      	cmp	r3, #23
 800580a:	d1c9      	bne.n	80057a0 <connect+0x13c>
		}
	}
   
   return SOCK_OK;
 800580c:	2301      	movs	r3, #1
}
 800580e:	4618      	mov	r0, r3
 8005810:	3710      	adds	r7, #16
 8005812:	46bd      	mov	sp, r7
 8005814:	bd80      	pop	{r7, pc}
 8005816:	bf00      	nop
 8005818:	20000a04 	.word	0x20000a04

0800581c <disconnect>:

int8_t disconnect(uint8_t sn)
{
 800581c:	b580      	push	{r7, lr}
 800581e:	b082      	sub	sp, #8
 8005820:	af00      	add	r7, sp, #0
 8005822:	4603      	mov	r3, r0
 8005824:	71fb      	strb	r3, [r7, #7]
   CHECK_SOCKNUM();
 8005826:	79fb      	ldrb	r3, [r7, #7]
 8005828:	2b08      	cmp	r3, #8
 800582a:	d902      	bls.n	8005832 <disconnect+0x16>
 800582c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005830:	e062      	b.n	80058f8 <disconnect+0xdc>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8005832:	79fb      	ldrb	r3, [r7, #7]
 8005834:	009b      	lsls	r3, r3, #2
 8005836:	3301      	adds	r3, #1
 8005838:	00db      	lsls	r3, r3, #3
 800583a:	4618      	mov	r0, r3
 800583c:	f7ff faf0 	bl	8004e20 <WIZCHIP_READ>
 8005840:	4603      	mov	r3, r0
 8005842:	f003 030f 	and.w	r3, r3, #15
 8005846:	2b01      	cmp	r3, #1
 8005848:	d002      	beq.n	8005850 <disconnect+0x34>
 800584a:	f06f 0304 	mvn.w	r3, #4
 800584e:	e053      	b.n	80058f8 <disconnect+0xdc>
	setSn_CR(sn,Sn_CR_DISCON);
 8005850:	79fb      	ldrb	r3, [r7, #7]
 8005852:	009b      	lsls	r3, r3, #2
 8005854:	3301      	adds	r3, #1
 8005856:	00db      	lsls	r3, r3, #3
 8005858:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800585c:	2108      	movs	r1, #8
 800585e:	4618      	mov	r0, r3
 8005860:	f7ff fb2a 	bl	8004eb8 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 8005864:	bf00      	nop
 8005866:	79fb      	ldrb	r3, [r7, #7]
 8005868:	009b      	lsls	r3, r3, #2
 800586a:	3301      	adds	r3, #1
 800586c:	00db      	lsls	r3, r3, #3
 800586e:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8005872:	4618      	mov	r0, r3
 8005874:	f7ff fad4 	bl	8004e20 <WIZCHIP_READ>
 8005878:	4603      	mov	r3, r0
 800587a:	2b00      	cmp	r3, #0
 800587c:	d1f3      	bne.n	8005866 <disconnect+0x4a>
	sock_is_sending &= ~(1<<sn);
 800587e:	79fb      	ldrb	r3, [r7, #7]
 8005880:	2201      	movs	r2, #1
 8005882:	fa02 f303 	lsl.w	r3, r2, r3
 8005886:	b21b      	sxth	r3, r3
 8005888:	43db      	mvns	r3, r3
 800588a:	b21a      	sxth	r2, r3
 800588c:	4b1c      	ldr	r3, [pc, #112]	@ (8005900 <disconnect+0xe4>)
 800588e:	881b      	ldrh	r3, [r3, #0]
 8005890:	b21b      	sxth	r3, r3
 8005892:	4013      	ands	r3, r2
 8005894:	b21b      	sxth	r3, r3
 8005896:	b29a      	uxth	r2, r3
 8005898:	4b19      	ldr	r3, [pc, #100]	@ (8005900 <disconnect+0xe4>)
 800589a:	801a      	strh	r2, [r3, #0]
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 800589c:	4b19      	ldr	r3, [pc, #100]	@ (8005904 <disconnect+0xe8>)
 800589e:	881b      	ldrh	r3, [r3, #0]
 80058a0:	461a      	mov	r2, r3
 80058a2:	79fb      	ldrb	r3, [r7, #7]
 80058a4:	fa42 f303 	asr.w	r3, r2, r3
 80058a8:	f003 0301 	and.w	r3, r3, #1
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d016      	beq.n	80058de <disconnect+0xc2>
 80058b0:	2300      	movs	r3, #0
 80058b2:	e021      	b.n	80058f8 <disconnect+0xdc>
	while(getSn_SR(sn) != SOCK_CLOSED)
	{
	   if(getSn_IR(sn) & Sn_IR_TIMEOUT)
 80058b4:	79fb      	ldrb	r3, [r7, #7]
 80058b6:	009b      	lsls	r3, r3, #2
 80058b8:	3301      	adds	r3, #1
 80058ba:	00db      	lsls	r3, r3, #3
 80058bc:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80058c0:	4618      	mov	r0, r3
 80058c2:	f7ff faad 	bl	8004e20 <WIZCHIP_READ>
 80058c6:	4603      	mov	r3, r0
 80058c8:	f003 0308 	and.w	r3, r3, #8
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d006      	beq.n	80058de <disconnect+0xc2>
	   {
	      close(sn);
 80058d0:	79fb      	ldrb	r3, [r7, #7]
 80058d2:	4618      	mov	r0, r3
 80058d4:	f7ff fe58 	bl	8005588 <close>
	      return SOCKERR_TIMEOUT;
 80058d8:	f06f 030c 	mvn.w	r3, #12
 80058dc:	e00c      	b.n	80058f8 <disconnect+0xdc>
	while(getSn_SR(sn) != SOCK_CLOSED)
 80058de:	79fb      	ldrb	r3, [r7, #7]
 80058e0:	009b      	lsls	r3, r3, #2
 80058e2:	3301      	adds	r3, #1
 80058e4:	00db      	lsls	r3, r3, #3
 80058e6:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 80058ea:	4618      	mov	r0, r3
 80058ec:	f7ff fa98 	bl	8004e20 <WIZCHIP_READ>
 80058f0:	4603      	mov	r3, r0
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d1de      	bne.n	80058b4 <disconnect+0x98>
	   }
	}
	return SOCK_OK;
 80058f6:	2301      	movs	r3, #1
}
 80058f8:	4618      	mov	r0, r3
 80058fa:	3708      	adds	r7, #8
 80058fc:	46bd      	mov	sp, r7
 80058fe:	bd80      	pop	{r7, pc}
 8005900:	20000a06 	.word	0x20000a06
 8005904:	20000a04 	.word	0x20000a04

08005908 <send>:

int32_t send(uint8_t sn, uint8_t * buf, uint16_t len)
{
 8005908:	b580      	push	{r7, lr}
 800590a:	b084      	sub	sp, #16
 800590c:	af00      	add	r7, sp, #0
 800590e:	4603      	mov	r3, r0
 8005910:	6039      	str	r1, [r7, #0]
 8005912:	71fb      	strb	r3, [r7, #7]
 8005914:	4613      	mov	r3, r2
 8005916:	80bb      	strh	r3, [r7, #4]
   uint8_t tmp=0;
 8005918:	2300      	movs	r3, #0
 800591a:	73fb      	strb	r3, [r7, #15]
   uint16_t freesize=0;
 800591c:	2300      	movs	r3, #0
 800591e:	81bb      	strh	r3, [r7, #12]
   
   CHECK_SOCKNUM();
 8005920:	79fb      	ldrb	r3, [r7, #7]
 8005922:	2b08      	cmp	r3, #8
 8005924:	d902      	bls.n	800592c <send+0x24>
 8005926:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800592a:	e0dd      	b.n	8005ae8 <send+0x1e0>
   CHECK_SOCKMODE(Sn_MR_TCP);
 800592c:	79fb      	ldrb	r3, [r7, #7]
 800592e:	009b      	lsls	r3, r3, #2
 8005930:	3301      	adds	r3, #1
 8005932:	00db      	lsls	r3, r3, #3
 8005934:	4618      	mov	r0, r3
 8005936:	f7ff fa73 	bl	8004e20 <WIZCHIP_READ>
 800593a:	4603      	mov	r3, r0
 800593c:	f003 030f 	and.w	r3, r3, #15
 8005940:	2b01      	cmp	r3, #1
 8005942:	d002      	beq.n	800594a <send+0x42>
 8005944:	f06f 0304 	mvn.w	r3, #4
 8005948:	e0ce      	b.n	8005ae8 <send+0x1e0>
   CHECK_SOCKDATA();
 800594a:	88bb      	ldrh	r3, [r7, #4]
 800594c:	2b00      	cmp	r3, #0
 800594e:	d102      	bne.n	8005956 <send+0x4e>
 8005950:	f06f 030d 	mvn.w	r3, #13
 8005954:	e0c8      	b.n	8005ae8 <send+0x1e0>
   tmp = getSn_SR(sn);
 8005956:	79fb      	ldrb	r3, [r7, #7]
 8005958:	009b      	lsls	r3, r3, #2
 800595a:	3301      	adds	r3, #1
 800595c:	00db      	lsls	r3, r3, #3
 800595e:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8005962:	4618      	mov	r0, r3
 8005964:	f7ff fa5c 	bl	8004e20 <WIZCHIP_READ>
 8005968:	4603      	mov	r3, r0
 800596a:	73fb      	strb	r3, [r7, #15]
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
 800596c:	7bfb      	ldrb	r3, [r7, #15]
 800596e:	2b17      	cmp	r3, #23
 8005970:	d005      	beq.n	800597e <send+0x76>
 8005972:	7bfb      	ldrb	r3, [r7, #15]
 8005974:	2b1c      	cmp	r3, #28
 8005976:	d002      	beq.n	800597e <send+0x76>
 8005978:	f06f 0306 	mvn.w	r3, #6
 800597c:	e0b4      	b.n	8005ae8 <send+0x1e0>
   if( sock_is_sending & (1<<sn) )
 800597e:	4b5c      	ldr	r3, [pc, #368]	@ (8005af0 <send+0x1e8>)
 8005980:	881b      	ldrh	r3, [r3, #0]
 8005982:	461a      	mov	r2, r3
 8005984:	79fb      	ldrb	r3, [r7, #7]
 8005986:	fa42 f303 	asr.w	r3, r2, r3
 800598a:	f003 0301 	and.w	r3, r3, #1
 800598e:	2b00      	cmp	r3, #0
 8005990:	d039      	beq.n	8005a06 <send+0xfe>
   {
      tmp = getSn_IR(sn);
 8005992:	79fb      	ldrb	r3, [r7, #7]
 8005994:	009b      	lsls	r3, r3, #2
 8005996:	3301      	adds	r3, #1
 8005998:	00db      	lsls	r3, r3, #3
 800599a:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800599e:	4618      	mov	r0, r3
 80059a0:	f7ff fa3e 	bl	8004e20 <WIZCHIP_READ>
 80059a4:	4603      	mov	r3, r0
 80059a6:	f003 031f 	and.w	r3, r3, #31
 80059aa:	73fb      	strb	r3, [r7, #15]
      if(tmp & Sn_IR_SENDOK)
 80059ac:	7bfb      	ldrb	r3, [r7, #15]
 80059ae:	f003 0310 	and.w	r3, r3, #16
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d019      	beq.n	80059ea <send+0xe2>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 80059b6:	79fb      	ldrb	r3, [r7, #7]
 80059b8:	009b      	lsls	r3, r3, #2
 80059ba:	3301      	adds	r3, #1
 80059bc:	00db      	lsls	r3, r3, #3
 80059be:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80059c2:	2110      	movs	r1, #16
 80059c4:	4618      	mov	r0, r3
 80059c6:	f7ff fa77 	bl	8004eb8 <WIZCHIP_WRITE>
               setSn_CR(sn,Sn_CR_SEND);
               while(getSn_CR(sn));
               return SOCK_BUSY;
            }
         #endif
         sock_is_sending &= ~(1<<sn);         
 80059ca:	79fb      	ldrb	r3, [r7, #7]
 80059cc:	2201      	movs	r2, #1
 80059ce:	fa02 f303 	lsl.w	r3, r2, r3
 80059d2:	b21b      	sxth	r3, r3
 80059d4:	43db      	mvns	r3, r3
 80059d6:	b21a      	sxth	r2, r3
 80059d8:	4b45      	ldr	r3, [pc, #276]	@ (8005af0 <send+0x1e8>)
 80059da:	881b      	ldrh	r3, [r3, #0]
 80059dc:	b21b      	sxth	r3, r3
 80059de:	4013      	ands	r3, r2
 80059e0:	b21b      	sxth	r3, r3
 80059e2:	b29a      	uxth	r2, r3
 80059e4:	4b42      	ldr	r3, [pc, #264]	@ (8005af0 <send+0x1e8>)
 80059e6:	801a      	strh	r2, [r3, #0]
 80059e8:	e00d      	b.n	8005a06 <send+0xfe>
      }
      else if(tmp & Sn_IR_TIMEOUT)
 80059ea:	7bfb      	ldrb	r3, [r7, #15]
 80059ec:	f003 0308 	and.w	r3, r3, #8
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d006      	beq.n	8005a02 <send+0xfa>
      {
         close(sn);
 80059f4:	79fb      	ldrb	r3, [r7, #7]
 80059f6:	4618      	mov	r0, r3
 80059f8:	f7ff fdc6 	bl	8005588 <close>
         return SOCKERR_TIMEOUT;
 80059fc:	f06f 030c 	mvn.w	r3, #12
 8005a00:	e072      	b.n	8005ae8 <send+0x1e0>
      }
      else return SOCK_BUSY;
 8005a02:	2300      	movs	r3, #0
 8005a04:	e070      	b.n	8005ae8 <send+0x1e0>
   }
   freesize = getSn_TxMAX(sn);
 8005a06:	79fb      	ldrb	r3, [r7, #7]
 8005a08:	009b      	lsls	r3, r3, #2
 8005a0a:	3301      	adds	r3, #1
 8005a0c:	00db      	lsls	r3, r3, #3
 8005a0e:	f503 53f8 	add.w	r3, r3, #7936	@ 0x1f00
 8005a12:	4618      	mov	r0, r3
 8005a14:	f7ff fa04 	bl	8004e20 <WIZCHIP_READ>
 8005a18:	4603      	mov	r3, r0
 8005a1a:	029b      	lsls	r3, r3, #10
 8005a1c:	81bb      	strh	r3, [r7, #12]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 8005a1e:	88ba      	ldrh	r2, [r7, #4]
 8005a20:	89bb      	ldrh	r3, [r7, #12]
 8005a22:	429a      	cmp	r2, r3
 8005a24:	d901      	bls.n	8005a2a <send+0x122>
 8005a26:	89bb      	ldrh	r3, [r7, #12]
 8005a28:	80bb      	strh	r3, [r7, #4]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 8005a2a:	79fb      	ldrb	r3, [r7, #7]
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	f7ff fb51 	bl	80050d4 <getSn_TX_FSR>
 8005a32:	4603      	mov	r3, r0
 8005a34:	81bb      	strh	r3, [r7, #12]
      tmp = getSn_SR(sn);
 8005a36:	79fb      	ldrb	r3, [r7, #7]
 8005a38:	009b      	lsls	r3, r3, #2
 8005a3a:	3301      	adds	r3, #1
 8005a3c:	00db      	lsls	r3, r3, #3
 8005a3e:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8005a42:	4618      	mov	r0, r3
 8005a44:	f7ff f9ec 	bl	8004e20 <WIZCHIP_READ>
 8005a48:	4603      	mov	r3, r0
 8005a4a:	73fb      	strb	r3, [r7, #15]
      if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
 8005a4c:	7bfb      	ldrb	r3, [r7, #15]
 8005a4e:	2b17      	cmp	r3, #23
 8005a50:	d009      	beq.n	8005a66 <send+0x15e>
 8005a52:	7bfb      	ldrb	r3, [r7, #15]
 8005a54:	2b1c      	cmp	r3, #28
 8005a56:	d006      	beq.n	8005a66 <send+0x15e>
      {
         close(sn);
 8005a58:	79fb      	ldrb	r3, [r7, #7]
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	f7ff fd94 	bl	8005588 <close>
         return SOCKERR_SOCKSTATUS;
 8005a60:	f06f 0306 	mvn.w	r3, #6
 8005a64:	e040      	b.n	8005ae8 <send+0x1e0>
      }
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 8005a66:	4b23      	ldr	r3, [pc, #140]	@ (8005af4 <send+0x1ec>)
 8005a68:	881b      	ldrh	r3, [r3, #0]
 8005a6a:	461a      	mov	r2, r3
 8005a6c:	79fb      	ldrb	r3, [r7, #7]
 8005a6e:	fa42 f303 	asr.w	r3, r2, r3
 8005a72:	f003 0301 	and.w	r3, r3, #1
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d005      	beq.n	8005a86 <send+0x17e>
 8005a7a:	88ba      	ldrh	r2, [r7, #4]
 8005a7c:	89bb      	ldrh	r3, [r7, #12]
 8005a7e:	429a      	cmp	r2, r3
 8005a80:	d901      	bls.n	8005a86 <send+0x17e>
 8005a82:	2300      	movs	r3, #0
 8005a84:	e030      	b.n	8005ae8 <send+0x1e0>
      if(len <= freesize) break;
 8005a86:	88ba      	ldrh	r2, [r7, #4]
 8005a88:	89bb      	ldrh	r3, [r7, #12]
 8005a8a:	429a      	cmp	r2, r3
 8005a8c:	d900      	bls.n	8005a90 <send+0x188>
      freesize = getSn_TX_FSR(sn);
 8005a8e:	e7cc      	b.n	8005a2a <send+0x122>
      if(len <= freesize) break;
 8005a90:	bf00      	nop
   }
   wiz_send_data(sn, buf, len);
 8005a92:	88ba      	ldrh	r2, [r7, #4]
 8005a94:	79fb      	ldrb	r3, [r7, #7]
 8005a96:	6839      	ldr	r1, [r7, #0]
 8005a98:	4618      	mov	r0, r3
 8005a9a:	f7ff fbad 	bl	80051f8 <wiz_send_data>

   #if _WIZCHIP_ == 5300
      setSn_TX_WRSR(sn,len);
   #endif
   
   setSn_CR(sn,Sn_CR_SEND);
 8005a9e:	79fb      	ldrb	r3, [r7, #7]
 8005aa0:	009b      	lsls	r3, r3, #2
 8005aa2:	3301      	adds	r3, #1
 8005aa4:	00db      	lsls	r3, r3, #3
 8005aa6:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8005aaa:	2120      	movs	r1, #32
 8005aac:	4618      	mov	r0, r3
 8005aae:	f7ff fa03 	bl	8004eb8 <WIZCHIP_WRITE>
   /* wait to process the command... */
   while(getSn_CR(sn));
 8005ab2:	bf00      	nop
 8005ab4:	79fb      	ldrb	r3, [r7, #7]
 8005ab6:	009b      	lsls	r3, r3, #2
 8005ab8:	3301      	adds	r3, #1
 8005aba:	00db      	lsls	r3, r3, #3
 8005abc:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	f7ff f9ad 	bl	8004e20 <WIZCHIP_READ>
 8005ac6:	4603      	mov	r3, r0
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d1f3      	bne.n	8005ab4 <send+0x1ac>
   sock_is_sending |= (1 << sn);
 8005acc:	79fb      	ldrb	r3, [r7, #7]
 8005ace:	2201      	movs	r2, #1
 8005ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ad4:	b21a      	sxth	r2, r3
 8005ad6:	4b06      	ldr	r3, [pc, #24]	@ (8005af0 <send+0x1e8>)
 8005ad8:	881b      	ldrh	r3, [r3, #0]
 8005ada:	b21b      	sxth	r3, r3
 8005adc:	4313      	orrs	r3, r2
 8005ade:	b21b      	sxth	r3, r3
 8005ae0:	b29a      	uxth	r2, r3
 8005ae2:	4b03      	ldr	r3, [pc, #12]	@ (8005af0 <send+0x1e8>)
 8005ae4:	801a      	strh	r2, [r3, #0]
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 8005ae6:	88bb      	ldrh	r3, [r7, #4]
}
 8005ae8:	4618      	mov	r0, r3
 8005aea:	3710      	adds	r7, #16
 8005aec:	46bd      	mov	sp, r7
 8005aee:	bd80      	pop	{r7, pc}
 8005af0:	20000a06 	.word	0x20000a06
 8005af4:	20000a04 	.word	0x20000a04

08005af8 <recv>:


int32_t recv(uint8_t sn, uint8_t * buf, uint16_t len)
{
 8005af8:	b590      	push	{r4, r7, lr}
 8005afa:	b085      	sub	sp, #20
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	4603      	mov	r3, r0
 8005b00:	6039      	str	r1, [r7, #0]
 8005b02:	71fb      	strb	r3, [r7, #7]
 8005b04:	4613      	mov	r3, r2
 8005b06:	80bb      	strh	r3, [r7, #4]
   uint8_t  tmp = 0;
 8005b08:	2300      	movs	r3, #0
 8005b0a:	73fb      	strb	r3, [r7, #15]
   uint16_t recvsize = 0;
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	81bb      	strh	r3, [r7, #12]
#if   _WIZCHIP_ == 5300
   uint8_t head[2];
   uint16_t mr;
#endif
//
   CHECK_SOCKNUM();
 8005b10:	79fb      	ldrb	r3, [r7, #7]
 8005b12:	2b08      	cmp	r3, #8
 8005b14:	d902      	bls.n	8005b1c <recv+0x24>
 8005b16:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005b1a:	e09b      	b.n	8005c54 <recv+0x15c>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8005b1c:	79fb      	ldrb	r3, [r7, #7]
 8005b1e:	009b      	lsls	r3, r3, #2
 8005b20:	3301      	adds	r3, #1
 8005b22:	00db      	lsls	r3, r3, #3
 8005b24:	4618      	mov	r0, r3
 8005b26:	f7ff f97b 	bl	8004e20 <WIZCHIP_READ>
 8005b2a:	4603      	mov	r3, r0
 8005b2c:	f003 030f 	and.w	r3, r3, #15
 8005b30:	2b01      	cmp	r3, #1
 8005b32:	d002      	beq.n	8005b3a <recv+0x42>
 8005b34:	f06f 0304 	mvn.w	r3, #4
 8005b38:	e08c      	b.n	8005c54 <recv+0x15c>
   CHECK_SOCKDATA();
 8005b3a:	88bb      	ldrh	r3, [r7, #4]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d102      	bne.n	8005b46 <recv+0x4e>
 8005b40:	f06f 030d 	mvn.w	r3, #13
 8005b44:	e086      	b.n	8005c54 <recv+0x15c>
   
   recvsize = getSn_RxMAX(sn);
 8005b46:	79fb      	ldrb	r3, [r7, #7]
 8005b48:	009b      	lsls	r3, r3, #2
 8005b4a:	3301      	adds	r3, #1
 8005b4c:	00db      	lsls	r3, r3, #3
 8005b4e:	f503 53f0 	add.w	r3, r3, #7680	@ 0x1e00
 8005b52:	4618      	mov	r0, r3
 8005b54:	f7ff f964 	bl	8004e20 <WIZCHIP_READ>
 8005b58:	4603      	mov	r3, r0
 8005b5a:	029b      	lsls	r3, r3, #10
 8005b5c:	81bb      	strh	r3, [r7, #12]
   if(recvsize < len) len = recvsize;
 8005b5e:	89ba      	ldrh	r2, [r7, #12]
 8005b60:	88bb      	ldrh	r3, [r7, #4]
 8005b62:	429a      	cmp	r2, r3
 8005b64:	d201      	bcs.n	8005b6a <recv+0x72>
 8005b66:	89bb      	ldrh	r3, [r7, #12]
 8005b68:	80bb      	strh	r3, [r7, #4]
   {
#endif
//
      while(1)
      {
         recvsize = getSn_RX_RSR(sn);
 8005b6a:	79fb      	ldrb	r3, [r7, #7]
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	f7ff fafa 	bl	8005166 <getSn_RX_RSR>
 8005b72:	4603      	mov	r3, r0
 8005b74:	81bb      	strh	r3, [r7, #12]
         tmp = getSn_SR(sn);
 8005b76:	79fb      	ldrb	r3, [r7, #7]
 8005b78:	009b      	lsls	r3, r3, #2
 8005b7a:	3301      	adds	r3, #1
 8005b7c:	00db      	lsls	r3, r3, #3
 8005b7e:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8005b82:	4618      	mov	r0, r3
 8005b84:	f7ff f94c 	bl	8004e20 <WIZCHIP_READ>
 8005b88:	4603      	mov	r3, r0
 8005b8a:	73fb      	strb	r3, [r7, #15]
         if (tmp != SOCK_ESTABLISHED)
 8005b8c:	7bfb      	ldrb	r3, [r7, #15]
 8005b8e:	2b17      	cmp	r3, #23
 8005b90:	d026      	beq.n	8005be0 <recv+0xe8>
         {
            if(tmp == SOCK_CLOSE_WAIT)
 8005b92:	7bfb      	ldrb	r3, [r7, #15]
 8005b94:	2b1c      	cmp	r3, #28
 8005b96:	d11c      	bne.n	8005bd2 <recv+0xda>
            {
               if(recvsize != 0) break;
 8005b98:	89bb      	ldrh	r3, [r7, #12]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d133      	bne.n	8005c06 <recv+0x10e>
               else if(getSn_TX_FSR(sn) == getSn_TxMAX(sn))
 8005b9e:	79fb      	ldrb	r3, [r7, #7]
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	f7ff fa97 	bl	80050d4 <getSn_TX_FSR>
 8005ba6:	4603      	mov	r3, r0
 8005ba8:	461c      	mov	r4, r3
 8005baa:	79fb      	ldrb	r3, [r7, #7]
 8005bac:	009b      	lsls	r3, r3, #2
 8005bae:	3301      	adds	r3, #1
 8005bb0:	00db      	lsls	r3, r3, #3
 8005bb2:	f503 53f8 	add.w	r3, r3, #7936	@ 0x1f00
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	f7ff f932 	bl	8004e20 <WIZCHIP_READ>
 8005bbc:	4603      	mov	r3, r0
 8005bbe:	029b      	lsls	r3, r3, #10
 8005bc0:	429c      	cmp	r4, r3
 8005bc2:	d10d      	bne.n	8005be0 <recv+0xe8>
               {
                  close(sn);
 8005bc4:	79fb      	ldrb	r3, [r7, #7]
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	f7ff fcde 	bl	8005588 <close>
                  return SOCKERR_SOCKSTATUS;
 8005bcc:	f06f 0306 	mvn.w	r3, #6
 8005bd0:	e040      	b.n	8005c54 <recv+0x15c>
               }
            }
            else
            {
               close(sn);
 8005bd2:	79fb      	ldrb	r3, [r7, #7]
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	f7ff fcd7 	bl	8005588 <close>
               return SOCKERR_SOCKSTATUS;
 8005bda:	f06f 0306 	mvn.w	r3, #6
 8005bde:	e039      	b.n	8005c54 <recv+0x15c>
            }
         }
         if((sock_io_mode & (1<<sn)) && (recvsize == 0)) return SOCK_BUSY;
 8005be0:	4b1e      	ldr	r3, [pc, #120]	@ (8005c5c <recv+0x164>)
 8005be2:	881b      	ldrh	r3, [r3, #0]
 8005be4:	461a      	mov	r2, r3
 8005be6:	79fb      	ldrb	r3, [r7, #7]
 8005be8:	fa42 f303 	asr.w	r3, r2, r3
 8005bec:	f003 0301 	and.w	r3, r3, #1
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d004      	beq.n	8005bfe <recv+0x106>
 8005bf4:	89bb      	ldrh	r3, [r7, #12]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d101      	bne.n	8005bfe <recv+0x106>
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	e02a      	b.n	8005c54 <recv+0x15c>
         if(recvsize != 0) break;
 8005bfe:	89bb      	ldrh	r3, [r7, #12]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d102      	bne.n	8005c0a <recv+0x112>
         recvsize = getSn_RX_RSR(sn);
 8005c04:	e7b1      	b.n	8005b6a <recv+0x72>
               if(recvsize != 0) break;
 8005c06:	bf00      	nop
 8005c08:	e000      	b.n	8005c0c <recv+0x114>
         if(recvsize != 0) break;
 8005c0a:	bf00      	nop
   }
   else sock_pack_info[sn] = PACK_COMPLETED;
   if(getSn_MR(sn) & Sn_MR_ALIGN) sock_remained_size[sn] = 0;
   //len = recvsize;
#else   
   if(recvsize < len) len = recvsize;   
 8005c0c:	89ba      	ldrh	r2, [r7, #12]
 8005c0e:	88bb      	ldrh	r3, [r7, #4]
 8005c10:	429a      	cmp	r2, r3
 8005c12:	d201      	bcs.n	8005c18 <recv+0x120>
 8005c14:	89bb      	ldrh	r3, [r7, #12]
 8005c16:	80bb      	strh	r3, [r7, #4]
   wiz_recv_data(sn, buf, len);
 8005c18:	88ba      	ldrh	r2, [r7, #4]
 8005c1a:	79fb      	ldrb	r3, [r7, #7]
 8005c1c:	6839      	ldr	r1, [r7, #0]
 8005c1e:	4618      	mov	r0, r3
 8005c20:	f7ff fb44 	bl	80052ac <wiz_recv_data>
   setSn_CR(sn,Sn_CR_RECV);
 8005c24:	79fb      	ldrb	r3, [r7, #7]
 8005c26:	009b      	lsls	r3, r3, #2
 8005c28:	3301      	adds	r3, #1
 8005c2a:	00db      	lsls	r3, r3, #3
 8005c2c:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8005c30:	2140      	movs	r1, #64	@ 0x40
 8005c32:	4618      	mov	r0, r3
 8005c34:	f7ff f940 	bl	8004eb8 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8005c38:	bf00      	nop
 8005c3a:	79fb      	ldrb	r3, [r7, #7]
 8005c3c:	009b      	lsls	r3, r3, #2
 8005c3e:	3301      	adds	r3, #1
 8005c40:	00db      	lsls	r3, r3, #3
 8005c42:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8005c46:	4618      	mov	r0, r3
 8005c48:	f7ff f8ea 	bl	8004e20 <WIZCHIP_READ>
 8005c4c:	4603      	mov	r3, r0
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d1f3      	bne.n	8005c3a <recv+0x142>
#endif
     
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 8005c52:	88bb      	ldrh	r3, [r7, #4]
}
 8005c54:	4618      	mov	r0, r3
 8005c56:	3714      	adds	r7, #20
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	bd90      	pop	{r4, r7, pc}
 8005c5c:	20000a04 	.word	0x20000a04

08005c60 <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_enter(void)           {};
void 	  wizchip_cris_enter(void)           {}
 8005c60:	b480      	push	{r7}
 8005c62:	af00      	add	r7, sp, #0
 8005c64:	bf00      	nop
 8005c66:	46bd      	mov	sp, r7
 8005c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6c:	4770      	bx	lr

08005c6e <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_exit(void)          {};
void 	  wizchip_cris_exit(void)          {}
 8005c6e:	b480      	push	{r7}
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	bf00      	nop
 8005c74:	46bd      	mov	sp, r7
 8005c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7a:	4770      	bx	lr

08005c7c <wizchip_cs_select>:
 * @brief Default function to select chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_select(void)            {};
void 	wizchip_cs_select(void)            {}
 8005c7c:	b480      	push	{r7}
 8005c7e:	af00      	add	r7, sp, #0
 8005c80:	bf00      	nop
 8005c82:	46bd      	mov	sp, r7
 8005c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c88:	4770      	bx	lr

08005c8a <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_deselect(void)          {};
void 	wizchip_cs_deselect(void)          {}
 8005c8a:	b480      	push	{r7}
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	bf00      	nop
 8005c90:	46bd      	mov	sp, r7
 8005c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c96:	4770      	bx	lr

08005c98 <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 8005c98:	b480      	push	{r7}
 8005c9a:	b083      	sub	sp, #12
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	781b      	ldrb	r3, [r3, #0]
 8005ca4:	b2db      	uxtb	r3, r3
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	370c      	adds	r7, #12
 8005caa:	46bd      	mov	sp, r7
 8005cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb0:	4770      	bx	lr

08005cb2 <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void 	wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 8005cb2:	b480      	push	{r7}
 8005cb4:	b083      	sub	sp, #12
 8005cb6:	af00      	add	r7, sp, #0
 8005cb8:	6078      	str	r0, [r7, #4]
 8005cba:	460b      	mov	r3, r1
 8005cbc:	70fb      	strb	r3, [r7, #3]
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	78fa      	ldrb	r2, [r7, #3]
 8005cc2:	701a      	strb	r2, [r3, #0]
 8005cc4:	bf00      	nop
 8005cc6:	370c      	adds	r7, #12
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cce:	4770      	bx	lr

08005cd0 <wizchip_spi_readbyte>:
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//uint8_t wizchip_spi_readbyte(void)        {return 0;};
uint8_t wizchip_spi_readbyte(void)        {return 0;}
 8005cd0:	b480      	push	{r7}
 8005cd2:	af00      	add	r7, sp, #0
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cde:	4770      	bx	lr

08005ce0 <wizchip_spi_writebyte>:
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writebyte(uint8_t wb) {};
void 	wizchip_spi_writebyte(uint8_t wb) {}
 8005ce0:	b480      	push	{r7}
 8005ce2:	b083      	sub	sp, #12
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	4603      	mov	r3, r0
 8005ce8:	71fb      	strb	r3, [r7, #7]
 8005cea:	bf00      	nop
 8005cec:	370c      	adds	r7, #12
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf4:	4770      	bx	lr

08005cf6 <wizchip_spi_readburst>:
 * @brief Default function to burst read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_readburst(uint8_t* pBuf, uint16_t len) 	{}; 
void 	wizchip_spi_readburst(uint8_t* pBuf, uint16_t len) 	{}
 8005cf6:	b480      	push	{r7}
 8005cf8:	b083      	sub	sp, #12
 8005cfa:	af00      	add	r7, sp, #0
 8005cfc:	6078      	str	r0, [r7, #4]
 8005cfe:	460b      	mov	r3, r1
 8005d00:	807b      	strh	r3, [r7, #2]
 8005d02:	bf00      	nop
 8005d04:	370c      	adds	r7, #12
 8005d06:	46bd      	mov	sp, r7
 8005d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0c:	4770      	bx	lr

08005d0e <wizchip_spi_writeburst>:
 * @brief Default function to burst write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {};
void 	wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {}
 8005d0e:	b480      	push	{r7}
 8005d10:	b083      	sub	sp, #12
 8005d12:	af00      	add	r7, sp, #0
 8005d14:	6078      	str	r0, [r7, #4]
 8005d16:	460b      	mov	r3, r1
 8005d18:	807b      	strh	r3, [r7, #2]
 8005d1a:	bf00      	nop
 8005d1c:	370c      	adds	r7, #12
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d24:	4770      	bx	lr
	...

08005d28 <reg_wizchip_cris_cbfunc>:

static uint8_t    _DNS_[4];      // DNS server ip address
static dhcp_mode  _DHCP_;        // DHCP mode

void reg_wizchip_cris_cbfunc(void(*cris_en)(void), void(*cris_ex)(void))
{
 8005d28:	b480      	push	{r7}
 8005d2a:	b083      	sub	sp, #12
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
 8005d30:	6039      	str	r1, [r7, #0]
   if(!cris_en || !cris_ex)
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d002      	beq.n	8005d3e <reg_wizchip_cris_cbfunc+0x16>
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d106      	bne.n	8005d4c <reg_wizchip_cris_cbfunc+0x24>
   {
      WIZCHIP.CRIS._enter = wizchip_cris_enter;
 8005d3e:	4b0a      	ldr	r3, [pc, #40]	@ (8005d68 <reg_wizchip_cris_cbfunc+0x40>)
 8005d40:	4a0a      	ldr	r2, [pc, #40]	@ (8005d6c <reg_wizchip_cris_cbfunc+0x44>)
 8005d42:	60da      	str	r2, [r3, #12]
      WIZCHIP.CRIS._exit  = wizchip_cris_exit;
 8005d44:	4b08      	ldr	r3, [pc, #32]	@ (8005d68 <reg_wizchip_cris_cbfunc+0x40>)
 8005d46:	4a0a      	ldr	r2, [pc, #40]	@ (8005d70 <reg_wizchip_cris_cbfunc+0x48>)
 8005d48:	611a      	str	r2, [r3, #16]
 8005d4a:	e006      	b.n	8005d5a <reg_wizchip_cris_cbfunc+0x32>
   }
   else
   {
      WIZCHIP.CRIS._enter = cris_en;
 8005d4c:	4a06      	ldr	r2, [pc, #24]	@ (8005d68 <reg_wizchip_cris_cbfunc+0x40>)
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	60d3      	str	r3, [r2, #12]
      WIZCHIP.CRIS._exit  = cris_ex;
 8005d52:	4a05      	ldr	r2, [pc, #20]	@ (8005d68 <reg_wizchip_cris_cbfunc+0x40>)
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	6113      	str	r3, [r2, #16]
   }
}
 8005d58:	bf00      	nop
 8005d5a:	bf00      	nop
 8005d5c:	370c      	adds	r7, #12
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d64:	4770      	bx	lr
 8005d66:	bf00      	nop
 8005d68:	20000020 	.word	0x20000020
 8005d6c:	08005c61 	.word	0x08005c61
 8005d70:	08005c6f 	.word	0x08005c6f

08005d74 <reg_wizchip_cs_cbfunc>:

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
 8005d74:	b480      	push	{r7}
 8005d76:	b083      	sub	sp, #12
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
 8005d7c:	6039      	str	r1, [r7, #0]
   if(!cs_sel || !cs_desel)
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d002      	beq.n	8005d8a <reg_wizchip_cs_cbfunc+0x16>
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d106      	bne.n	8005d98 <reg_wizchip_cs_cbfunc+0x24>
   {
      WIZCHIP.CS._select   = wizchip_cs_select;
 8005d8a:	4b0a      	ldr	r3, [pc, #40]	@ (8005db4 <reg_wizchip_cs_cbfunc+0x40>)
 8005d8c:	4a0a      	ldr	r2, [pc, #40]	@ (8005db8 <reg_wizchip_cs_cbfunc+0x44>)
 8005d8e:	615a      	str	r2, [r3, #20]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 8005d90:	4b08      	ldr	r3, [pc, #32]	@ (8005db4 <reg_wizchip_cs_cbfunc+0x40>)
 8005d92:	4a0a      	ldr	r2, [pc, #40]	@ (8005dbc <reg_wizchip_cs_cbfunc+0x48>)
 8005d94:	619a      	str	r2, [r3, #24]
 8005d96:	e006      	b.n	8005da6 <reg_wizchip_cs_cbfunc+0x32>
   }
   else
   {
      WIZCHIP.CS._select   = cs_sel;
 8005d98:	4a06      	ldr	r2, [pc, #24]	@ (8005db4 <reg_wizchip_cs_cbfunc+0x40>)
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6153      	str	r3, [r2, #20]
      WIZCHIP.CS._deselect = cs_desel;
 8005d9e:	4a05      	ldr	r2, [pc, #20]	@ (8005db4 <reg_wizchip_cs_cbfunc+0x40>)
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	6193      	str	r3, [r2, #24]
   }
}
 8005da4:	bf00      	nop
 8005da6:	bf00      	nop
 8005da8:	370c      	adds	r7, #12
 8005daa:	46bd      	mov	sp, r7
 8005dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db0:	4770      	bx	lr
 8005db2:	bf00      	nop
 8005db4:	20000020 	.word	0x20000020
 8005db8:	08005c7d 	.word	0x08005c7d
 8005dbc:	08005c8b 	.word	0x08005c8b

08005dc0 <reg_wizchip_spi_cbfunc>:
      WIZCHIP.IF.BUS._write_data  = bus_wb;
   }
}

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
 8005dc0:	b480      	push	{r7}
 8005dc2:	b083      	sub	sp, #12
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
 8005dc8:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 8005dca:	bf00      	nop
 8005dcc:	4b0f      	ldr	r3, [pc, #60]	@ (8005e0c <reg_wizchip_spi_cbfunc+0x4c>)
 8005dce:	881b      	ldrh	r3, [r3, #0]
 8005dd0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d0f9      	beq.n	8005dcc <reg_wizchip_spi_cbfunc+0xc>
   
   if(!spi_rb || !spi_wb)
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d002      	beq.n	8005de4 <reg_wizchip_spi_cbfunc+0x24>
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d106      	bne.n	8005df2 <reg_wizchip_spi_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
 8005de4:	4b09      	ldr	r3, [pc, #36]	@ (8005e0c <reg_wizchip_spi_cbfunc+0x4c>)
 8005de6:	4a0a      	ldr	r2, [pc, #40]	@ (8005e10 <reg_wizchip_spi_cbfunc+0x50>)
 8005de8:	61da      	str	r2, [r3, #28]
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
 8005dea:	4b08      	ldr	r3, [pc, #32]	@ (8005e0c <reg_wizchip_spi_cbfunc+0x4c>)
 8005dec:	4a09      	ldr	r2, [pc, #36]	@ (8005e14 <reg_wizchip_spi_cbfunc+0x54>)
 8005dee:	621a      	str	r2, [r3, #32]
 8005df0:	e006      	b.n	8005e00 <reg_wizchip_spi_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
 8005df2:	4a06      	ldr	r2, [pc, #24]	@ (8005e0c <reg_wizchip_spi_cbfunc+0x4c>)
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	61d3      	str	r3, [r2, #28]
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
 8005df8:	4a04      	ldr	r2, [pc, #16]	@ (8005e0c <reg_wizchip_spi_cbfunc+0x4c>)
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	6213      	str	r3, [r2, #32]
   }
}
 8005dfe:	bf00      	nop
 8005e00:	bf00      	nop
 8005e02:	370c      	adds	r7, #12
 8005e04:	46bd      	mov	sp, r7
 8005e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0a:	4770      	bx	lr
 8005e0c:	20000020 	.word	0x20000020
 8005e10:	08005cd1 	.word	0x08005cd1
 8005e14:	08005ce1 	.word	0x08005ce1

08005e18 <reg_wizchip_spiburst_cbfunc>:

// 20140626 Eric Added for SPI burst operations
void reg_wizchip_spiburst_cbfunc(void (*spi_rb)(uint8_t* pBuf, uint16_t len), void (*spi_wb)(uint8_t* pBuf, uint16_t len))
{
 8005e18:	b480      	push	{r7}
 8005e1a:	b083      	sub	sp, #12
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
 8005e20:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 8005e22:	bf00      	nop
 8005e24:	4b0f      	ldr	r3, [pc, #60]	@ (8005e64 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8005e26:	881b      	ldrh	r3, [r3, #0]
 8005e28:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d0f9      	beq.n	8005e24 <reg_wizchip_spiburst_cbfunc+0xc>

   if(!spi_rb || !spi_wb)
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d002      	beq.n	8005e3c <reg_wizchip_spiburst_cbfunc+0x24>
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d106      	bne.n	8005e4a <reg_wizchip_spiburst_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_burst   = wizchip_spi_readburst;
 8005e3c:	4b09      	ldr	r3, [pc, #36]	@ (8005e64 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8005e3e:	4a0a      	ldr	r2, [pc, #40]	@ (8005e68 <reg_wizchip_spiburst_cbfunc+0x50>)
 8005e40:	625a      	str	r2, [r3, #36]	@ 0x24
      WIZCHIP.IF.SPI._write_burst  = wizchip_spi_writeburst;
 8005e42:	4b08      	ldr	r3, [pc, #32]	@ (8005e64 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8005e44:	4a09      	ldr	r2, [pc, #36]	@ (8005e6c <reg_wizchip_spiburst_cbfunc+0x54>)
 8005e46:	629a      	str	r2, [r3, #40]	@ 0x28
 8005e48:	e006      	b.n	8005e58 <reg_wizchip_spiburst_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_burst   = spi_rb;
 8005e4a:	4a06      	ldr	r2, [pc, #24]	@ (8005e64 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	6253      	str	r3, [r2, #36]	@ 0x24
      WIZCHIP.IF.SPI._write_burst  = spi_wb;
 8005e50:	4a04      	ldr	r2, [pc, #16]	@ (8005e64 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	6293      	str	r3, [r2, #40]	@ 0x28
   }
}
 8005e56:	bf00      	nop
 8005e58:	bf00      	nop
 8005e5a:	370c      	adds	r7, #12
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e62:	4770      	bx	lr
 8005e64:	20000020 	.word	0x20000020
 8005e68:	08005cf7 	.word	0x08005cf7
 8005e6c:	08005d0f 	.word	0x08005d0f

08005e70 <ctlwizchip>:

int8_t ctlwizchip(ctlwizchip_type cwtype, void* arg)
{
 8005e70:	b590      	push	{r4, r7, lr}
 8005e72:	b087      	sub	sp, #28
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	4603      	mov	r3, r0
 8005e78:	6039      	str	r1, [r7, #0]
 8005e7a:	71fb      	strb	r3, [r7, #7]
#if	_WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
   uint8_t tmp = 0;
 8005e7c:	2300      	movs	r3, #0
 8005e7e:	75fb      	strb	r3, [r7, #23]
#endif
   uint8_t* ptmp[2] = {0,0};
 8005e80:	2300      	movs	r3, #0
 8005e82:	60fb      	str	r3, [r7, #12]
 8005e84:	2300      	movs	r3, #0
 8005e86:	613b      	str	r3, [r7, #16]
   switch(cwtype)
 8005e88:	79fb      	ldrb	r3, [r7, #7]
 8005e8a:	2b0f      	cmp	r3, #15
 8005e8c:	f200 80c5 	bhi.w	800601a <ctlwizchip+0x1aa>
 8005e90:	a201      	add	r2, pc, #4	@ (adr r2, 8005e98 <ctlwizchip+0x28>)
 8005e92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e96:	bf00      	nop
 8005e98:	08005ed9 	.word	0x08005ed9
 8005e9c:	08005edf 	.word	0x08005edf
 8005ea0:	08005f0b 	.word	0x08005f0b
 8005ea4:	08005eff 	.word	0x08005eff
 8005ea8:	08005f19 	.word	0x08005f19
 8005eac:	08005f25 	.word	0x08005f25
 8005eb0:	08005f33 	.word	0x08005f33
 8005eb4:	08005f59 	.word	0x08005f59
 8005eb8:	08005f7b 	.word	0x08005f7b
 8005ebc:	08005fbf 	.word	0x08005fbf
 8005ec0:	08005fc5 	.word	0x08005fc5
 8005ec4:	08005fcd 	.word	0x08005fcd
 8005ec8:	08006021 	.word	0x08006021
 8005ecc:	08005fd5 	.word	0x08005fd5
 8005ed0:	08005fe3 	.word	0x08005fe3
 8005ed4:	08005fff 	.word	0x08005fff
   {
      case CW_RESET_WIZCHIP:
         wizchip_sw_reset();
 8005ed8:	f000 f8e8 	bl	80060ac <wizchip_sw_reset>
         break;
 8005edc:	e0a1      	b.n	8006022 <ctlwizchip+0x1b2>
      case CW_INIT_WIZCHIP:
         if(arg != 0) 
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d004      	beq.n	8005eee <ctlwizchip+0x7e>
         {
            ptmp[0] = (uint8_t*)arg;
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	60fb      	str	r3, [r7, #12]
            ptmp[1] = ptmp[0] + _WIZCHIP_SOCK_NUM_;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	3308      	adds	r3, #8
 8005eec:	613b      	str	r3, [r7, #16]
         }
         return wizchip_init(ptmp[0], ptmp[1]);
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	693a      	ldr	r2, [r7, #16]
 8005ef2:	4611      	mov	r1, r2
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	f000 f925 	bl	8006144 <wizchip_init>
 8005efa:	4603      	mov	r3, r0
 8005efc:	e092      	b.n	8006024 <ctlwizchip+0x1b4>
      case CW_CLR_INTERRUPT:
         wizchip_clrinterrupt(*((intr_kind*)arg));
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	881b      	ldrh	r3, [r3, #0]
 8005f02:	4618      	mov	r0, r3
 8005f04:	f000 f9aa 	bl	800625c <wizchip_clrinterrupt>
         break;
 8005f08:	e08b      	b.n	8006022 <ctlwizchip+0x1b2>
      case CW_GET_INTERRUPT:
        *((intr_kind*)arg) = wizchip_getinterrupt();
 8005f0a:	f000 f9db 	bl	80062c4 <wizchip_getinterrupt>
 8005f0e:	4603      	mov	r3, r0
 8005f10:	461a      	mov	r2, r3
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	801a      	strh	r2, [r3, #0]
         break;
 8005f16:	e084      	b.n	8006022 <ctlwizchip+0x1b2>
      case CW_SET_INTRMASK:
         wizchip_setinterruptmask(*((intr_kind*)arg));
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	881b      	ldrh	r3, [r3, #0]
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	f000 f9f6 	bl	800630e <wizchip_setinterruptmask>
         break;         
 8005f22:	e07e      	b.n	8006022 <ctlwizchip+0x1b2>
      case CW_GET_INTRMASK:
         *((intr_kind*)arg) = wizchip_getinterruptmask();
 8005f24:	f000 fa0e 	bl	8006344 <wizchip_getinterruptmask>
 8005f28:	4603      	mov	r3, r0
 8005f2a:	461a      	mov	r2, r3
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	801a      	strh	r2, [r3, #0]
         break;
 8005f30:	e077      	b.n	8006022 <ctlwizchip+0x1b2>
   //M20150601 : This can be supported by W5200, W5500
   //#if _WIZCHIP_ > W5100
   #if (_WIZCHIP_ == W5200 || _WIZCHIP_ == W5500)
      case CW_SET_INTRTIME:
         setINTLEVEL(*(uint16_t*)arg);
 8005f32:	683b      	ldr	r3, [r7, #0]
 8005f34:	881b      	ldrh	r3, [r3, #0]
 8005f36:	0a1b      	lsrs	r3, r3, #8
 8005f38:	b29b      	uxth	r3, r3
 8005f3a:	b2db      	uxtb	r3, r3
 8005f3c:	4619      	mov	r1, r3
 8005f3e:	f44f 5098 	mov.w	r0, #4864	@ 0x1300
 8005f42:	f7fe ffb9 	bl	8004eb8 <WIZCHIP_WRITE>
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	881b      	ldrh	r3, [r3, #0]
 8005f4a:	b2db      	uxtb	r3, r3
 8005f4c:	4619      	mov	r1, r3
 8005f4e:	f44f 50a0 	mov.w	r0, #5120	@ 0x1400
 8005f52:	f7fe ffb1 	bl	8004eb8 <WIZCHIP_WRITE>
         break;
 8005f56:	e064      	b.n	8006022 <ctlwizchip+0x1b2>
      case CW_GET_INTRTIME:
         *(uint16_t*)arg = getINTLEVEL();
 8005f58:	f44f 5098 	mov.w	r0, #4864	@ 0x1300
 8005f5c:	f7fe ff60 	bl	8004e20 <WIZCHIP_READ>
 8005f60:	4603      	mov	r3, r0
 8005f62:	021b      	lsls	r3, r3, #8
 8005f64:	b29c      	uxth	r4, r3
 8005f66:	f44f 50a0 	mov.w	r0, #5120	@ 0x1400
 8005f6a:	f7fe ff59 	bl	8004e20 <WIZCHIP_READ>
 8005f6e:	4603      	mov	r3, r0
 8005f70:	4423      	add	r3, r4
 8005f72:	b29a      	uxth	r2, r3
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	801a      	strh	r2, [r3, #0]
         break;
 8005f78:	e053      	b.n	8006022 <ctlwizchip+0x1b2>
   #endif
      case CW_GET_ID:
         ((uint8_t*)arg)[0] = WIZCHIP.id[0];
 8005f7a:	4b2c      	ldr	r3, [pc, #176]	@ (800602c <ctlwizchip+0x1bc>)
 8005f7c:	789a      	ldrb	r2, [r3, #2]
 8005f7e:	683b      	ldr	r3, [r7, #0]
 8005f80:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[1] = WIZCHIP.id[1];
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	3301      	adds	r3, #1
 8005f86:	4a29      	ldr	r2, [pc, #164]	@ (800602c <ctlwizchip+0x1bc>)
 8005f88:	78d2      	ldrb	r2, [r2, #3]
 8005f8a:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[2] = WIZCHIP.id[2];
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	3302      	adds	r3, #2
 8005f90:	4a26      	ldr	r2, [pc, #152]	@ (800602c <ctlwizchip+0x1bc>)
 8005f92:	7912      	ldrb	r2, [r2, #4]
 8005f94:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[3] = WIZCHIP.id[3];
 8005f96:	683b      	ldr	r3, [r7, #0]
 8005f98:	3303      	adds	r3, #3
 8005f9a:	4a24      	ldr	r2, [pc, #144]	@ (800602c <ctlwizchip+0x1bc>)
 8005f9c:	7952      	ldrb	r2, [r2, #5]
 8005f9e:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[4] = WIZCHIP.id[4];
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	3304      	adds	r3, #4
 8005fa4:	4a21      	ldr	r2, [pc, #132]	@ (800602c <ctlwizchip+0x1bc>)
 8005fa6:	7992      	ldrb	r2, [r2, #6]
 8005fa8:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[5] = WIZCHIP.id[5];
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	3305      	adds	r3, #5
 8005fae:	4a1f      	ldr	r2, [pc, #124]	@ (800602c <ctlwizchip+0x1bc>)
 8005fb0:	79d2      	ldrb	r2, [r2, #7]
 8005fb2:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[6] = 0;
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	3306      	adds	r3, #6
 8005fb8:	2200      	movs	r2, #0
 8005fba:	701a      	strb	r2, [r3, #0]
         break;
 8005fbc:	e031      	b.n	8006022 <ctlwizchip+0x1b2>
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5500
      case CW_RESET_PHY:
         wizphy_reset();
 8005fbe:	f000 fa13 	bl	80063e8 <wizphy_reset>
         break;
 8005fc2:	e02e      	b.n	8006022 <ctlwizchip+0x1b2>
      case CW_SET_PHYCONF:
         wizphy_setphyconf((wiz_PhyConf*)arg);
 8005fc4:	6838      	ldr	r0, [r7, #0]
 8005fc6:	f000 fa36 	bl	8006436 <wizphy_setphyconf>
         break;
 8005fca:	e02a      	b.n	8006022 <ctlwizchip+0x1b2>
      case CW_GET_PHYCONF:
         wizphy_getphyconf((wiz_PhyConf*)arg);
 8005fcc:	6838      	ldr	r0, [r7, #0]
 8005fce:	f000 fa75 	bl	80064bc <wizphy_getphyconf>
         break;
 8005fd2:	e026      	b.n	8006022 <ctlwizchip+0x1b2>
      case CW_GET_PHYSTATUS:
         break;
      case CW_SET_PHYPOWMODE:
         return wizphy_setphypmode(*(uint8_t*)arg);
 8005fd4:	683b      	ldr	r3, [r7, #0]
 8005fd6:	781b      	ldrb	r3, [r3, #0]
 8005fd8:	4618      	mov	r0, r3
 8005fda:	f000 fad9 	bl	8006590 <wizphy_setphypmode>
 8005fde:	4603      	mov	r3, r0
 8005fe0:	e020      	b.n	8006024 <ctlwizchip+0x1b4>
   #endif
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
      case CW_GET_PHYPOWMODE:
         tmp = wizphy_getphypmode();
 8005fe2:	f000 f9e8 	bl	80063b6 <wizphy_getphypmode>
 8005fe6:	4603      	mov	r3, r0
 8005fe8:	75fb      	strb	r3, [r7, #23]
         if((int8_t)tmp == -1) return -1;
 8005fea:	7dfb      	ldrb	r3, [r7, #23]
 8005fec:	2bff      	cmp	r3, #255	@ 0xff
 8005fee:	d102      	bne.n	8005ff6 <ctlwizchip+0x186>
 8005ff0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005ff4:	e016      	b.n	8006024 <ctlwizchip+0x1b4>
         *(uint8_t*)arg = tmp;
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	7dfa      	ldrb	r2, [r7, #23]
 8005ffa:	701a      	strb	r2, [r3, #0]
         break;
 8005ffc:	e011      	b.n	8006022 <ctlwizchip+0x1b2>
      case CW_GET_PHYLINK:
         tmp = wizphy_getphylink();
 8005ffe:	f000 f9c4 	bl	800638a <wizphy_getphylink>
 8006002:	4603      	mov	r3, r0
 8006004:	75fb      	strb	r3, [r7, #23]
         if((int8_t)tmp == -1) return -1;
 8006006:	7dfb      	ldrb	r3, [r7, #23]
 8006008:	2bff      	cmp	r3, #255	@ 0xff
 800600a:	d102      	bne.n	8006012 <ctlwizchip+0x1a2>
 800600c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006010:	e008      	b.n	8006024 <ctlwizchip+0x1b4>
         *(uint8_t*)arg = tmp;
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	7dfa      	ldrb	r2, [r7, #23]
 8006016:	701a      	strb	r2, [r3, #0]
         break;
 8006018:	e003      	b.n	8006022 <ctlwizchip+0x1b2>
   #endif      
      default:
         return -1;
 800601a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800601e:	e001      	b.n	8006024 <ctlwizchip+0x1b4>
         break;
 8006020:	bf00      	nop
   }
   return 0;
 8006022:	2300      	movs	r3, #0
}
 8006024:	4618      	mov	r0, r3
 8006026:	371c      	adds	r7, #28
 8006028:	46bd      	mov	sp, r7
 800602a:	bd90      	pop	{r4, r7, pc}
 800602c:	20000020 	.word	0x20000020

08006030 <ctlnetwork>:


int8_t ctlnetwork(ctlnetwork_type cntype, void* arg)
{
 8006030:	b580      	push	{r7, lr}
 8006032:	b082      	sub	sp, #8
 8006034:	af00      	add	r7, sp, #0
 8006036:	4603      	mov	r3, r0
 8006038:	6039      	str	r1, [r7, #0]
 800603a:	71fb      	strb	r3, [r7, #7]
   
   switch(cntype)
 800603c:	79fb      	ldrb	r3, [r7, #7]
 800603e:	2b05      	cmp	r3, #5
 8006040:	d82c      	bhi.n	800609c <ctlnetwork+0x6c>
 8006042:	a201      	add	r2, pc, #4	@ (adr r2, 8006048 <ctlnetwork+0x18>)
 8006044:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006048:	08006061 	.word	0x08006061
 800604c:	08006069 	.word	0x08006069
 8006050:	08006071 	.word	0x08006071
 8006054:	0800607f 	.word	0x0800607f
 8006058:	0800608d 	.word	0x0800608d
 800605c:	08006095 	.word	0x08006095
   {
      case CN_SET_NETINFO:
         wizchip_setnetinfo((wiz_NetInfo*)arg);
 8006060:	6838      	ldr	r0, [r7, #0]
 8006062:	f000 fadf 	bl	8006624 <wizchip_setnetinfo>
         break;
 8006066:	e01c      	b.n	80060a2 <ctlnetwork+0x72>
      case CN_GET_NETINFO:
         wizchip_getnetinfo((wiz_NetInfo*)arg);
 8006068:	6838      	ldr	r0, [r7, #0]
 800606a:	f000 fb1b 	bl	80066a4 <wizchip_getnetinfo>
         break;
 800606e:	e018      	b.n	80060a2 <ctlnetwork+0x72>
      case CN_SET_NETMODE:
         return wizchip_setnetmode(*(netmode_type*)arg);
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	781b      	ldrb	r3, [r3, #0]
 8006074:	4618      	mov	r0, r3
 8006076:	f000 fb55 	bl	8006724 <wizchip_setnetmode>
 800607a:	4603      	mov	r3, r0
 800607c:	e012      	b.n	80060a4 <ctlnetwork+0x74>
      case CN_GET_NETMODE:
         *(netmode_type*)arg = wizchip_getnetmode();
 800607e:	f000 fb73 	bl	8006768 <wizchip_getnetmode>
 8006082:	4603      	mov	r3, r0
 8006084:	461a      	mov	r2, r3
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	701a      	strb	r2, [r3, #0]
         break;
 800608a:	e00a      	b.n	80060a2 <ctlnetwork+0x72>
      case CN_SET_TIMEOUT:
         wizchip_settimeout((wiz_NetTimeout*)arg);
 800608c:	6838      	ldr	r0, [r7, #0]
 800608e:	f000 fb73 	bl	8006778 <wizchip_settimeout>
         break;
 8006092:	e006      	b.n	80060a2 <ctlnetwork+0x72>
      case CN_GET_TIMEOUT:
         wizchip_gettimeout((wiz_NetTimeout*)arg);
 8006094:	6838      	ldr	r0, [r7, #0]
 8006096:	f000 fb90 	bl	80067ba <wizchip_gettimeout>
         break;
 800609a:	e002      	b.n	80060a2 <ctlnetwork+0x72>
      default:
         return -1;
 800609c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80060a0:	e000      	b.n	80060a4 <ctlnetwork+0x74>
   }
   return 0;
 80060a2:	2300      	movs	r3, #0
}
 80060a4:	4618      	mov	r0, r3
 80060a6:	3708      	adds	r7, #8
 80060a8:	46bd      	mov	sp, r7
 80060aa:	bd80      	pop	{r7, pc}

080060ac <wizchip_sw_reset>:

void wizchip_sw_reset(void)
{
 80060ac:	b580      	push	{r7, lr}
 80060ae:	b086      	sub	sp, #24
 80060b0:	af00      	add	r7, sp, #0
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 80060b2:	1d3b      	adds	r3, r7, #4
 80060b4:	2206      	movs	r2, #6
 80060b6:	4619      	mov	r1, r3
 80060b8:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 80060bc:	f7fe ff4a 	bl	8004f54 <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 80060c0:	f107 0314 	add.w	r3, r7, #20
 80060c4:	2204      	movs	r2, #4
 80060c6:	4619      	mov	r1, r3
 80060c8:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80060cc:	f7fe ff42 	bl	8004f54 <WIZCHIP_READ_BUF>
 80060d0:	f107 0310 	add.w	r3, r7, #16
 80060d4:	2204      	movs	r2, #4
 80060d6:	4619      	mov	r1, r3
 80060d8:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 80060dc:	f7fe ff3a 	bl	8004f54 <WIZCHIP_READ_BUF>
 80060e0:	f107 030c 	add.w	r3, r7, #12
 80060e4:	2204      	movs	r2, #4
 80060e6:	4619      	mov	r1, r3
 80060e8:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 80060ec:	f7fe ff32 	bl	8004f54 <WIZCHIP_READ_BUF>
   setMR(MR_RST);
 80060f0:	2180      	movs	r1, #128	@ 0x80
 80060f2:	2000      	movs	r0, #0
 80060f4:	f7fe fee0 	bl	8004eb8 <WIZCHIP_WRITE>
   getMR(); // for delay
 80060f8:	2000      	movs	r0, #0
 80060fa:	f7fe fe91 	bl	8004e20 <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 80060fe:	1d3b      	adds	r3, r7, #4
 8006100:	2206      	movs	r2, #6
 8006102:	4619      	mov	r1, r3
 8006104:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 8006108:	f7fe ff84 	bl	8005014 <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 800610c:	f107 0314 	add.w	r3, r7, #20
 8006110:	2204      	movs	r2, #4
 8006112:	4619      	mov	r1, r3
 8006114:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8006118:	f7fe ff7c 	bl	8005014 <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 800611c:	f107 0310 	add.w	r3, r7, #16
 8006120:	2204      	movs	r2, #4
 8006122:	4619      	mov	r1, r3
 8006124:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 8006128:	f7fe ff74 	bl	8005014 <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 800612c:	f107 030c 	add.w	r3, r7, #12
 8006130:	2204      	movs	r2, #4
 8006132:	4619      	mov	r1, r3
 8006134:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 8006138:	f7fe ff6c 	bl	8005014 <WIZCHIP_WRITE_BUF>
}
 800613c:	bf00      	nop
 800613e:	3718      	adds	r7, #24
 8006140:	46bd      	mov	sp, r7
 8006142:	bd80      	pop	{r7, pc}

08006144 <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 8006144:	b580      	push	{r7, lr}
 8006146:	b084      	sub	sp, #16
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
 800614c:	6039      	str	r1, [r7, #0]
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
 800614e:	2300      	movs	r3, #0
 8006150:	73bb      	strb	r3, [r7, #14]
   wizchip_sw_reset();
 8006152:	f7ff ffab 	bl	80060ac <wizchip_sw_reset>
   if(txsize)
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d03b      	beq.n	80061d4 <wizchip_init+0x90>
   {
      tmp = 0;
 800615c:	2300      	movs	r3, #0
 800615e:	73bb      	strb	r3, [r7, #14]
			tmp += txsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
#else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8006160:	2300      	movs	r3, #0
 8006162:	73fb      	strb	r3, [r7, #15]
 8006164:	e015      	b.n	8006192 <wizchip_init+0x4e>
		{
			tmp += txsize[i];
 8006166:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800616a:	687a      	ldr	r2, [r7, #4]
 800616c:	4413      	add	r3, r2
 800616e:	781a      	ldrb	r2, [r3, #0]
 8006170:	7bbb      	ldrb	r3, [r7, #14]
 8006172:	4413      	add	r3, r2
 8006174:	b2db      	uxtb	r3, r3
 8006176:	73bb      	strb	r3, [r7, #14]

#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
#else
			if(tmp > 16) return -1;
 8006178:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800617c:	2b10      	cmp	r3, #16
 800617e:	dd02      	ble.n	8006186 <wizchip_init+0x42>
 8006180:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006184:	e066      	b.n	8006254 <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8006186:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800618a:	b2db      	uxtb	r3, r3
 800618c:	3301      	adds	r3, #1
 800618e:	b2db      	uxtb	r3, r3
 8006190:	73fb      	strb	r3, [r7, #15]
 8006192:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006196:	2b07      	cmp	r3, #7
 8006198:	dde5      	ble.n	8006166 <wizchip_init+0x22>
#endif
		}
#endif
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800619a:	2300      	movs	r3, #0
 800619c:	73fb      	strb	r3, [r7, #15]
 800619e:	e015      	b.n	80061cc <wizchip_init+0x88>
#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100
			j = 0;
			while((txsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_TXBUF_SIZE(i, j);
#else
			setSn_TXBUF_SIZE(i, txsize[i]);
 80061a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80061a4:	009b      	lsls	r3, r3, #2
 80061a6:	3301      	adds	r3, #1
 80061a8:	00db      	lsls	r3, r3, #3
 80061aa:	f503 53f8 	add.w	r3, r3, #7936	@ 0x1f00
 80061ae:	4618      	mov	r0, r3
 80061b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80061b4:	687a      	ldr	r2, [r7, #4]
 80061b6:	4413      	add	r3, r2
 80061b8:	781b      	ldrb	r3, [r3, #0]
 80061ba:	4619      	mov	r1, r3
 80061bc:	f7fe fe7c 	bl	8004eb8 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80061c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80061c4:	b2db      	uxtb	r3, r3
 80061c6:	3301      	adds	r3, #1
 80061c8:	b2db      	uxtb	r3, r3
 80061ca:	73fb      	strb	r3, [r7, #15]
 80061cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80061d0:	2b07      	cmp	r3, #7
 80061d2:	dde5      	ble.n	80061a0 <wizchip_init+0x5c>
#endif
		}	
   }

   if(rxsize)
 80061d4:	683b      	ldr	r3, [r7, #0]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d03b      	beq.n	8006252 <wizchip_init+0x10e>
   {
      tmp = 0;
 80061da:	2300      	movs	r3, #0
 80061dc:	73bb      	strb	r3, [r7, #14]
			tmp += rxsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
#else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80061de:	2300      	movs	r3, #0
 80061e0:	73fb      	strb	r3, [r7, #15]
 80061e2:	e015      	b.n	8006210 <wizchip_init+0xcc>
		{
			tmp += rxsize[i];
 80061e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80061e8:	683a      	ldr	r2, [r7, #0]
 80061ea:	4413      	add	r3, r2
 80061ec:	781a      	ldrb	r2, [r3, #0]
 80061ee:	7bbb      	ldrb	r3, [r7, #14]
 80061f0:	4413      	add	r3, r2
 80061f2:	b2db      	uxtb	r3, r3
 80061f4:	73bb      	strb	r3, [r7, #14]
#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
#else
			if(tmp > 16) return -1;
 80061f6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80061fa:	2b10      	cmp	r3, #16
 80061fc:	dd02      	ble.n	8006204 <wizchip_init+0xc0>
 80061fe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006202:	e027      	b.n	8006254 <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8006204:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006208:	b2db      	uxtb	r3, r3
 800620a:	3301      	adds	r3, #1
 800620c:	b2db      	uxtb	r3, r3
 800620e:	73fb      	strb	r3, [r7, #15]
 8006210:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006214:	2b07      	cmp	r3, #7
 8006216:	dde5      	ble.n	80061e4 <wizchip_init+0xa0>
#endif
		}
#endif
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8006218:	2300      	movs	r3, #0
 800621a:	73fb      	strb	r3, [r7, #15]
 800621c:	e015      	b.n	800624a <wizchip_init+0x106>
#if _WIZCHIP_ < W5200	// add condition for w5100
			j = 0;
			while((rxsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_RXBUF_SIZE(i, j);
#else
			setSn_RXBUF_SIZE(i, rxsize[i]);
 800621e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006222:	009b      	lsls	r3, r3, #2
 8006224:	3301      	adds	r3, #1
 8006226:	00db      	lsls	r3, r3, #3
 8006228:	f503 53f0 	add.w	r3, r3, #7680	@ 0x1e00
 800622c:	4618      	mov	r0, r3
 800622e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006232:	683a      	ldr	r2, [r7, #0]
 8006234:	4413      	add	r3, r2
 8006236:	781b      	ldrb	r3, [r3, #0]
 8006238:	4619      	mov	r1, r3
 800623a:	f7fe fe3d 	bl	8004eb8 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800623e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006242:	b2db      	uxtb	r3, r3
 8006244:	3301      	adds	r3, #1
 8006246:	b2db      	uxtb	r3, r3
 8006248:	73fb      	strb	r3, [r7, #15]
 800624a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800624e:	2b07      	cmp	r3, #7
 8006250:	dde5      	ble.n	800621e <wizchip_init+0xda>
#endif
		}
   }
   return 0;
 8006252:	2300      	movs	r3, #0
}
 8006254:	4618      	mov	r0, r3
 8006256:	3710      	adds	r7, #16
 8006258:	46bd      	mov	sp, r7
 800625a:	bd80      	pop	{r7, pc}

0800625c <wizchip_clrinterrupt>:

void wizchip_clrinterrupt(intr_kind intr)
{
 800625c:	b580      	push	{r7, lr}
 800625e:	b084      	sub	sp, #16
 8006260:	af00      	add	r7, sp, #0
 8006262:	4603      	mov	r3, r0
 8006264:	80fb      	strh	r3, [r7, #6]
   uint8_t ir  = (uint8_t)intr;
 8006266:	88fb      	ldrh	r3, [r7, #6]
 8006268:	73fb      	strb	r3, [r7, #15]
   uint8_t sir = (uint8_t)((uint16_t)intr >> 8);
 800626a:	88fb      	ldrh	r3, [r7, #6]
 800626c:	0a1b      	lsrs	r3, r3, #8
 800626e:	b29b      	uxth	r3, r3
 8006270:	73bb      	strb	r3, [r7, #14]
   setIR(ir);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIR( ((((uint16_t)ir) << 8) | (((uint16_t)sir) & 0x00FF)) );
#else
   setIR(ir);
 8006272:	7bfb      	ldrb	r3, [r7, #15]
 8006274:	f023 030f 	bic.w	r3, r3, #15
 8006278:	b2db      	uxtb	r3, r3
 800627a:	4619      	mov	r1, r3
 800627c:	f44f 50a8 	mov.w	r0, #5376	@ 0x1500
 8006280:	f7fe fe1a 	bl	8004eb8 <WIZCHIP_WRITE>
//M20200227 : For clear
   //setSIR(sir);
   for(ir=0; ir<8; ir++){
 8006284:	2300      	movs	r3, #0
 8006286:	73fb      	strb	r3, [r7, #15]
 8006288:	e014      	b.n	80062b4 <wizchip_clrinterrupt+0x58>
       if(sir & (0x01 <<ir) ) setSn_IR(ir, 0xff);
 800628a:	7bba      	ldrb	r2, [r7, #14]
 800628c:	7bfb      	ldrb	r3, [r7, #15]
 800628e:	fa42 f303 	asr.w	r3, r2, r3
 8006292:	f003 0301 	and.w	r3, r3, #1
 8006296:	2b00      	cmp	r3, #0
 8006298:	d009      	beq.n	80062ae <wizchip_clrinterrupt+0x52>
 800629a:	7bfb      	ldrb	r3, [r7, #15]
 800629c:	009b      	lsls	r3, r3, #2
 800629e:	3301      	adds	r3, #1
 80062a0:	00db      	lsls	r3, r3, #3
 80062a2:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80062a6:	211f      	movs	r1, #31
 80062a8:	4618      	mov	r0, r3
 80062aa:	f7fe fe05 	bl	8004eb8 <WIZCHIP_WRITE>
   for(ir=0; ir<8; ir++){
 80062ae:	7bfb      	ldrb	r3, [r7, #15]
 80062b0:	3301      	adds	r3, #1
 80062b2:	73fb      	strb	r3, [r7, #15]
 80062b4:	7bfb      	ldrb	r3, [r7, #15]
 80062b6:	2b07      	cmp	r3, #7
 80062b8:	d9e7      	bls.n	800628a <wizchip_clrinterrupt+0x2e>
   }

#endif   
}
 80062ba:	bf00      	nop
 80062bc:	bf00      	nop
 80062be:	3710      	adds	r7, #16
 80062c0:	46bd      	mov	sp, r7
 80062c2:	bd80      	pop	{r7, pc}

080062c4 <wizchip_getinterrupt>:

intr_kind wizchip_getinterrupt(void)
{
 80062c4:	b580      	push	{r7, lr}
 80062c6:	b082      	sub	sp, #8
 80062c8:	af00      	add	r7, sp, #0
   uint8_t ir  = 0;
 80062ca:	2300      	movs	r3, #0
 80062cc:	71fb      	strb	r3, [r7, #7]
   uint8_t sir = 0;
 80062ce:	2300      	movs	r3, #0
 80062d0:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 80062d2:	2300      	movs	r3, #0
 80062d4:	80bb      	strh	r3, [r7, #4]
#elif _WIZCHIP_  == W5300
   ret = getIR();
   ir = (uint8_t)(ret >> 8);
   sir = (uint8_t)ret;
#else
   ir  = getIR();
 80062d6:	f44f 50a8 	mov.w	r0, #5376	@ 0x1500
 80062da:	f7fe fda1 	bl	8004e20 <WIZCHIP_READ>
 80062de:	4603      	mov	r3, r0
 80062e0:	f023 030f 	bic.w	r3, r3, #15
 80062e4:	71fb      	strb	r3, [r7, #7]
   sir = getSIR();
 80062e6:	f44f 50b8 	mov.w	r0, #5888	@ 0x1700
 80062ea:	f7fe fd99 	bl	8004e20 <WIZCHIP_READ>
 80062ee:	4603      	mov	r3, r0
 80062f0:	71bb      	strb	r3, [r7, #6]
   ir &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   ir &= ~(1 << 6);
#endif
  ret = sir;
 80062f2:	79bb      	ldrb	r3, [r7, #6]
 80062f4:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + ir;
 80062f6:	88bb      	ldrh	r3, [r7, #4]
 80062f8:	021b      	lsls	r3, r3, #8
 80062fa:	b29a      	uxth	r2, r3
 80062fc:	79fb      	ldrb	r3, [r7, #7]
 80062fe:	b29b      	uxth	r3, r3
 8006300:	4413      	add	r3, r2
 8006302:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 8006304:	88bb      	ldrh	r3, [r7, #4]
}
 8006306:	4618      	mov	r0, r3
 8006308:	3708      	adds	r7, #8
 800630a:	46bd      	mov	sp, r7
 800630c:	bd80      	pop	{r7, pc}

0800630e <wizchip_setinterruptmask>:

void wizchip_setinterruptmask(intr_kind intr)
{
 800630e:	b580      	push	{r7, lr}
 8006310:	b084      	sub	sp, #16
 8006312:	af00      	add	r7, sp, #0
 8006314:	4603      	mov	r3, r0
 8006316:	80fb      	strh	r3, [r7, #6]
   uint8_t imr  = (uint8_t)intr;
 8006318:	88fb      	ldrh	r3, [r7, #6]
 800631a:	73fb      	strb	r3, [r7, #15]
   uint8_t simr = (uint8_t)((uint16_t)intr >> 8);
 800631c:	88fb      	ldrh	r3, [r7, #6]
 800631e:	0a1b      	lsrs	r3, r3, #8
 8006320:	b29b      	uxth	r3, r3
 8006322:	73bb      	strb	r3, [r7, #14]
   setIMR(imr);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIMR( ((((uint16_t)imr) << 8) | (((uint16_t)simr) & 0x00FF)) );
#else
   setIMR(imr);
 8006324:	7bfb      	ldrb	r3, [r7, #15]
 8006326:	4619      	mov	r1, r3
 8006328:	f44f 50b0 	mov.w	r0, #5632	@ 0x1600
 800632c:	f7fe fdc4 	bl	8004eb8 <WIZCHIP_WRITE>
   setSIMR(simr);
 8006330:	7bbb      	ldrb	r3, [r7, #14]
 8006332:	4619      	mov	r1, r3
 8006334:	f44f 50c0 	mov.w	r0, #6144	@ 0x1800
 8006338:	f7fe fdbe 	bl	8004eb8 <WIZCHIP_WRITE>
#endif   
}
 800633c:	bf00      	nop
 800633e:	3710      	adds	r7, #16
 8006340:	46bd      	mov	sp, r7
 8006342:	bd80      	pop	{r7, pc}

08006344 <wizchip_getinterruptmask>:

intr_kind wizchip_getinterruptmask(void)
{
 8006344:	b580      	push	{r7, lr}
 8006346:	b082      	sub	sp, #8
 8006348:	af00      	add	r7, sp, #0
   uint8_t imr  = 0;
 800634a:	2300      	movs	r3, #0
 800634c:	71fb      	strb	r3, [r7, #7]
   uint8_t simr = 0;
 800634e:	2300      	movs	r3, #0
 8006350:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 8006352:	2300      	movs	r3, #0
 8006354:	80bb      	strh	r3, [r7, #4]
#elif _WIZCHIP_ == W5300
   ret = getIMR();
   imr = (uint8_t)(ret >> 8);
   simr = (uint8_t)ret;
#else
   imr  = getIMR();
 8006356:	f44f 50b0 	mov.w	r0, #5632	@ 0x1600
 800635a:	f7fe fd61 	bl	8004e20 <WIZCHIP_READ>
 800635e:	4603      	mov	r3, r0
 8006360:	71fb      	strb	r3, [r7, #7]
   simr = getSIMR();
 8006362:	f44f 50c0 	mov.w	r0, #6144	@ 0x1800
 8006366:	f7fe fd5b 	bl	8004e20 <WIZCHIP_READ>
 800636a:	4603      	mov	r3, r0
 800636c:	71bb      	strb	r3, [r7, #6]
   imr &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   imr &= ~(1 << 6);  // IK_DEST_UNREACH
#endif
  ret = simr;
 800636e:	79bb      	ldrb	r3, [r7, #6]
 8006370:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + imr;
 8006372:	88bb      	ldrh	r3, [r7, #4]
 8006374:	021b      	lsls	r3, r3, #8
 8006376:	b29a      	uxth	r2, r3
 8006378:	79fb      	ldrb	r3, [r7, #7]
 800637a:	b29b      	uxth	r3, r3
 800637c:	4413      	add	r3, r2
 800637e:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 8006380:	88bb      	ldrh	r3, [r7, #4]
}
 8006382:	4618      	mov	r0, r3
 8006384:	3708      	adds	r7, #8
 8006386:	46bd      	mov	sp, r7
 8006388:	bd80      	pop	{r7, pc}

0800638a <wizphy_getphylink>:

int8_t wizphy_getphylink(void)
{
 800638a:	b580      	push	{r7, lr}
 800638c:	b082      	sub	sp, #8
 800638e:	af00      	add	r7, sp, #0
   int8_t tmp = PHY_LINK_OFF;
 8006390:	2300      	movs	r3, #0
 8006392:	71fb      	strb	r3, [r7, #7]
	   tmp = PHY_LINK_ON;
#elif   _WIZCHIP_ == W5200
   if(getPHYSTATUS() & PHYSTATUS_LINK)
      tmp = PHY_LINK_ON;
#elif _WIZCHIP_ == W5500
   if(getPHYCFGR() & PHYCFGR_LNK_ON)
 8006394:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8006398:	f7fe fd42 	bl	8004e20 <WIZCHIP_READ>
 800639c:	4603      	mov	r3, r0
 800639e:	f003 0301 	and.w	r3, r3, #1
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d001      	beq.n	80063aa <wizphy_getphylink+0x20>
      tmp = PHY_LINK_ON;
 80063a6:	2301      	movs	r3, #1
 80063a8:	71fb      	strb	r3, [r7, #7]

#else
   tmp = -1;
#endif
   return tmp;
 80063aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 80063ae:	4618      	mov	r0, r3
 80063b0:	3708      	adds	r7, #8
 80063b2:	46bd      	mov	sp, r7
 80063b4:	bd80      	pop	{r7, pc}

080063b6 <wizphy_getphypmode>:

#if _WIZCHIP_ > W5100

int8_t wizphy_getphypmode(void)
{
 80063b6:	b580      	push	{r7, lr}
 80063b8:	b082      	sub	sp, #8
 80063ba:	af00      	add	r7, sp, #0
   int8_t tmp = 0;
 80063bc:	2300      	movs	r3, #0
 80063be:	71fb      	strb	r3, [r7, #7]
      if(getPHYSTATUS() & PHYSTATUS_POWERDOWN)
         tmp = PHY_POWER_DOWN;
      else          
         tmp = PHY_POWER_NORM;
   #elif _WIZCHIP_ == 5500
      if((getPHYCFGR() & PHYCFGR_OPMDC_ALLA) == PHYCFGR_OPMDC_PDOWN)
 80063c0:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 80063c4:	f7fe fd2c 	bl	8004e20 <WIZCHIP_READ>
 80063c8:	4603      	mov	r3, r0
 80063ca:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80063ce:	2b30      	cmp	r3, #48	@ 0x30
 80063d0:	d102      	bne.n	80063d8 <wizphy_getphypmode+0x22>
         tmp = PHY_POWER_DOWN;
 80063d2:	2301      	movs	r3, #1
 80063d4:	71fb      	strb	r3, [r7, #7]
 80063d6:	e001      	b.n	80063dc <wizphy_getphypmode+0x26>
      else 
         tmp = PHY_POWER_NORM;
 80063d8:	2300      	movs	r3, #0
 80063da:	71fb      	strb	r3, [r7, #7]
   #else
      tmp = -1;
   #endif
   return tmp;
 80063dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 80063e0:	4618      	mov	r0, r3
 80063e2:	3708      	adds	r7, #8
 80063e4:	46bd      	mov	sp, r7
 80063e6:	bd80      	pop	{r7, pc}

080063e8 <wizphy_reset>:
}

#endif
#if _WIZCHIP_ == W5500
void wizphy_reset(void)
{
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b082      	sub	sp, #8
 80063ec:	af00      	add	r7, sp, #0
   uint8_t tmp = getPHYCFGR();
 80063ee:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 80063f2:	f7fe fd15 	bl	8004e20 <WIZCHIP_READ>
 80063f6:	4603      	mov	r3, r0
 80063f8:	71fb      	strb	r3, [r7, #7]
   tmp &= PHYCFGR_RST;
 80063fa:	79fb      	ldrb	r3, [r7, #7]
 80063fc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006400:	71fb      	strb	r3, [r7, #7]
   setPHYCFGR(tmp);
 8006402:	79fb      	ldrb	r3, [r7, #7]
 8006404:	4619      	mov	r1, r3
 8006406:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 800640a:	f7fe fd55 	bl	8004eb8 <WIZCHIP_WRITE>
   tmp = getPHYCFGR();
 800640e:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8006412:	f7fe fd05 	bl	8004e20 <WIZCHIP_READ>
 8006416:	4603      	mov	r3, r0
 8006418:	71fb      	strb	r3, [r7, #7]
   tmp |= ~PHYCFGR_RST;
 800641a:	79fb      	ldrb	r3, [r7, #7]
 800641c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006420:	71fb      	strb	r3, [r7, #7]
   setPHYCFGR(tmp);
 8006422:	79fb      	ldrb	r3, [r7, #7]
 8006424:	4619      	mov	r1, r3
 8006426:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 800642a:	f7fe fd45 	bl	8004eb8 <WIZCHIP_WRITE>
}
 800642e:	bf00      	nop
 8006430:	3708      	adds	r7, #8
 8006432:	46bd      	mov	sp, r7
 8006434:	bd80      	pop	{r7, pc}

08006436 <wizphy_setphyconf>:

void wizphy_setphyconf(wiz_PhyConf* phyconf)
{
 8006436:	b580      	push	{r7, lr}
 8006438:	b084      	sub	sp, #16
 800643a:	af00      	add	r7, sp, #0
 800643c:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 800643e:	2300      	movs	r3, #0
 8006440:	73fb      	strb	r3, [r7, #15]
   if(phyconf->by == PHY_CONFBY_SW)
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	781b      	ldrb	r3, [r3, #0]
 8006446:	2b01      	cmp	r3, #1
 8006448:	d104      	bne.n	8006454 <wizphy_setphyconf+0x1e>
      tmp |= PHYCFGR_OPMD;
 800644a:	7bfb      	ldrb	r3, [r7, #15]
 800644c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006450:	73fb      	strb	r3, [r7, #15]
 8006452:	e003      	b.n	800645c <wizphy_setphyconf+0x26>
   else
      tmp &= ~PHYCFGR_OPMD;
 8006454:	7bfb      	ldrb	r3, [r7, #15]
 8006456:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800645a:	73fb      	strb	r3, [r7, #15]
   if(phyconf->mode == PHY_MODE_AUTONEGO)
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	785b      	ldrb	r3, [r3, #1]
 8006460:	2b01      	cmp	r3, #1
 8006462:	d104      	bne.n	800646e <wizphy_setphyconf+0x38>
      tmp |= PHYCFGR_OPMDC_ALLA;
 8006464:	7bfb      	ldrb	r3, [r7, #15]
 8006466:	f043 0338 	orr.w	r3, r3, #56	@ 0x38
 800646a:	73fb      	strb	r3, [r7, #15]
 800646c:	e019      	b.n	80064a2 <wizphy_setphyconf+0x6c>
   else
   {
      if(phyconf->duplex == PHY_DUPLEX_FULL)
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	78db      	ldrb	r3, [r3, #3]
 8006472:	2b01      	cmp	r3, #1
 8006474:	d10d      	bne.n	8006492 <wizphy_setphyconf+0x5c>
      {
         if(phyconf->speed == PHY_SPEED_100)
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	789b      	ldrb	r3, [r3, #2]
 800647a:	2b01      	cmp	r3, #1
 800647c:	d104      	bne.n	8006488 <wizphy_setphyconf+0x52>
            tmp |= PHYCFGR_OPMDC_100F;
 800647e:	7bfb      	ldrb	r3, [r7, #15]
 8006480:	f043 0318 	orr.w	r3, r3, #24
 8006484:	73fb      	strb	r3, [r7, #15]
 8006486:	e00c      	b.n	80064a2 <wizphy_setphyconf+0x6c>
         else
            tmp |= PHYCFGR_OPMDC_10F;
 8006488:	7bfb      	ldrb	r3, [r7, #15]
 800648a:	f043 0308 	orr.w	r3, r3, #8
 800648e:	73fb      	strb	r3, [r7, #15]
 8006490:	e007      	b.n	80064a2 <wizphy_setphyconf+0x6c>
      }   
      else
      {
         if(phyconf->speed == PHY_SPEED_100)
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	789b      	ldrb	r3, [r3, #2]
 8006496:	2b01      	cmp	r3, #1
 8006498:	d103      	bne.n	80064a2 <wizphy_setphyconf+0x6c>
            tmp |= PHYCFGR_OPMDC_100H;
 800649a:	7bfb      	ldrb	r3, [r7, #15]
 800649c:	f043 0310 	orr.w	r3, r3, #16
 80064a0:	73fb      	strb	r3, [r7, #15]
         else
            tmp |= PHYCFGR_OPMDC_10H;
      }
   }
   setPHYCFGR(tmp);
 80064a2:	7bfb      	ldrb	r3, [r7, #15]
 80064a4:	4619      	mov	r1, r3
 80064a6:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 80064aa:	f7fe fd05 	bl	8004eb8 <WIZCHIP_WRITE>
   wizphy_reset();
 80064ae:	f7ff ff9b 	bl	80063e8 <wizphy_reset>
}
 80064b2:	bf00      	nop
 80064b4:	3710      	adds	r7, #16
 80064b6:	46bd      	mov	sp, r7
 80064b8:	bd80      	pop	{r7, pc}
	...

080064bc <wizphy_getphyconf>:

void wizphy_getphyconf(wiz_PhyConf* phyconf)
{
 80064bc:	b580      	push	{r7, lr}
 80064be:	b084      	sub	sp, #16
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 80064c4:	2300      	movs	r3, #0
 80064c6:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYCFGR();
 80064c8:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 80064cc:	f7fe fca8 	bl	8004e20 <WIZCHIP_READ>
 80064d0:	4603      	mov	r3, r0
 80064d2:	73fb      	strb	r3, [r7, #15]
   phyconf->by   = (tmp & PHYCFGR_OPMD) ? PHY_CONFBY_SW : PHY_CONFBY_HW;
 80064d4:	7bfb      	ldrb	r3, [r7, #15]
 80064d6:	119b      	asrs	r3, r3, #6
 80064d8:	b2db      	uxtb	r3, r3
 80064da:	f003 0301 	and.w	r3, r3, #1
 80064de:	b2da      	uxtb	r2, r3
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	701a      	strb	r2, [r3, #0]
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 80064e4:	7bfb      	ldrb	r3, [r7, #15]
 80064e6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80064ea:	2b20      	cmp	r3, #32
 80064ec:	d001      	beq.n	80064f2 <wizphy_getphyconf+0x36>
 80064ee:	2b38      	cmp	r3, #56	@ 0x38
 80064f0:	d103      	bne.n	80064fa <wizphy_getphyconf+0x3e>
   {
      case PHYCFGR_OPMDC_ALLA:
      case PHYCFGR_OPMDC_100FA: 
         phyconf->mode = PHY_MODE_AUTONEGO;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	2201      	movs	r2, #1
 80064f6:	705a      	strb	r2, [r3, #1]
         break;
 80064f8:	e003      	b.n	8006502 <wizphy_getphyconf+0x46>
      default:
         phyconf->mode = PHY_MODE_MANUAL;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	2200      	movs	r2, #0
 80064fe:	705a      	strb	r2, [r3, #1]
         break;
 8006500:	bf00      	nop
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 8006502:	7bfb      	ldrb	r3, [r7, #15]
 8006504:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006508:	3b10      	subs	r3, #16
 800650a:	2b10      	cmp	r3, #16
 800650c:	bf8c      	ite	hi
 800650e:	2201      	movhi	r2, #1
 8006510:	2200      	movls	r2, #0
 8006512:	b2d2      	uxtb	r2, r2
 8006514:	2a00      	cmp	r2, #0
 8006516:	d10f      	bne.n	8006538 <wizphy_getphyconf+0x7c>
 8006518:	4a1b      	ldr	r2, [pc, #108]	@ (8006588 <wizphy_getphyconf+0xcc>)
 800651a:	fa22 f303 	lsr.w	r3, r2, r3
 800651e:	f003 0301 	and.w	r3, r3, #1
 8006522:	2b00      	cmp	r3, #0
 8006524:	bf14      	ite	ne
 8006526:	2301      	movne	r3, #1
 8006528:	2300      	moveq	r3, #0
 800652a:	b2db      	uxtb	r3, r3
 800652c:	2b00      	cmp	r3, #0
 800652e:	d003      	beq.n	8006538 <wizphy_getphyconf+0x7c>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_100H:
         phyconf->speed = PHY_SPEED_100;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2201      	movs	r2, #1
 8006534:	709a      	strb	r2, [r3, #2]
         break;
 8006536:	e003      	b.n	8006540 <wizphy_getphyconf+0x84>
      default:
         phyconf->speed = PHY_SPEED_10;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2200      	movs	r2, #0
 800653c:	709a      	strb	r2, [r3, #2]
         break;
 800653e:	bf00      	nop
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 8006540:	7bfb      	ldrb	r3, [r7, #15]
 8006542:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006546:	3b08      	subs	r3, #8
 8006548:	2b18      	cmp	r3, #24
 800654a:	bf8c      	ite	hi
 800654c:	2201      	movhi	r2, #1
 800654e:	2200      	movls	r2, #0
 8006550:	b2d2      	uxtb	r2, r2
 8006552:	2a00      	cmp	r2, #0
 8006554:	d10f      	bne.n	8006576 <wizphy_getphyconf+0xba>
 8006556:	4a0d      	ldr	r2, [pc, #52]	@ (800658c <wizphy_getphyconf+0xd0>)
 8006558:	fa22 f303 	lsr.w	r3, r2, r3
 800655c:	f003 0301 	and.w	r3, r3, #1
 8006560:	2b00      	cmp	r3, #0
 8006562:	bf14      	ite	ne
 8006564:	2301      	movne	r3, #1
 8006566:	2300      	moveq	r3, #0
 8006568:	b2db      	uxtb	r3, r3
 800656a:	2b00      	cmp	r3, #0
 800656c:	d003      	beq.n	8006576 <wizphy_getphyconf+0xba>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_10F:
         phyconf->duplex = PHY_DUPLEX_FULL;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	2201      	movs	r2, #1
 8006572:	70da      	strb	r2, [r3, #3]
         break;
 8006574:	e003      	b.n	800657e <wizphy_getphyconf+0xc2>
      default:
         phyconf->duplex = PHY_DUPLEX_HALF;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	2200      	movs	r2, #0
 800657a:	70da      	strb	r2, [r3, #3]
         break;
 800657c:	bf00      	nop
   }
}
 800657e:	bf00      	nop
 8006580:	3710      	adds	r7, #16
 8006582:	46bd      	mov	sp, r7
 8006584:	bd80      	pop	{r7, pc}
 8006586:	bf00      	nop
 8006588:	00010101 	.word	0x00010101
 800658c:	01010001 	.word	0x01010001

08006590 <wizphy_setphypmode>:
   phyconf->duplex = (tmp & PHYCFGR_DPX_FULL) ? PHY_DUPLEX_FULL : PHY_DUPLEX_HALF;
   phyconf->speed  = (tmp & PHYCFGR_SPD_100) ? PHY_SPEED_100 : PHY_SPEED_10;
}

int8_t wizphy_setphypmode(uint8_t pmode)
{
 8006590:	b580      	push	{r7, lr}
 8006592:	b084      	sub	sp, #16
 8006594:	af00      	add	r7, sp, #0
 8006596:	4603      	mov	r3, r0
 8006598:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = 0;
 800659a:	2300      	movs	r3, #0
 800659c:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYCFGR();
 800659e:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 80065a2:	f7fe fc3d 	bl	8004e20 <WIZCHIP_READ>
 80065a6:	4603      	mov	r3, r0
 80065a8:	73fb      	strb	r3, [r7, #15]
   if((tmp & PHYCFGR_OPMD)== 0) return -1;
 80065aa:	7bfb      	ldrb	r3, [r7, #15]
 80065ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d102      	bne.n	80065ba <wizphy_setphypmode+0x2a>
 80065b4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80065b8:	e030      	b.n	800661c <wizphy_setphypmode+0x8c>
   tmp &= ~PHYCFGR_OPMDC_ALLA;         
 80065ba:	7bfb      	ldrb	r3, [r7, #15]
 80065bc:	f023 0338 	bic.w	r3, r3, #56	@ 0x38
 80065c0:	73fb      	strb	r3, [r7, #15]
   if( pmode == PHY_POWER_DOWN)
 80065c2:	79fb      	ldrb	r3, [r7, #7]
 80065c4:	2b01      	cmp	r3, #1
 80065c6:	d104      	bne.n	80065d2 <wizphy_setphypmode+0x42>
      tmp |= PHYCFGR_OPMDC_PDOWN;
 80065c8:	7bfb      	ldrb	r3, [r7, #15]
 80065ca:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 80065ce:	73fb      	strb	r3, [r7, #15]
 80065d0:	e003      	b.n	80065da <wizphy_setphypmode+0x4a>
   else
      tmp |= PHYCFGR_OPMDC_ALLA;
 80065d2:	7bfb      	ldrb	r3, [r7, #15]
 80065d4:	f043 0338 	orr.w	r3, r3, #56	@ 0x38
 80065d8:	73fb      	strb	r3, [r7, #15]
   setPHYCFGR(tmp);
 80065da:	7bfb      	ldrb	r3, [r7, #15]
 80065dc:	4619      	mov	r1, r3
 80065de:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 80065e2:	f7fe fc69 	bl	8004eb8 <WIZCHIP_WRITE>
   wizphy_reset();
 80065e6:	f7ff feff 	bl	80063e8 <wizphy_reset>
   tmp = getPHYCFGR();
 80065ea:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 80065ee:	f7fe fc17 	bl	8004e20 <WIZCHIP_READ>
 80065f2:	4603      	mov	r3, r0
 80065f4:	73fb      	strb	r3, [r7, #15]
   if( pmode == PHY_POWER_DOWN)
 80065f6:	79fb      	ldrb	r3, [r7, #7]
 80065f8:	2b01      	cmp	r3, #1
 80065fa:	d106      	bne.n	800660a <wizphy_setphypmode+0x7a>
   {
      if(tmp & PHYCFGR_OPMDC_PDOWN) return 0;
 80065fc:	7bfb      	ldrb	r3, [r7, #15]
 80065fe:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006602:	2b00      	cmp	r3, #0
 8006604:	d008      	beq.n	8006618 <wizphy_setphypmode+0x88>
 8006606:	2300      	movs	r3, #0
 8006608:	e008      	b.n	800661c <wizphy_setphypmode+0x8c>
   }
   else
   {
      if(tmp & PHYCFGR_OPMDC_ALLA) return 0;
 800660a:	7bfb      	ldrb	r3, [r7, #15]
 800660c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006610:	2b00      	cmp	r3, #0
 8006612:	d001      	beq.n	8006618 <wizphy_setphypmode+0x88>
 8006614:	2300      	movs	r3, #0
 8006616:	e001      	b.n	800661c <wizphy_setphypmode+0x8c>
   }
   return -1;
 8006618:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800661c:	4618      	mov	r0, r3
 800661e:	3710      	adds	r7, #16
 8006620:	46bd      	mov	sp, r7
 8006622:	bd80      	pop	{r7, pc}

08006624 <wizchip_setnetinfo>:
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 8006624:	b580      	push	{r7, lr}
 8006626:	b082      	sub	sp, #8
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
   setSHAR(pnetinfo->mac);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2206      	movs	r2, #6
 8006630:	4619      	mov	r1, r3
 8006632:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 8006636:	f7fe fced 	bl	8005014 <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	330e      	adds	r3, #14
 800663e:	2204      	movs	r2, #4
 8006640:	4619      	mov	r1, r3
 8006642:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8006646:	f7fe fce5 	bl	8005014 <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	330a      	adds	r3, #10
 800664e:	2204      	movs	r2, #4
 8006650:	4619      	mov	r1, r3
 8006652:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 8006656:	f7fe fcdd 	bl	8005014 <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	3306      	adds	r3, #6
 800665e:	2204      	movs	r2, #4
 8006660:	4619      	mov	r1, r3
 8006662:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 8006666:	f7fe fcd5 	bl	8005014 <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	7c9a      	ldrb	r2, [r3, #18]
 800666e:	4b0b      	ldr	r3, [pc, #44]	@ (800669c <wizchip_setnetinfo+0x78>)
 8006670:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	7cda      	ldrb	r2, [r3, #19]
 8006676:	4b09      	ldr	r3, [pc, #36]	@ (800669c <wizchip_setnetinfo+0x78>)
 8006678:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	7d1a      	ldrb	r2, [r3, #20]
 800667e:	4b07      	ldr	r3, [pc, #28]	@ (800669c <wizchip_setnetinfo+0x78>)
 8006680:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	7d5a      	ldrb	r2, [r3, #21]
 8006686:	4b05      	ldr	r3, [pc, #20]	@ (800669c <wizchip_setnetinfo+0x78>)
 8006688:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	7d9a      	ldrb	r2, [r3, #22]
 800668e:	4b04      	ldr	r3, [pc, #16]	@ (80066a0 <wizchip_setnetinfo+0x7c>)
 8006690:	701a      	strb	r2, [r3, #0]
}
 8006692:	bf00      	nop
 8006694:	3708      	adds	r7, #8
 8006696:	46bd      	mov	sp, r7
 8006698:	bd80      	pop	{r7, pc}
 800669a:	bf00      	nop
 800669c:	20000a20 	.word	0x20000a20
 80066a0:	20000a24 	.word	0x20000a24

080066a4 <wizchip_getnetinfo>:

void wizchip_getnetinfo(wiz_NetInfo* pnetinfo)
{
 80066a4:	b580      	push	{r7, lr}
 80066a6:	b082      	sub	sp, #8
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]
   getSHAR(pnetinfo->mac);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2206      	movs	r2, #6
 80066b0:	4619      	mov	r1, r3
 80066b2:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 80066b6:	f7fe fc4d 	bl	8004f54 <WIZCHIP_READ_BUF>
   getGAR(pnetinfo->gw);
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	330e      	adds	r3, #14
 80066be:	2204      	movs	r2, #4
 80066c0:	4619      	mov	r1, r3
 80066c2:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80066c6:	f7fe fc45 	bl	8004f54 <WIZCHIP_READ_BUF>
   getSUBR(pnetinfo->sn);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	330a      	adds	r3, #10
 80066ce:	2204      	movs	r2, #4
 80066d0:	4619      	mov	r1, r3
 80066d2:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 80066d6:	f7fe fc3d 	bl	8004f54 <WIZCHIP_READ_BUF>
   getSIPR(pnetinfo->ip);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	3306      	adds	r3, #6
 80066de:	2204      	movs	r2, #4
 80066e0:	4619      	mov	r1, r3
 80066e2:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 80066e6:	f7fe fc35 	bl	8004f54 <WIZCHIP_READ_BUF>
   pnetinfo->dns[0]= _DNS_[0];
 80066ea:	4b0c      	ldr	r3, [pc, #48]	@ (800671c <wizchip_getnetinfo+0x78>)
 80066ec:	781a      	ldrb	r2, [r3, #0]
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	749a      	strb	r2, [r3, #18]
   pnetinfo->dns[1]= _DNS_[1];
 80066f2:	4b0a      	ldr	r3, [pc, #40]	@ (800671c <wizchip_getnetinfo+0x78>)
 80066f4:	785a      	ldrb	r2, [r3, #1]
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	74da      	strb	r2, [r3, #19]
   pnetinfo->dns[2]= _DNS_[2];
 80066fa:	4b08      	ldr	r3, [pc, #32]	@ (800671c <wizchip_getnetinfo+0x78>)
 80066fc:	789a      	ldrb	r2, [r3, #2]
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	751a      	strb	r2, [r3, #20]
   pnetinfo->dns[3]= _DNS_[3];
 8006702:	4b06      	ldr	r3, [pc, #24]	@ (800671c <wizchip_getnetinfo+0x78>)
 8006704:	78da      	ldrb	r2, [r3, #3]
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	755a      	strb	r2, [r3, #21]
   pnetinfo->dhcp  = _DHCP_;
 800670a:	4b05      	ldr	r3, [pc, #20]	@ (8006720 <wizchip_getnetinfo+0x7c>)
 800670c:	781a      	ldrb	r2, [r3, #0]
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	759a      	strb	r2, [r3, #22]
}
 8006712:	bf00      	nop
 8006714:	3708      	adds	r7, #8
 8006716:	46bd      	mov	sp, r7
 8006718:	bd80      	pop	{r7, pc}
 800671a:	bf00      	nop
 800671c:	20000a20 	.word	0x20000a20
 8006720:	20000a24 	.word	0x20000a24

08006724 <wizchip_setnetmode>:

int8_t wizchip_setnetmode(netmode_type netmode)
{
 8006724:	b580      	push	{r7, lr}
 8006726:	b084      	sub	sp, #16
 8006728:	af00      	add	r7, sp, #0
 800672a:	4603      	mov	r3, r0
 800672c:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = 0;
 800672e:	2300      	movs	r3, #0
 8006730:	73fb      	strb	r3, [r7, #15]
#if _WIZCHIP_ != W5500
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK)) return -1;
#else
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK | NM_FORCEARP)) return -1;
 8006732:	79fb      	ldrb	r3, [r7, #7]
 8006734:	f023 033a 	bic.w	r3, r3, #58	@ 0x3a
 8006738:	2b00      	cmp	r3, #0
 800673a:	d002      	beq.n	8006742 <wizchip_setnetmode+0x1e>
 800673c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006740:	e00e      	b.n	8006760 <wizchip_setnetmode+0x3c>
#endif      
   tmp = getMR();
 8006742:	2000      	movs	r0, #0
 8006744:	f7fe fb6c 	bl	8004e20 <WIZCHIP_READ>
 8006748:	4603      	mov	r3, r0
 800674a:	73fb      	strb	r3, [r7, #15]
   tmp |= (uint8_t)netmode;
 800674c:	7bfa      	ldrb	r2, [r7, #15]
 800674e:	79fb      	ldrb	r3, [r7, #7]
 8006750:	4313      	orrs	r3, r2
 8006752:	73fb      	strb	r3, [r7, #15]
   setMR(tmp);
 8006754:	7bfb      	ldrb	r3, [r7, #15]
 8006756:	4619      	mov	r1, r3
 8006758:	2000      	movs	r0, #0
 800675a:	f7fe fbad 	bl	8004eb8 <WIZCHIP_WRITE>
   return 0;
 800675e:	2300      	movs	r3, #0
}
 8006760:	4618      	mov	r0, r3
 8006762:	3710      	adds	r7, #16
 8006764:	46bd      	mov	sp, r7
 8006766:	bd80      	pop	{r7, pc}

08006768 <wizchip_getnetmode>:

netmode_type wizchip_getnetmode(void)
{
 8006768:	b580      	push	{r7, lr}
 800676a:	af00      	add	r7, sp, #0
   return (netmode_type) getMR();
 800676c:	2000      	movs	r0, #0
 800676e:	f7fe fb57 	bl	8004e20 <WIZCHIP_READ>
 8006772:	4603      	mov	r3, r0
}
 8006774:	4618      	mov	r0, r3
 8006776:	bd80      	pop	{r7, pc}

08006778 <wizchip_settimeout>:

void wizchip_settimeout(wiz_NetTimeout* nettime)
{
 8006778:	b580      	push	{r7, lr}
 800677a:	b082      	sub	sp, #8
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
   setRCR(nettime->retry_cnt);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	781b      	ldrb	r3, [r3, #0]
 8006784:	4619      	mov	r1, r3
 8006786:	f44f 50d8 	mov.w	r0, #6912	@ 0x1b00
 800678a:	f7fe fb95 	bl	8004eb8 <WIZCHIP_WRITE>
   setRTR(nettime->time_100us);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	885b      	ldrh	r3, [r3, #2]
 8006792:	0a1b      	lsrs	r3, r3, #8
 8006794:	b29b      	uxth	r3, r3
 8006796:	b2db      	uxtb	r3, r3
 8006798:	4619      	mov	r1, r3
 800679a:	f44f 50c8 	mov.w	r0, #6400	@ 0x1900
 800679e:	f7fe fb8b 	bl	8004eb8 <WIZCHIP_WRITE>
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	885b      	ldrh	r3, [r3, #2]
 80067a6:	b2db      	uxtb	r3, r3
 80067a8:	4619      	mov	r1, r3
 80067aa:	f44f 50d0 	mov.w	r0, #6656	@ 0x1a00
 80067ae:	f7fe fb83 	bl	8004eb8 <WIZCHIP_WRITE>
}
 80067b2:	bf00      	nop
 80067b4:	3708      	adds	r7, #8
 80067b6:	46bd      	mov	sp, r7
 80067b8:	bd80      	pop	{r7, pc}

080067ba <wizchip_gettimeout>:

void wizchip_gettimeout(wiz_NetTimeout* nettime)
{
 80067ba:	b590      	push	{r4, r7, lr}
 80067bc:	b083      	sub	sp, #12
 80067be:	af00      	add	r7, sp, #0
 80067c0:	6078      	str	r0, [r7, #4]
   nettime->retry_cnt = getRCR();
 80067c2:	f44f 50d8 	mov.w	r0, #6912	@ 0x1b00
 80067c6:	f7fe fb2b 	bl	8004e20 <WIZCHIP_READ>
 80067ca:	4603      	mov	r3, r0
 80067cc:	461a      	mov	r2, r3
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	701a      	strb	r2, [r3, #0]
   nettime->time_100us = getRTR();
 80067d2:	f44f 50c8 	mov.w	r0, #6400	@ 0x1900
 80067d6:	f7fe fb23 	bl	8004e20 <WIZCHIP_READ>
 80067da:	4603      	mov	r3, r0
 80067dc:	021b      	lsls	r3, r3, #8
 80067de:	b29c      	uxth	r4, r3
 80067e0:	f44f 50d0 	mov.w	r0, #6656	@ 0x1a00
 80067e4:	f7fe fb1c 	bl	8004e20 <WIZCHIP_READ>
 80067e8:	4603      	mov	r3, r0
 80067ea:	4423      	add	r3, r4
 80067ec:	b29a      	uxth	r2, r3
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	805a      	strh	r2, [r3, #2]
}
 80067f2:	bf00      	nop
 80067f4:	370c      	adds	r7, #12
 80067f6:	46bd      	mov	sp, r7
 80067f8:	bd90      	pop	{r4, r7, pc}
	...

080067fc <DHCP_time_handler>:
	dhcp_tick_next = DHCP_WAIT_TIME;
	dhcp_retry_count = 0;
}

void DHCP_time_handler(void)
{
 80067fc:	b480      	push	{r7}
 80067fe:	af00      	add	r7, sp, #0
	dhcp_tick_1s++;
 8006800:	4b04      	ldr	r3, [pc, #16]	@ (8006814 <DHCP_time_handler+0x18>)
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	3301      	adds	r3, #1
 8006806:	4a03      	ldr	r2, [pc, #12]	@ (8006814 <DHCP_time_handler+0x18>)
 8006808:	6013      	str	r3, [r2, #0]
}
 800680a:	bf00      	nop
 800680c:	46bd      	mov	sp, r7
 800680e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006812:	4770      	bx	lr
 8006814:	20000a28 	.word	0x20000a28

08006818 <std>:
 8006818:	2300      	movs	r3, #0
 800681a:	b510      	push	{r4, lr}
 800681c:	4604      	mov	r4, r0
 800681e:	e9c0 3300 	strd	r3, r3, [r0]
 8006822:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006826:	6083      	str	r3, [r0, #8]
 8006828:	8181      	strh	r1, [r0, #12]
 800682a:	6643      	str	r3, [r0, #100]	@ 0x64
 800682c:	81c2      	strh	r2, [r0, #14]
 800682e:	6183      	str	r3, [r0, #24]
 8006830:	4619      	mov	r1, r3
 8006832:	2208      	movs	r2, #8
 8006834:	305c      	adds	r0, #92	@ 0x5c
 8006836:	f000 f9f9 	bl	8006c2c <memset>
 800683a:	4b0d      	ldr	r3, [pc, #52]	@ (8006870 <std+0x58>)
 800683c:	6263      	str	r3, [r4, #36]	@ 0x24
 800683e:	4b0d      	ldr	r3, [pc, #52]	@ (8006874 <std+0x5c>)
 8006840:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006842:	4b0d      	ldr	r3, [pc, #52]	@ (8006878 <std+0x60>)
 8006844:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006846:	4b0d      	ldr	r3, [pc, #52]	@ (800687c <std+0x64>)
 8006848:	6323      	str	r3, [r4, #48]	@ 0x30
 800684a:	4b0d      	ldr	r3, [pc, #52]	@ (8006880 <std+0x68>)
 800684c:	6224      	str	r4, [r4, #32]
 800684e:	429c      	cmp	r4, r3
 8006850:	d006      	beq.n	8006860 <std+0x48>
 8006852:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006856:	4294      	cmp	r4, r2
 8006858:	d002      	beq.n	8006860 <std+0x48>
 800685a:	33d0      	adds	r3, #208	@ 0xd0
 800685c:	429c      	cmp	r4, r3
 800685e:	d105      	bne.n	800686c <std+0x54>
 8006860:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006864:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006868:	f000 ba58 	b.w	8006d1c <__retarget_lock_init_recursive>
 800686c:	bd10      	pop	{r4, pc}
 800686e:	bf00      	nop
 8006870:	08006a7d 	.word	0x08006a7d
 8006874:	08006a9f 	.word	0x08006a9f
 8006878:	08006ad7 	.word	0x08006ad7
 800687c:	08006afb 	.word	0x08006afb
 8006880:	20000a2c 	.word	0x20000a2c

08006884 <stdio_exit_handler>:
 8006884:	4a02      	ldr	r2, [pc, #8]	@ (8006890 <stdio_exit_handler+0xc>)
 8006886:	4903      	ldr	r1, [pc, #12]	@ (8006894 <stdio_exit_handler+0x10>)
 8006888:	4803      	ldr	r0, [pc, #12]	@ (8006898 <stdio_exit_handler+0x14>)
 800688a:	f000 b869 	b.w	8006960 <_fwalk_sglue>
 800688e:	bf00      	nop
 8006890:	2000004c 	.word	0x2000004c
 8006894:	080075bd 	.word	0x080075bd
 8006898:	2000005c 	.word	0x2000005c

0800689c <cleanup_stdio>:
 800689c:	6841      	ldr	r1, [r0, #4]
 800689e:	4b0c      	ldr	r3, [pc, #48]	@ (80068d0 <cleanup_stdio+0x34>)
 80068a0:	4299      	cmp	r1, r3
 80068a2:	b510      	push	{r4, lr}
 80068a4:	4604      	mov	r4, r0
 80068a6:	d001      	beq.n	80068ac <cleanup_stdio+0x10>
 80068a8:	f000 fe88 	bl	80075bc <_fflush_r>
 80068ac:	68a1      	ldr	r1, [r4, #8]
 80068ae:	4b09      	ldr	r3, [pc, #36]	@ (80068d4 <cleanup_stdio+0x38>)
 80068b0:	4299      	cmp	r1, r3
 80068b2:	d002      	beq.n	80068ba <cleanup_stdio+0x1e>
 80068b4:	4620      	mov	r0, r4
 80068b6:	f000 fe81 	bl	80075bc <_fflush_r>
 80068ba:	68e1      	ldr	r1, [r4, #12]
 80068bc:	4b06      	ldr	r3, [pc, #24]	@ (80068d8 <cleanup_stdio+0x3c>)
 80068be:	4299      	cmp	r1, r3
 80068c0:	d004      	beq.n	80068cc <cleanup_stdio+0x30>
 80068c2:	4620      	mov	r0, r4
 80068c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80068c8:	f000 be78 	b.w	80075bc <_fflush_r>
 80068cc:	bd10      	pop	{r4, pc}
 80068ce:	bf00      	nop
 80068d0:	20000a2c 	.word	0x20000a2c
 80068d4:	20000a94 	.word	0x20000a94
 80068d8:	20000afc 	.word	0x20000afc

080068dc <global_stdio_init.part.0>:
 80068dc:	b510      	push	{r4, lr}
 80068de:	4b0b      	ldr	r3, [pc, #44]	@ (800690c <global_stdio_init.part.0+0x30>)
 80068e0:	4c0b      	ldr	r4, [pc, #44]	@ (8006910 <global_stdio_init.part.0+0x34>)
 80068e2:	4a0c      	ldr	r2, [pc, #48]	@ (8006914 <global_stdio_init.part.0+0x38>)
 80068e4:	601a      	str	r2, [r3, #0]
 80068e6:	4620      	mov	r0, r4
 80068e8:	2200      	movs	r2, #0
 80068ea:	2104      	movs	r1, #4
 80068ec:	f7ff ff94 	bl	8006818 <std>
 80068f0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80068f4:	2201      	movs	r2, #1
 80068f6:	2109      	movs	r1, #9
 80068f8:	f7ff ff8e 	bl	8006818 <std>
 80068fc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006900:	2202      	movs	r2, #2
 8006902:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006906:	2112      	movs	r1, #18
 8006908:	f7ff bf86 	b.w	8006818 <std>
 800690c:	20000b64 	.word	0x20000b64
 8006910:	20000a2c 	.word	0x20000a2c
 8006914:	08006885 	.word	0x08006885

08006918 <__sfp_lock_acquire>:
 8006918:	4801      	ldr	r0, [pc, #4]	@ (8006920 <__sfp_lock_acquire+0x8>)
 800691a:	f000 ba00 	b.w	8006d1e <__retarget_lock_acquire_recursive>
 800691e:	bf00      	nop
 8006920:	20000b6d 	.word	0x20000b6d

08006924 <__sfp_lock_release>:
 8006924:	4801      	ldr	r0, [pc, #4]	@ (800692c <__sfp_lock_release+0x8>)
 8006926:	f000 b9fb 	b.w	8006d20 <__retarget_lock_release_recursive>
 800692a:	bf00      	nop
 800692c:	20000b6d 	.word	0x20000b6d

08006930 <__sinit>:
 8006930:	b510      	push	{r4, lr}
 8006932:	4604      	mov	r4, r0
 8006934:	f7ff fff0 	bl	8006918 <__sfp_lock_acquire>
 8006938:	6a23      	ldr	r3, [r4, #32]
 800693a:	b11b      	cbz	r3, 8006944 <__sinit+0x14>
 800693c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006940:	f7ff bff0 	b.w	8006924 <__sfp_lock_release>
 8006944:	4b04      	ldr	r3, [pc, #16]	@ (8006958 <__sinit+0x28>)
 8006946:	6223      	str	r3, [r4, #32]
 8006948:	4b04      	ldr	r3, [pc, #16]	@ (800695c <__sinit+0x2c>)
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	2b00      	cmp	r3, #0
 800694e:	d1f5      	bne.n	800693c <__sinit+0xc>
 8006950:	f7ff ffc4 	bl	80068dc <global_stdio_init.part.0>
 8006954:	e7f2      	b.n	800693c <__sinit+0xc>
 8006956:	bf00      	nop
 8006958:	0800689d 	.word	0x0800689d
 800695c:	20000b64 	.word	0x20000b64

08006960 <_fwalk_sglue>:
 8006960:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006964:	4607      	mov	r7, r0
 8006966:	4688      	mov	r8, r1
 8006968:	4614      	mov	r4, r2
 800696a:	2600      	movs	r6, #0
 800696c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006970:	f1b9 0901 	subs.w	r9, r9, #1
 8006974:	d505      	bpl.n	8006982 <_fwalk_sglue+0x22>
 8006976:	6824      	ldr	r4, [r4, #0]
 8006978:	2c00      	cmp	r4, #0
 800697a:	d1f7      	bne.n	800696c <_fwalk_sglue+0xc>
 800697c:	4630      	mov	r0, r6
 800697e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006982:	89ab      	ldrh	r3, [r5, #12]
 8006984:	2b01      	cmp	r3, #1
 8006986:	d907      	bls.n	8006998 <_fwalk_sglue+0x38>
 8006988:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800698c:	3301      	adds	r3, #1
 800698e:	d003      	beq.n	8006998 <_fwalk_sglue+0x38>
 8006990:	4629      	mov	r1, r5
 8006992:	4638      	mov	r0, r7
 8006994:	47c0      	blx	r8
 8006996:	4306      	orrs	r6, r0
 8006998:	3568      	adds	r5, #104	@ 0x68
 800699a:	e7e9      	b.n	8006970 <_fwalk_sglue+0x10>

0800699c <iprintf>:
 800699c:	b40f      	push	{r0, r1, r2, r3}
 800699e:	b507      	push	{r0, r1, r2, lr}
 80069a0:	4906      	ldr	r1, [pc, #24]	@ (80069bc <iprintf+0x20>)
 80069a2:	ab04      	add	r3, sp, #16
 80069a4:	6808      	ldr	r0, [r1, #0]
 80069a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80069aa:	6881      	ldr	r1, [r0, #8]
 80069ac:	9301      	str	r3, [sp, #4]
 80069ae:	f000 fadb 	bl	8006f68 <_vfiprintf_r>
 80069b2:	b003      	add	sp, #12
 80069b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80069b8:	b004      	add	sp, #16
 80069ba:	4770      	bx	lr
 80069bc:	20000058 	.word	0x20000058

080069c0 <_puts_r>:
 80069c0:	6a03      	ldr	r3, [r0, #32]
 80069c2:	b570      	push	{r4, r5, r6, lr}
 80069c4:	6884      	ldr	r4, [r0, #8]
 80069c6:	4605      	mov	r5, r0
 80069c8:	460e      	mov	r6, r1
 80069ca:	b90b      	cbnz	r3, 80069d0 <_puts_r+0x10>
 80069cc:	f7ff ffb0 	bl	8006930 <__sinit>
 80069d0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80069d2:	07db      	lsls	r3, r3, #31
 80069d4:	d405      	bmi.n	80069e2 <_puts_r+0x22>
 80069d6:	89a3      	ldrh	r3, [r4, #12]
 80069d8:	0598      	lsls	r0, r3, #22
 80069da:	d402      	bmi.n	80069e2 <_puts_r+0x22>
 80069dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80069de:	f000 f99e 	bl	8006d1e <__retarget_lock_acquire_recursive>
 80069e2:	89a3      	ldrh	r3, [r4, #12]
 80069e4:	0719      	lsls	r1, r3, #28
 80069e6:	d502      	bpl.n	80069ee <_puts_r+0x2e>
 80069e8:	6923      	ldr	r3, [r4, #16]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d135      	bne.n	8006a5a <_puts_r+0x9a>
 80069ee:	4621      	mov	r1, r4
 80069f0:	4628      	mov	r0, r5
 80069f2:	f000 f8c5 	bl	8006b80 <__swsetup_r>
 80069f6:	b380      	cbz	r0, 8006a5a <_puts_r+0x9a>
 80069f8:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 80069fc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80069fe:	07da      	lsls	r2, r3, #31
 8006a00:	d405      	bmi.n	8006a0e <_puts_r+0x4e>
 8006a02:	89a3      	ldrh	r3, [r4, #12]
 8006a04:	059b      	lsls	r3, r3, #22
 8006a06:	d402      	bmi.n	8006a0e <_puts_r+0x4e>
 8006a08:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006a0a:	f000 f989 	bl	8006d20 <__retarget_lock_release_recursive>
 8006a0e:	4628      	mov	r0, r5
 8006a10:	bd70      	pop	{r4, r5, r6, pc}
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	da04      	bge.n	8006a20 <_puts_r+0x60>
 8006a16:	69a2      	ldr	r2, [r4, #24]
 8006a18:	429a      	cmp	r2, r3
 8006a1a:	dc17      	bgt.n	8006a4c <_puts_r+0x8c>
 8006a1c:	290a      	cmp	r1, #10
 8006a1e:	d015      	beq.n	8006a4c <_puts_r+0x8c>
 8006a20:	6823      	ldr	r3, [r4, #0]
 8006a22:	1c5a      	adds	r2, r3, #1
 8006a24:	6022      	str	r2, [r4, #0]
 8006a26:	7019      	strb	r1, [r3, #0]
 8006a28:	68a3      	ldr	r3, [r4, #8]
 8006a2a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006a2e:	3b01      	subs	r3, #1
 8006a30:	60a3      	str	r3, [r4, #8]
 8006a32:	2900      	cmp	r1, #0
 8006a34:	d1ed      	bne.n	8006a12 <_puts_r+0x52>
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	da11      	bge.n	8006a5e <_puts_r+0x9e>
 8006a3a:	4622      	mov	r2, r4
 8006a3c:	210a      	movs	r1, #10
 8006a3e:	4628      	mov	r0, r5
 8006a40:	f000 f85f 	bl	8006b02 <__swbuf_r>
 8006a44:	3001      	adds	r0, #1
 8006a46:	d0d7      	beq.n	80069f8 <_puts_r+0x38>
 8006a48:	250a      	movs	r5, #10
 8006a4a:	e7d7      	b.n	80069fc <_puts_r+0x3c>
 8006a4c:	4622      	mov	r2, r4
 8006a4e:	4628      	mov	r0, r5
 8006a50:	f000 f857 	bl	8006b02 <__swbuf_r>
 8006a54:	3001      	adds	r0, #1
 8006a56:	d1e7      	bne.n	8006a28 <_puts_r+0x68>
 8006a58:	e7ce      	b.n	80069f8 <_puts_r+0x38>
 8006a5a:	3e01      	subs	r6, #1
 8006a5c:	e7e4      	b.n	8006a28 <_puts_r+0x68>
 8006a5e:	6823      	ldr	r3, [r4, #0]
 8006a60:	1c5a      	adds	r2, r3, #1
 8006a62:	6022      	str	r2, [r4, #0]
 8006a64:	220a      	movs	r2, #10
 8006a66:	701a      	strb	r2, [r3, #0]
 8006a68:	e7ee      	b.n	8006a48 <_puts_r+0x88>
	...

08006a6c <puts>:
 8006a6c:	4b02      	ldr	r3, [pc, #8]	@ (8006a78 <puts+0xc>)
 8006a6e:	4601      	mov	r1, r0
 8006a70:	6818      	ldr	r0, [r3, #0]
 8006a72:	f7ff bfa5 	b.w	80069c0 <_puts_r>
 8006a76:	bf00      	nop
 8006a78:	20000058 	.word	0x20000058

08006a7c <__sread>:
 8006a7c:	b510      	push	{r4, lr}
 8006a7e:	460c      	mov	r4, r1
 8006a80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a84:	f000 f8fc 	bl	8006c80 <_read_r>
 8006a88:	2800      	cmp	r0, #0
 8006a8a:	bfab      	itete	ge
 8006a8c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006a8e:	89a3      	ldrhlt	r3, [r4, #12]
 8006a90:	181b      	addge	r3, r3, r0
 8006a92:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006a96:	bfac      	ite	ge
 8006a98:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006a9a:	81a3      	strhlt	r3, [r4, #12]
 8006a9c:	bd10      	pop	{r4, pc}

08006a9e <__swrite>:
 8006a9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006aa2:	461f      	mov	r7, r3
 8006aa4:	898b      	ldrh	r3, [r1, #12]
 8006aa6:	05db      	lsls	r3, r3, #23
 8006aa8:	4605      	mov	r5, r0
 8006aaa:	460c      	mov	r4, r1
 8006aac:	4616      	mov	r6, r2
 8006aae:	d505      	bpl.n	8006abc <__swrite+0x1e>
 8006ab0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ab4:	2302      	movs	r3, #2
 8006ab6:	2200      	movs	r2, #0
 8006ab8:	f000 f8d0 	bl	8006c5c <_lseek_r>
 8006abc:	89a3      	ldrh	r3, [r4, #12]
 8006abe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006ac2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006ac6:	81a3      	strh	r3, [r4, #12]
 8006ac8:	4632      	mov	r2, r6
 8006aca:	463b      	mov	r3, r7
 8006acc:	4628      	mov	r0, r5
 8006ace:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006ad2:	f000 b8e7 	b.w	8006ca4 <_write_r>

08006ad6 <__sseek>:
 8006ad6:	b510      	push	{r4, lr}
 8006ad8:	460c      	mov	r4, r1
 8006ada:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ade:	f000 f8bd 	bl	8006c5c <_lseek_r>
 8006ae2:	1c43      	adds	r3, r0, #1
 8006ae4:	89a3      	ldrh	r3, [r4, #12]
 8006ae6:	bf15      	itete	ne
 8006ae8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006aea:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006aee:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006af2:	81a3      	strheq	r3, [r4, #12]
 8006af4:	bf18      	it	ne
 8006af6:	81a3      	strhne	r3, [r4, #12]
 8006af8:	bd10      	pop	{r4, pc}

08006afa <__sclose>:
 8006afa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006afe:	f000 b89d 	b.w	8006c3c <_close_r>

08006b02 <__swbuf_r>:
 8006b02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b04:	460e      	mov	r6, r1
 8006b06:	4614      	mov	r4, r2
 8006b08:	4605      	mov	r5, r0
 8006b0a:	b118      	cbz	r0, 8006b14 <__swbuf_r+0x12>
 8006b0c:	6a03      	ldr	r3, [r0, #32]
 8006b0e:	b90b      	cbnz	r3, 8006b14 <__swbuf_r+0x12>
 8006b10:	f7ff ff0e 	bl	8006930 <__sinit>
 8006b14:	69a3      	ldr	r3, [r4, #24]
 8006b16:	60a3      	str	r3, [r4, #8]
 8006b18:	89a3      	ldrh	r3, [r4, #12]
 8006b1a:	071a      	lsls	r2, r3, #28
 8006b1c:	d501      	bpl.n	8006b22 <__swbuf_r+0x20>
 8006b1e:	6923      	ldr	r3, [r4, #16]
 8006b20:	b943      	cbnz	r3, 8006b34 <__swbuf_r+0x32>
 8006b22:	4621      	mov	r1, r4
 8006b24:	4628      	mov	r0, r5
 8006b26:	f000 f82b 	bl	8006b80 <__swsetup_r>
 8006b2a:	b118      	cbz	r0, 8006b34 <__swbuf_r+0x32>
 8006b2c:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8006b30:	4638      	mov	r0, r7
 8006b32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006b34:	6823      	ldr	r3, [r4, #0]
 8006b36:	6922      	ldr	r2, [r4, #16]
 8006b38:	1a98      	subs	r0, r3, r2
 8006b3a:	6963      	ldr	r3, [r4, #20]
 8006b3c:	b2f6      	uxtb	r6, r6
 8006b3e:	4283      	cmp	r3, r0
 8006b40:	4637      	mov	r7, r6
 8006b42:	dc05      	bgt.n	8006b50 <__swbuf_r+0x4e>
 8006b44:	4621      	mov	r1, r4
 8006b46:	4628      	mov	r0, r5
 8006b48:	f000 fd38 	bl	80075bc <_fflush_r>
 8006b4c:	2800      	cmp	r0, #0
 8006b4e:	d1ed      	bne.n	8006b2c <__swbuf_r+0x2a>
 8006b50:	68a3      	ldr	r3, [r4, #8]
 8006b52:	3b01      	subs	r3, #1
 8006b54:	60a3      	str	r3, [r4, #8]
 8006b56:	6823      	ldr	r3, [r4, #0]
 8006b58:	1c5a      	adds	r2, r3, #1
 8006b5a:	6022      	str	r2, [r4, #0]
 8006b5c:	701e      	strb	r6, [r3, #0]
 8006b5e:	6962      	ldr	r2, [r4, #20]
 8006b60:	1c43      	adds	r3, r0, #1
 8006b62:	429a      	cmp	r2, r3
 8006b64:	d004      	beq.n	8006b70 <__swbuf_r+0x6e>
 8006b66:	89a3      	ldrh	r3, [r4, #12]
 8006b68:	07db      	lsls	r3, r3, #31
 8006b6a:	d5e1      	bpl.n	8006b30 <__swbuf_r+0x2e>
 8006b6c:	2e0a      	cmp	r6, #10
 8006b6e:	d1df      	bne.n	8006b30 <__swbuf_r+0x2e>
 8006b70:	4621      	mov	r1, r4
 8006b72:	4628      	mov	r0, r5
 8006b74:	f000 fd22 	bl	80075bc <_fflush_r>
 8006b78:	2800      	cmp	r0, #0
 8006b7a:	d0d9      	beq.n	8006b30 <__swbuf_r+0x2e>
 8006b7c:	e7d6      	b.n	8006b2c <__swbuf_r+0x2a>
	...

08006b80 <__swsetup_r>:
 8006b80:	b538      	push	{r3, r4, r5, lr}
 8006b82:	4b29      	ldr	r3, [pc, #164]	@ (8006c28 <__swsetup_r+0xa8>)
 8006b84:	4605      	mov	r5, r0
 8006b86:	6818      	ldr	r0, [r3, #0]
 8006b88:	460c      	mov	r4, r1
 8006b8a:	b118      	cbz	r0, 8006b94 <__swsetup_r+0x14>
 8006b8c:	6a03      	ldr	r3, [r0, #32]
 8006b8e:	b90b      	cbnz	r3, 8006b94 <__swsetup_r+0x14>
 8006b90:	f7ff fece 	bl	8006930 <__sinit>
 8006b94:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006b98:	0719      	lsls	r1, r3, #28
 8006b9a:	d422      	bmi.n	8006be2 <__swsetup_r+0x62>
 8006b9c:	06da      	lsls	r2, r3, #27
 8006b9e:	d407      	bmi.n	8006bb0 <__swsetup_r+0x30>
 8006ba0:	2209      	movs	r2, #9
 8006ba2:	602a      	str	r2, [r5, #0]
 8006ba4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006ba8:	81a3      	strh	r3, [r4, #12]
 8006baa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006bae:	e033      	b.n	8006c18 <__swsetup_r+0x98>
 8006bb0:	0758      	lsls	r0, r3, #29
 8006bb2:	d512      	bpl.n	8006bda <__swsetup_r+0x5a>
 8006bb4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006bb6:	b141      	cbz	r1, 8006bca <__swsetup_r+0x4a>
 8006bb8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006bbc:	4299      	cmp	r1, r3
 8006bbe:	d002      	beq.n	8006bc6 <__swsetup_r+0x46>
 8006bc0:	4628      	mov	r0, r5
 8006bc2:	f000 f8af 	bl	8006d24 <_free_r>
 8006bc6:	2300      	movs	r3, #0
 8006bc8:	6363      	str	r3, [r4, #52]	@ 0x34
 8006bca:	89a3      	ldrh	r3, [r4, #12]
 8006bcc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006bd0:	81a3      	strh	r3, [r4, #12]
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	6063      	str	r3, [r4, #4]
 8006bd6:	6923      	ldr	r3, [r4, #16]
 8006bd8:	6023      	str	r3, [r4, #0]
 8006bda:	89a3      	ldrh	r3, [r4, #12]
 8006bdc:	f043 0308 	orr.w	r3, r3, #8
 8006be0:	81a3      	strh	r3, [r4, #12]
 8006be2:	6923      	ldr	r3, [r4, #16]
 8006be4:	b94b      	cbnz	r3, 8006bfa <__swsetup_r+0x7a>
 8006be6:	89a3      	ldrh	r3, [r4, #12]
 8006be8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006bec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006bf0:	d003      	beq.n	8006bfa <__swsetup_r+0x7a>
 8006bf2:	4621      	mov	r1, r4
 8006bf4:	4628      	mov	r0, r5
 8006bf6:	f000 fd2f 	bl	8007658 <__smakebuf_r>
 8006bfa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006bfe:	f013 0201 	ands.w	r2, r3, #1
 8006c02:	d00a      	beq.n	8006c1a <__swsetup_r+0x9a>
 8006c04:	2200      	movs	r2, #0
 8006c06:	60a2      	str	r2, [r4, #8]
 8006c08:	6962      	ldr	r2, [r4, #20]
 8006c0a:	4252      	negs	r2, r2
 8006c0c:	61a2      	str	r2, [r4, #24]
 8006c0e:	6922      	ldr	r2, [r4, #16]
 8006c10:	b942      	cbnz	r2, 8006c24 <__swsetup_r+0xa4>
 8006c12:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006c16:	d1c5      	bne.n	8006ba4 <__swsetup_r+0x24>
 8006c18:	bd38      	pop	{r3, r4, r5, pc}
 8006c1a:	0799      	lsls	r1, r3, #30
 8006c1c:	bf58      	it	pl
 8006c1e:	6962      	ldrpl	r2, [r4, #20]
 8006c20:	60a2      	str	r2, [r4, #8]
 8006c22:	e7f4      	b.n	8006c0e <__swsetup_r+0x8e>
 8006c24:	2000      	movs	r0, #0
 8006c26:	e7f7      	b.n	8006c18 <__swsetup_r+0x98>
 8006c28:	20000058 	.word	0x20000058

08006c2c <memset>:
 8006c2c:	4402      	add	r2, r0
 8006c2e:	4603      	mov	r3, r0
 8006c30:	4293      	cmp	r3, r2
 8006c32:	d100      	bne.n	8006c36 <memset+0xa>
 8006c34:	4770      	bx	lr
 8006c36:	f803 1b01 	strb.w	r1, [r3], #1
 8006c3a:	e7f9      	b.n	8006c30 <memset+0x4>

08006c3c <_close_r>:
 8006c3c:	b538      	push	{r3, r4, r5, lr}
 8006c3e:	4d06      	ldr	r5, [pc, #24]	@ (8006c58 <_close_r+0x1c>)
 8006c40:	2300      	movs	r3, #0
 8006c42:	4604      	mov	r4, r0
 8006c44:	4608      	mov	r0, r1
 8006c46:	602b      	str	r3, [r5, #0]
 8006c48:	f7fa fa55 	bl	80010f6 <_close>
 8006c4c:	1c43      	adds	r3, r0, #1
 8006c4e:	d102      	bne.n	8006c56 <_close_r+0x1a>
 8006c50:	682b      	ldr	r3, [r5, #0]
 8006c52:	b103      	cbz	r3, 8006c56 <_close_r+0x1a>
 8006c54:	6023      	str	r3, [r4, #0]
 8006c56:	bd38      	pop	{r3, r4, r5, pc}
 8006c58:	20000b68 	.word	0x20000b68

08006c5c <_lseek_r>:
 8006c5c:	b538      	push	{r3, r4, r5, lr}
 8006c5e:	4d07      	ldr	r5, [pc, #28]	@ (8006c7c <_lseek_r+0x20>)
 8006c60:	4604      	mov	r4, r0
 8006c62:	4608      	mov	r0, r1
 8006c64:	4611      	mov	r1, r2
 8006c66:	2200      	movs	r2, #0
 8006c68:	602a      	str	r2, [r5, #0]
 8006c6a:	461a      	mov	r2, r3
 8006c6c:	f7fa fa6a 	bl	8001144 <_lseek>
 8006c70:	1c43      	adds	r3, r0, #1
 8006c72:	d102      	bne.n	8006c7a <_lseek_r+0x1e>
 8006c74:	682b      	ldr	r3, [r5, #0]
 8006c76:	b103      	cbz	r3, 8006c7a <_lseek_r+0x1e>
 8006c78:	6023      	str	r3, [r4, #0]
 8006c7a:	bd38      	pop	{r3, r4, r5, pc}
 8006c7c:	20000b68 	.word	0x20000b68

08006c80 <_read_r>:
 8006c80:	b538      	push	{r3, r4, r5, lr}
 8006c82:	4d07      	ldr	r5, [pc, #28]	@ (8006ca0 <_read_r+0x20>)
 8006c84:	4604      	mov	r4, r0
 8006c86:	4608      	mov	r0, r1
 8006c88:	4611      	mov	r1, r2
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	602a      	str	r2, [r5, #0]
 8006c8e:	461a      	mov	r2, r3
 8006c90:	f7fa f9f8 	bl	8001084 <_read>
 8006c94:	1c43      	adds	r3, r0, #1
 8006c96:	d102      	bne.n	8006c9e <_read_r+0x1e>
 8006c98:	682b      	ldr	r3, [r5, #0]
 8006c9a:	b103      	cbz	r3, 8006c9e <_read_r+0x1e>
 8006c9c:	6023      	str	r3, [r4, #0]
 8006c9e:	bd38      	pop	{r3, r4, r5, pc}
 8006ca0:	20000b68 	.word	0x20000b68

08006ca4 <_write_r>:
 8006ca4:	b538      	push	{r3, r4, r5, lr}
 8006ca6:	4d07      	ldr	r5, [pc, #28]	@ (8006cc4 <_write_r+0x20>)
 8006ca8:	4604      	mov	r4, r0
 8006caa:	4608      	mov	r0, r1
 8006cac:	4611      	mov	r1, r2
 8006cae:	2200      	movs	r2, #0
 8006cb0:	602a      	str	r2, [r5, #0]
 8006cb2:	461a      	mov	r2, r3
 8006cb4:	f7fa fa03 	bl	80010be <_write>
 8006cb8:	1c43      	adds	r3, r0, #1
 8006cba:	d102      	bne.n	8006cc2 <_write_r+0x1e>
 8006cbc:	682b      	ldr	r3, [r5, #0]
 8006cbe:	b103      	cbz	r3, 8006cc2 <_write_r+0x1e>
 8006cc0:	6023      	str	r3, [r4, #0]
 8006cc2:	bd38      	pop	{r3, r4, r5, pc}
 8006cc4:	20000b68 	.word	0x20000b68

08006cc8 <__errno>:
 8006cc8:	4b01      	ldr	r3, [pc, #4]	@ (8006cd0 <__errno+0x8>)
 8006cca:	6818      	ldr	r0, [r3, #0]
 8006ccc:	4770      	bx	lr
 8006cce:	bf00      	nop
 8006cd0:	20000058 	.word	0x20000058

08006cd4 <__libc_init_array>:
 8006cd4:	b570      	push	{r4, r5, r6, lr}
 8006cd6:	4d0d      	ldr	r5, [pc, #52]	@ (8006d0c <__libc_init_array+0x38>)
 8006cd8:	4c0d      	ldr	r4, [pc, #52]	@ (8006d10 <__libc_init_array+0x3c>)
 8006cda:	1b64      	subs	r4, r4, r5
 8006cdc:	10a4      	asrs	r4, r4, #2
 8006cde:	2600      	movs	r6, #0
 8006ce0:	42a6      	cmp	r6, r4
 8006ce2:	d109      	bne.n	8006cf8 <__libc_init_array+0x24>
 8006ce4:	4d0b      	ldr	r5, [pc, #44]	@ (8006d14 <__libc_init_array+0x40>)
 8006ce6:	4c0c      	ldr	r4, [pc, #48]	@ (8006d18 <__libc_init_array+0x44>)
 8006ce8:	f000 fd24 	bl	8007734 <_init>
 8006cec:	1b64      	subs	r4, r4, r5
 8006cee:	10a4      	asrs	r4, r4, #2
 8006cf0:	2600      	movs	r6, #0
 8006cf2:	42a6      	cmp	r6, r4
 8006cf4:	d105      	bne.n	8006d02 <__libc_init_array+0x2e>
 8006cf6:	bd70      	pop	{r4, r5, r6, pc}
 8006cf8:	f855 3b04 	ldr.w	r3, [r5], #4
 8006cfc:	4798      	blx	r3
 8006cfe:	3601      	adds	r6, #1
 8006d00:	e7ee      	b.n	8006ce0 <__libc_init_array+0xc>
 8006d02:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d06:	4798      	blx	r3
 8006d08:	3601      	adds	r6, #1
 8006d0a:	e7f2      	b.n	8006cf2 <__libc_init_array+0x1e>
 8006d0c:	08007a50 	.word	0x08007a50
 8006d10:	08007a50 	.word	0x08007a50
 8006d14:	08007a50 	.word	0x08007a50
 8006d18:	08007a54 	.word	0x08007a54

08006d1c <__retarget_lock_init_recursive>:
 8006d1c:	4770      	bx	lr

08006d1e <__retarget_lock_acquire_recursive>:
 8006d1e:	4770      	bx	lr

08006d20 <__retarget_lock_release_recursive>:
 8006d20:	4770      	bx	lr
	...

08006d24 <_free_r>:
 8006d24:	b538      	push	{r3, r4, r5, lr}
 8006d26:	4605      	mov	r5, r0
 8006d28:	2900      	cmp	r1, #0
 8006d2a:	d041      	beq.n	8006db0 <_free_r+0x8c>
 8006d2c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006d30:	1f0c      	subs	r4, r1, #4
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	bfb8      	it	lt
 8006d36:	18e4      	addlt	r4, r4, r3
 8006d38:	f000 f8e0 	bl	8006efc <__malloc_lock>
 8006d3c:	4a1d      	ldr	r2, [pc, #116]	@ (8006db4 <_free_r+0x90>)
 8006d3e:	6813      	ldr	r3, [r2, #0]
 8006d40:	b933      	cbnz	r3, 8006d50 <_free_r+0x2c>
 8006d42:	6063      	str	r3, [r4, #4]
 8006d44:	6014      	str	r4, [r2, #0]
 8006d46:	4628      	mov	r0, r5
 8006d48:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006d4c:	f000 b8dc 	b.w	8006f08 <__malloc_unlock>
 8006d50:	42a3      	cmp	r3, r4
 8006d52:	d908      	bls.n	8006d66 <_free_r+0x42>
 8006d54:	6820      	ldr	r0, [r4, #0]
 8006d56:	1821      	adds	r1, r4, r0
 8006d58:	428b      	cmp	r3, r1
 8006d5a:	bf01      	itttt	eq
 8006d5c:	6819      	ldreq	r1, [r3, #0]
 8006d5e:	685b      	ldreq	r3, [r3, #4]
 8006d60:	1809      	addeq	r1, r1, r0
 8006d62:	6021      	streq	r1, [r4, #0]
 8006d64:	e7ed      	b.n	8006d42 <_free_r+0x1e>
 8006d66:	461a      	mov	r2, r3
 8006d68:	685b      	ldr	r3, [r3, #4]
 8006d6a:	b10b      	cbz	r3, 8006d70 <_free_r+0x4c>
 8006d6c:	42a3      	cmp	r3, r4
 8006d6e:	d9fa      	bls.n	8006d66 <_free_r+0x42>
 8006d70:	6811      	ldr	r1, [r2, #0]
 8006d72:	1850      	adds	r0, r2, r1
 8006d74:	42a0      	cmp	r0, r4
 8006d76:	d10b      	bne.n	8006d90 <_free_r+0x6c>
 8006d78:	6820      	ldr	r0, [r4, #0]
 8006d7a:	4401      	add	r1, r0
 8006d7c:	1850      	adds	r0, r2, r1
 8006d7e:	4283      	cmp	r3, r0
 8006d80:	6011      	str	r1, [r2, #0]
 8006d82:	d1e0      	bne.n	8006d46 <_free_r+0x22>
 8006d84:	6818      	ldr	r0, [r3, #0]
 8006d86:	685b      	ldr	r3, [r3, #4]
 8006d88:	6053      	str	r3, [r2, #4]
 8006d8a:	4408      	add	r0, r1
 8006d8c:	6010      	str	r0, [r2, #0]
 8006d8e:	e7da      	b.n	8006d46 <_free_r+0x22>
 8006d90:	d902      	bls.n	8006d98 <_free_r+0x74>
 8006d92:	230c      	movs	r3, #12
 8006d94:	602b      	str	r3, [r5, #0]
 8006d96:	e7d6      	b.n	8006d46 <_free_r+0x22>
 8006d98:	6820      	ldr	r0, [r4, #0]
 8006d9a:	1821      	adds	r1, r4, r0
 8006d9c:	428b      	cmp	r3, r1
 8006d9e:	bf04      	itt	eq
 8006da0:	6819      	ldreq	r1, [r3, #0]
 8006da2:	685b      	ldreq	r3, [r3, #4]
 8006da4:	6063      	str	r3, [r4, #4]
 8006da6:	bf04      	itt	eq
 8006da8:	1809      	addeq	r1, r1, r0
 8006daa:	6021      	streq	r1, [r4, #0]
 8006dac:	6054      	str	r4, [r2, #4]
 8006dae:	e7ca      	b.n	8006d46 <_free_r+0x22>
 8006db0:	bd38      	pop	{r3, r4, r5, pc}
 8006db2:	bf00      	nop
 8006db4:	20000b74 	.word	0x20000b74

08006db8 <sbrk_aligned>:
 8006db8:	b570      	push	{r4, r5, r6, lr}
 8006dba:	4e0f      	ldr	r6, [pc, #60]	@ (8006df8 <sbrk_aligned+0x40>)
 8006dbc:	460c      	mov	r4, r1
 8006dbe:	6831      	ldr	r1, [r6, #0]
 8006dc0:	4605      	mov	r5, r0
 8006dc2:	b911      	cbnz	r1, 8006dca <sbrk_aligned+0x12>
 8006dc4:	f000 fca6 	bl	8007714 <_sbrk_r>
 8006dc8:	6030      	str	r0, [r6, #0]
 8006dca:	4621      	mov	r1, r4
 8006dcc:	4628      	mov	r0, r5
 8006dce:	f000 fca1 	bl	8007714 <_sbrk_r>
 8006dd2:	1c43      	adds	r3, r0, #1
 8006dd4:	d103      	bne.n	8006dde <sbrk_aligned+0x26>
 8006dd6:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8006dda:	4620      	mov	r0, r4
 8006ddc:	bd70      	pop	{r4, r5, r6, pc}
 8006dde:	1cc4      	adds	r4, r0, #3
 8006de0:	f024 0403 	bic.w	r4, r4, #3
 8006de4:	42a0      	cmp	r0, r4
 8006de6:	d0f8      	beq.n	8006dda <sbrk_aligned+0x22>
 8006de8:	1a21      	subs	r1, r4, r0
 8006dea:	4628      	mov	r0, r5
 8006dec:	f000 fc92 	bl	8007714 <_sbrk_r>
 8006df0:	3001      	adds	r0, #1
 8006df2:	d1f2      	bne.n	8006dda <sbrk_aligned+0x22>
 8006df4:	e7ef      	b.n	8006dd6 <sbrk_aligned+0x1e>
 8006df6:	bf00      	nop
 8006df8:	20000b70 	.word	0x20000b70

08006dfc <_malloc_r>:
 8006dfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e00:	1ccd      	adds	r5, r1, #3
 8006e02:	f025 0503 	bic.w	r5, r5, #3
 8006e06:	3508      	adds	r5, #8
 8006e08:	2d0c      	cmp	r5, #12
 8006e0a:	bf38      	it	cc
 8006e0c:	250c      	movcc	r5, #12
 8006e0e:	2d00      	cmp	r5, #0
 8006e10:	4606      	mov	r6, r0
 8006e12:	db01      	blt.n	8006e18 <_malloc_r+0x1c>
 8006e14:	42a9      	cmp	r1, r5
 8006e16:	d904      	bls.n	8006e22 <_malloc_r+0x26>
 8006e18:	230c      	movs	r3, #12
 8006e1a:	6033      	str	r3, [r6, #0]
 8006e1c:	2000      	movs	r0, #0
 8006e1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e22:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006ef8 <_malloc_r+0xfc>
 8006e26:	f000 f869 	bl	8006efc <__malloc_lock>
 8006e2a:	f8d8 3000 	ldr.w	r3, [r8]
 8006e2e:	461c      	mov	r4, r3
 8006e30:	bb44      	cbnz	r4, 8006e84 <_malloc_r+0x88>
 8006e32:	4629      	mov	r1, r5
 8006e34:	4630      	mov	r0, r6
 8006e36:	f7ff ffbf 	bl	8006db8 <sbrk_aligned>
 8006e3a:	1c43      	adds	r3, r0, #1
 8006e3c:	4604      	mov	r4, r0
 8006e3e:	d158      	bne.n	8006ef2 <_malloc_r+0xf6>
 8006e40:	f8d8 4000 	ldr.w	r4, [r8]
 8006e44:	4627      	mov	r7, r4
 8006e46:	2f00      	cmp	r7, #0
 8006e48:	d143      	bne.n	8006ed2 <_malloc_r+0xd6>
 8006e4a:	2c00      	cmp	r4, #0
 8006e4c:	d04b      	beq.n	8006ee6 <_malloc_r+0xea>
 8006e4e:	6823      	ldr	r3, [r4, #0]
 8006e50:	4639      	mov	r1, r7
 8006e52:	4630      	mov	r0, r6
 8006e54:	eb04 0903 	add.w	r9, r4, r3
 8006e58:	f000 fc5c 	bl	8007714 <_sbrk_r>
 8006e5c:	4581      	cmp	r9, r0
 8006e5e:	d142      	bne.n	8006ee6 <_malloc_r+0xea>
 8006e60:	6821      	ldr	r1, [r4, #0]
 8006e62:	1a6d      	subs	r5, r5, r1
 8006e64:	4629      	mov	r1, r5
 8006e66:	4630      	mov	r0, r6
 8006e68:	f7ff ffa6 	bl	8006db8 <sbrk_aligned>
 8006e6c:	3001      	adds	r0, #1
 8006e6e:	d03a      	beq.n	8006ee6 <_malloc_r+0xea>
 8006e70:	6823      	ldr	r3, [r4, #0]
 8006e72:	442b      	add	r3, r5
 8006e74:	6023      	str	r3, [r4, #0]
 8006e76:	f8d8 3000 	ldr.w	r3, [r8]
 8006e7a:	685a      	ldr	r2, [r3, #4]
 8006e7c:	bb62      	cbnz	r2, 8006ed8 <_malloc_r+0xdc>
 8006e7e:	f8c8 7000 	str.w	r7, [r8]
 8006e82:	e00f      	b.n	8006ea4 <_malloc_r+0xa8>
 8006e84:	6822      	ldr	r2, [r4, #0]
 8006e86:	1b52      	subs	r2, r2, r5
 8006e88:	d420      	bmi.n	8006ecc <_malloc_r+0xd0>
 8006e8a:	2a0b      	cmp	r2, #11
 8006e8c:	d917      	bls.n	8006ebe <_malloc_r+0xc2>
 8006e8e:	1961      	adds	r1, r4, r5
 8006e90:	42a3      	cmp	r3, r4
 8006e92:	6025      	str	r5, [r4, #0]
 8006e94:	bf18      	it	ne
 8006e96:	6059      	strne	r1, [r3, #4]
 8006e98:	6863      	ldr	r3, [r4, #4]
 8006e9a:	bf08      	it	eq
 8006e9c:	f8c8 1000 	streq.w	r1, [r8]
 8006ea0:	5162      	str	r2, [r4, r5]
 8006ea2:	604b      	str	r3, [r1, #4]
 8006ea4:	4630      	mov	r0, r6
 8006ea6:	f000 f82f 	bl	8006f08 <__malloc_unlock>
 8006eaa:	f104 000b 	add.w	r0, r4, #11
 8006eae:	1d23      	adds	r3, r4, #4
 8006eb0:	f020 0007 	bic.w	r0, r0, #7
 8006eb4:	1ac2      	subs	r2, r0, r3
 8006eb6:	bf1c      	itt	ne
 8006eb8:	1a1b      	subne	r3, r3, r0
 8006eba:	50a3      	strne	r3, [r4, r2]
 8006ebc:	e7af      	b.n	8006e1e <_malloc_r+0x22>
 8006ebe:	6862      	ldr	r2, [r4, #4]
 8006ec0:	42a3      	cmp	r3, r4
 8006ec2:	bf0c      	ite	eq
 8006ec4:	f8c8 2000 	streq.w	r2, [r8]
 8006ec8:	605a      	strne	r2, [r3, #4]
 8006eca:	e7eb      	b.n	8006ea4 <_malloc_r+0xa8>
 8006ecc:	4623      	mov	r3, r4
 8006ece:	6864      	ldr	r4, [r4, #4]
 8006ed0:	e7ae      	b.n	8006e30 <_malloc_r+0x34>
 8006ed2:	463c      	mov	r4, r7
 8006ed4:	687f      	ldr	r7, [r7, #4]
 8006ed6:	e7b6      	b.n	8006e46 <_malloc_r+0x4a>
 8006ed8:	461a      	mov	r2, r3
 8006eda:	685b      	ldr	r3, [r3, #4]
 8006edc:	42a3      	cmp	r3, r4
 8006ede:	d1fb      	bne.n	8006ed8 <_malloc_r+0xdc>
 8006ee0:	2300      	movs	r3, #0
 8006ee2:	6053      	str	r3, [r2, #4]
 8006ee4:	e7de      	b.n	8006ea4 <_malloc_r+0xa8>
 8006ee6:	230c      	movs	r3, #12
 8006ee8:	6033      	str	r3, [r6, #0]
 8006eea:	4630      	mov	r0, r6
 8006eec:	f000 f80c 	bl	8006f08 <__malloc_unlock>
 8006ef0:	e794      	b.n	8006e1c <_malloc_r+0x20>
 8006ef2:	6005      	str	r5, [r0, #0]
 8006ef4:	e7d6      	b.n	8006ea4 <_malloc_r+0xa8>
 8006ef6:	bf00      	nop
 8006ef8:	20000b74 	.word	0x20000b74

08006efc <__malloc_lock>:
 8006efc:	4801      	ldr	r0, [pc, #4]	@ (8006f04 <__malloc_lock+0x8>)
 8006efe:	f7ff bf0e 	b.w	8006d1e <__retarget_lock_acquire_recursive>
 8006f02:	bf00      	nop
 8006f04:	20000b6c 	.word	0x20000b6c

08006f08 <__malloc_unlock>:
 8006f08:	4801      	ldr	r0, [pc, #4]	@ (8006f10 <__malloc_unlock+0x8>)
 8006f0a:	f7ff bf09 	b.w	8006d20 <__retarget_lock_release_recursive>
 8006f0e:	bf00      	nop
 8006f10:	20000b6c 	.word	0x20000b6c

08006f14 <__sfputc_r>:
 8006f14:	6893      	ldr	r3, [r2, #8]
 8006f16:	3b01      	subs	r3, #1
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	b410      	push	{r4}
 8006f1c:	6093      	str	r3, [r2, #8]
 8006f1e:	da08      	bge.n	8006f32 <__sfputc_r+0x1e>
 8006f20:	6994      	ldr	r4, [r2, #24]
 8006f22:	42a3      	cmp	r3, r4
 8006f24:	db01      	blt.n	8006f2a <__sfputc_r+0x16>
 8006f26:	290a      	cmp	r1, #10
 8006f28:	d103      	bne.n	8006f32 <__sfputc_r+0x1e>
 8006f2a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006f2e:	f7ff bde8 	b.w	8006b02 <__swbuf_r>
 8006f32:	6813      	ldr	r3, [r2, #0]
 8006f34:	1c58      	adds	r0, r3, #1
 8006f36:	6010      	str	r0, [r2, #0]
 8006f38:	7019      	strb	r1, [r3, #0]
 8006f3a:	4608      	mov	r0, r1
 8006f3c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006f40:	4770      	bx	lr

08006f42 <__sfputs_r>:
 8006f42:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f44:	4606      	mov	r6, r0
 8006f46:	460f      	mov	r7, r1
 8006f48:	4614      	mov	r4, r2
 8006f4a:	18d5      	adds	r5, r2, r3
 8006f4c:	42ac      	cmp	r4, r5
 8006f4e:	d101      	bne.n	8006f54 <__sfputs_r+0x12>
 8006f50:	2000      	movs	r0, #0
 8006f52:	e007      	b.n	8006f64 <__sfputs_r+0x22>
 8006f54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f58:	463a      	mov	r2, r7
 8006f5a:	4630      	mov	r0, r6
 8006f5c:	f7ff ffda 	bl	8006f14 <__sfputc_r>
 8006f60:	1c43      	adds	r3, r0, #1
 8006f62:	d1f3      	bne.n	8006f4c <__sfputs_r+0xa>
 8006f64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006f68 <_vfiprintf_r>:
 8006f68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f6c:	460d      	mov	r5, r1
 8006f6e:	b09d      	sub	sp, #116	@ 0x74
 8006f70:	4614      	mov	r4, r2
 8006f72:	4698      	mov	r8, r3
 8006f74:	4606      	mov	r6, r0
 8006f76:	b118      	cbz	r0, 8006f80 <_vfiprintf_r+0x18>
 8006f78:	6a03      	ldr	r3, [r0, #32]
 8006f7a:	b90b      	cbnz	r3, 8006f80 <_vfiprintf_r+0x18>
 8006f7c:	f7ff fcd8 	bl	8006930 <__sinit>
 8006f80:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006f82:	07d9      	lsls	r1, r3, #31
 8006f84:	d405      	bmi.n	8006f92 <_vfiprintf_r+0x2a>
 8006f86:	89ab      	ldrh	r3, [r5, #12]
 8006f88:	059a      	lsls	r2, r3, #22
 8006f8a:	d402      	bmi.n	8006f92 <_vfiprintf_r+0x2a>
 8006f8c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006f8e:	f7ff fec6 	bl	8006d1e <__retarget_lock_acquire_recursive>
 8006f92:	89ab      	ldrh	r3, [r5, #12]
 8006f94:	071b      	lsls	r3, r3, #28
 8006f96:	d501      	bpl.n	8006f9c <_vfiprintf_r+0x34>
 8006f98:	692b      	ldr	r3, [r5, #16]
 8006f9a:	b99b      	cbnz	r3, 8006fc4 <_vfiprintf_r+0x5c>
 8006f9c:	4629      	mov	r1, r5
 8006f9e:	4630      	mov	r0, r6
 8006fa0:	f7ff fdee 	bl	8006b80 <__swsetup_r>
 8006fa4:	b170      	cbz	r0, 8006fc4 <_vfiprintf_r+0x5c>
 8006fa6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006fa8:	07dc      	lsls	r4, r3, #31
 8006faa:	d504      	bpl.n	8006fb6 <_vfiprintf_r+0x4e>
 8006fac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006fb0:	b01d      	add	sp, #116	@ 0x74
 8006fb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fb6:	89ab      	ldrh	r3, [r5, #12]
 8006fb8:	0598      	lsls	r0, r3, #22
 8006fba:	d4f7      	bmi.n	8006fac <_vfiprintf_r+0x44>
 8006fbc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006fbe:	f7ff feaf 	bl	8006d20 <__retarget_lock_release_recursive>
 8006fc2:	e7f3      	b.n	8006fac <_vfiprintf_r+0x44>
 8006fc4:	2300      	movs	r3, #0
 8006fc6:	9309      	str	r3, [sp, #36]	@ 0x24
 8006fc8:	2320      	movs	r3, #32
 8006fca:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006fce:	f8cd 800c 	str.w	r8, [sp, #12]
 8006fd2:	2330      	movs	r3, #48	@ 0x30
 8006fd4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007184 <_vfiprintf_r+0x21c>
 8006fd8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006fdc:	f04f 0901 	mov.w	r9, #1
 8006fe0:	4623      	mov	r3, r4
 8006fe2:	469a      	mov	sl, r3
 8006fe4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006fe8:	b10a      	cbz	r2, 8006fee <_vfiprintf_r+0x86>
 8006fea:	2a25      	cmp	r2, #37	@ 0x25
 8006fec:	d1f9      	bne.n	8006fe2 <_vfiprintf_r+0x7a>
 8006fee:	ebba 0b04 	subs.w	fp, sl, r4
 8006ff2:	d00b      	beq.n	800700c <_vfiprintf_r+0xa4>
 8006ff4:	465b      	mov	r3, fp
 8006ff6:	4622      	mov	r2, r4
 8006ff8:	4629      	mov	r1, r5
 8006ffa:	4630      	mov	r0, r6
 8006ffc:	f7ff ffa1 	bl	8006f42 <__sfputs_r>
 8007000:	3001      	adds	r0, #1
 8007002:	f000 80a7 	beq.w	8007154 <_vfiprintf_r+0x1ec>
 8007006:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007008:	445a      	add	r2, fp
 800700a:	9209      	str	r2, [sp, #36]	@ 0x24
 800700c:	f89a 3000 	ldrb.w	r3, [sl]
 8007010:	2b00      	cmp	r3, #0
 8007012:	f000 809f 	beq.w	8007154 <_vfiprintf_r+0x1ec>
 8007016:	2300      	movs	r3, #0
 8007018:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800701c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007020:	f10a 0a01 	add.w	sl, sl, #1
 8007024:	9304      	str	r3, [sp, #16]
 8007026:	9307      	str	r3, [sp, #28]
 8007028:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800702c:	931a      	str	r3, [sp, #104]	@ 0x68
 800702e:	4654      	mov	r4, sl
 8007030:	2205      	movs	r2, #5
 8007032:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007036:	4853      	ldr	r0, [pc, #332]	@ (8007184 <_vfiprintf_r+0x21c>)
 8007038:	f7f9 f8ca 	bl	80001d0 <memchr>
 800703c:	9a04      	ldr	r2, [sp, #16]
 800703e:	b9d8      	cbnz	r0, 8007078 <_vfiprintf_r+0x110>
 8007040:	06d1      	lsls	r1, r2, #27
 8007042:	bf44      	itt	mi
 8007044:	2320      	movmi	r3, #32
 8007046:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800704a:	0713      	lsls	r3, r2, #28
 800704c:	bf44      	itt	mi
 800704e:	232b      	movmi	r3, #43	@ 0x2b
 8007050:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007054:	f89a 3000 	ldrb.w	r3, [sl]
 8007058:	2b2a      	cmp	r3, #42	@ 0x2a
 800705a:	d015      	beq.n	8007088 <_vfiprintf_r+0x120>
 800705c:	9a07      	ldr	r2, [sp, #28]
 800705e:	4654      	mov	r4, sl
 8007060:	2000      	movs	r0, #0
 8007062:	f04f 0c0a 	mov.w	ip, #10
 8007066:	4621      	mov	r1, r4
 8007068:	f811 3b01 	ldrb.w	r3, [r1], #1
 800706c:	3b30      	subs	r3, #48	@ 0x30
 800706e:	2b09      	cmp	r3, #9
 8007070:	d94b      	bls.n	800710a <_vfiprintf_r+0x1a2>
 8007072:	b1b0      	cbz	r0, 80070a2 <_vfiprintf_r+0x13a>
 8007074:	9207      	str	r2, [sp, #28]
 8007076:	e014      	b.n	80070a2 <_vfiprintf_r+0x13a>
 8007078:	eba0 0308 	sub.w	r3, r0, r8
 800707c:	fa09 f303 	lsl.w	r3, r9, r3
 8007080:	4313      	orrs	r3, r2
 8007082:	9304      	str	r3, [sp, #16]
 8007084:	46a2      	mov	sl, r4
 8007086:	e7d2      	b.n	800702e <_vfiprintf_r+0xc6>
 8007088:	9b03      	ldr	r3, [sp, #12]
 800708a:	1d19      	adds	r1, r3, #4
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	9103      	str	r1, [sp, #12]
 8007090:	2b00      	cmp	r3, #0
 8007092:	bfbb      	ittet	lt
 8007094:	425b      	neglt	r3, r3
 8007096:	f042 0202 	orrlt.w	r2, r2, #2
 800709a:	9307      	strge	r3, [sp, #28]
 800709c:	9307      	strlt	r3, [sp, #28]
 800709e:	bfb8      	it	lt
 80070a0:	9204      	strlt	r2, [sp, #16]
 80070a2:	7823      	ldrb	r3, [r4, #0]
 80070a4:	2b2e      	cmp	r3, #46	@ 0x2e
 80070a6:	d10a      	bne.n	80070be <_vfiprintf_r+0x156>
 80070a8:	7863      	ldrb	r3, [r4, #1]
 80070aa:	2b2a      	cmp	r3, #42	@ 0x2a
 80070ac:	d132      	bne.n	8007114 <_vfiprintf_r+0x1ac>
 80070ae:	9b03      	ldr	r3, [sp, #12]
 80070b0:	1d1a      	adds	r2, r3, #4
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	9203      	str	r2, [sp, #12]
 80070b6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80070ba:	3402      	adds	r4, #2
 80070bc:	9305      	str	r3, [sp, #20]
 80070be:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007194 <_vfiprintf_r+0x22c>
 80070c2:	7821      	ldrb	r1, [r4, #0]
 80070c4:	2203      	movs	r2, #3
 80070c6:	4650      	mov	r0, sl
 80070c8:	f7f9 f882 	bl	80001d0 <memchr>
 80070cc:	b138      	cbz	r0, 80070de <_vfiprintf_r+0x176>
 80070ce:	9b04      	ldr	r3, [sp, #16]
 80070d0:	eba0 000a 	sub.w	r0, r0, sl
 80070d4:	2240      	movs	r2, #64	@ 0x40
 80070d6:	4082      	lsls	r2, r0
 80070d8:	4313      	orrs	r3, r2
 80070da:	3401      	adds	r4, #1
 80070dc:	9304      	str	r3, [sp, #16]
 80070de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80070e2:	4829      	ldr	r0, [pc, #164]	@ (8007188 <_vfiprintf_r+0x220>)
 80070e4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80070e8:	2206      	movs	r2, #6
 80070ea:	f7f9 f871 	bl	80001d0 <memchr>
 80070ee:	2800      	cmp	r0, #0
 80070f0:	d03f      	beq.n	8007172 <_vfiprintf_r+0x20a>
 80070f2:	4b26      	ldr	r3, [pc, #152]	@ (800718c <_vfiprintf_r+0x224>)
 80070f4:	bb1b      	cbnz	r3, 800713e <_vfiprintf_r+0x1d6>
 80070f6:	9b03      	ldr	r3, [sp, #12]
 80070f8:	3307      	adds	r3, #7
 80070fa:	f023 0307 	bic.w	r3, r3, #7
 80070fe:	3308      	adds	r3, #8
 8007100:	9303      	str	r3, [sp, #12]
 8007102:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007104:	443b      	add	r3, r7
 8007106:	9309      	str	r3, [sp, #36]	@ 0x24
 8007108:	e76a      	b.n	8006fe0 <_vfiprintf_r+0x78>
 800710a:	fb0c 3202 	mla	r2, ip, r2, r3
 800710e:	460c      	mov	r4, r1
 8007110:	2001      	movs	r0, #1
 8007112:	e7a8      	b.n	8007066 <_vfiprintf_r+0xfe>
 8007114:	2300      	movs	r3, #0
 8007116:	3401      	adds	r4, #1
 8007118:	9305      	str	r3, [sp, #20]
 800711a:	4619      	mov	r1, r3
 800711c:	f04f 0c0a 	mov.w	ip, #10
 8007120:	4620      	mov	r0, r4
 8007122:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007126:	3a30      	subs	r2, #48	@ 0x30
 8007128:	2a09      	cmp	r2, #9
 800712a:	d903      	bls.n	8007134 <_vfiprintf_r+0x1cc>
 800712c:	2b00      	cmp	r3, #0
 800712e:	d0c6      	beq.n	80070be <_vfiprintf_r+0x156>
 8007130:	9105      	str	r1, [sp, #20]
 8007132:	e7c4      	b.n	80070be <_vfiprintf_r+0x156>
 8007134:	fb0c 2101 	mla	r1, ip, r1, r2
 8007138:	4604      	mov	r4, r0
 800713a:	2301      	movs	r3, #1
 800713c:	e7f0      	b.n	8007120 <_vfiprintf_r+0x1b8>
 800713e:	ab03      	add	r3, sp, #12
 8007140:	9300      	str	r3, [sp, #0]
 8007142:	462a      	mov	r2, r5
 8007144:	4b12      	ldr	r3, [pc, #72]	@ (8007190 <_vfiprintf_r+0x228>)
 8007146:	a904      	add	r1, sp, #16
 8007148:	4630      	mov	r0, r6
 800714a:	f3af 8000 	nop.w
 800714e:	4607      	mov	r7, r0
 8007150:	1c78      	adds	r0, r7, #1
 8007152:	d1d6      	bne.n	8007102 <_vfiprintf_r+0x19a>
 8007154:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007156:	07d9      	lsls	r1, r3, #31
 8007158:	d405      	bmi.n	8007166 <_vfiprintf_r+0x1fe>
 800715a:	89ab      	ldrh	r3, [r5, #12]
 800715c:	059a      	lsls	r2, r3, #22
 800715e:	d402      	bmi.n	8007166 <_vfiprintf_r+0x1fe>
 8007160:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007162:	f7ff fddd 	bl	8006d20 <__retarget_lock_release_recursive>
 8007166:	89ab      	ldrh	r3, [r5, #12]
 8007168:	065b      	lsls	r3, r3, #25
 800716a:	f53f af1f 	bmi.w	8006fac <_vfiprintf_r+0x44>
 800716e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007170:	e71e      	b.n	8006fb0 <_vfiprintf_r+0x48>
 8007172:	ab03      	add	r3, sp, #12
 8007174:	9300      	str	r3, [sp, #0]
 8007176:	462a      	mov	r2, r5
 8007178:	4b05      	ldr	r3, [pc, #20]	@ (8007190 <_vfiprintf_r+0x228>)
 800717a:	a904      	add	r1, sp, #16
 800717c:	4630      	mov	r0, r6
 800717e:	f000 f879 	bl	8007274 <_printf_i>
 8007182:	e7e4      	b.n	800714e <_vfiprintf_r+0x1e6>
 8007184:	08007a14 	.word	0x08007a14
 8007188:	08007a1e 	.word	0x08007a1e
 800718c:	00000000 	.word	0x00000000
 8007190:	08006f43 	.word	0x08006f43
 8007194:	08007a1a 	.word	0x08007a1a

08007198 <_printf_common>:
 8007198:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800719c:	4616      	mov	r6, r2
 800719e:	4698      	mov	r8, r3
 80071a0:	688a      	ldr	r2, [r1, #8]
 80071a2:	690b      	ldr	r3, [r1, #16]
 80071a4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80071a8:	4293      	cmp	r3, r2
 80071aa:	bfb8      	it	lt
 80071ac:	4613      	movlt	r3, r2
 80071ae:	6033      	str	r3, [r6, #0]
 80071b0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80071b4:	4607      	mov	r7, r0
 80071b6:	460c      	mov	r4, r1
 80071b8:	b10a      	cbz	r2, 80071be <_printf_common+0x26>
 80071ba:	3301      	adds	r3, #1
 80071bc:	6033      	str	r3, [r6, #0]
 80071be:	6823      	ldr	r3, [r4, #0]
 80071c0:	0699      	lsls	r1, r3, #26
 80071c2:	bf42      	ittt	mi
 80071c4:	6833      	ldrmi	r3, [r6, #0]
 80071c6:	3302      	addmi	r3, #2
 80071c8:	6033      	strmi	r3, [r6, #0]
 80071ca:	6825      	ldr	r5, [r4, #0]
 80071cc:	f015 0506 	ands.w	r5, r5, #6
 80071d0:	d106      	bne.n	80071e0 <_printf_common+0x48>
 80071d2:	f104 0a19 	add.w	sl, r4, #25
 80071d6:	68e3      	ldr	r3, [r4, #12]
 80071d8:	6832      	ldr	r2, [r6, #0]
 80071da:	1a9b      	subs	r3, r3, r2
 80071dc:	42ab      	cmp	r3, r5
 80071de:	dc26      	bgt.n	800722e <_printf_common+0x96>
 80071e0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80071e4:	6822      	ldr	r2, [r4, #0]
 80071e6:	3b00      	subs	r3, #0
 80071e8:	bf18      	it	ne
 80071ea:	2301      	movne	r3, #1
 80071ec:	0692      	lsls	r2, r2, #26
 80071ee:	d42b      	bmi.n	8007248 <_printf_common+0xb0>
 80071f0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80071f4:	4641      	mov	r1, r8
 80071f6:	4638      	mov	r0, r7
 80071f8:	47c8      	blx	r9
 80071fa:	3001      	adds	r0, #1
 80071fc:	d01e      	beq.n	800723c <_printf_common+0xa4>
 80071fe:	6823      	ldr	r3, [r4, #0]
 8007200:	6922      	ldr	r2, [r4, #16]
 8007202:	f003 0306 	and.w	r3, r3, #6
 8007206:	2b04      	cmp	r3, #4
 8007208:	bf02      	ittt	eq
 800720a:	68e5      	ldreq	r5, [r4, #12]
 800720c:	6833      	ldreq	r3, [r6, #0]
 800720e:	1aed      	subeq	r5, r5, r3
 8007210:	68a3      	ldr	r3, [r4, #8]
 8007212:	bf0c      	ite	eq
 8007214:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007218:	2500      	movne	r5, #0
 800721a:	4293      	cmp	r3, r2
 800721c:	bfc4      	itt	gt
 800721e:	1a9b      	subgt	r3, r3, r2
 8007220:	18ed      	addgt	r5, r5, r3
 8007222:	2600      	movs	r6, #0
 8007224:	341a      	adds	r4, #26
 8007226:	42b5      	cmp	r5, r6
 8007228:	d11a      	bne.n	8007260 <_printf_common+0xc8>
 800722a:	2000      	movs	r0, #0
 800722c:	e008      	b.n	8007240 <_printf_common+0xa8>
 800722e:	2301      	movs	r3, #1
 8007230:	4652      	mov	r2, sl
 8007232:	4641      	mov	r1, r8
 8007234:	4638      	mov	r0, r7
 8007236:	47c8      	blx	r9
 8007238:	3001      	adds	r0, #1
 800723a:	d103      	bne.n	8007244 <_printf_common+0xac>
 800723c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007240:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007244:	3501      	adds	r5, #1
 8007246:	e7c6      	b.n	80071d6 <_printf_common+0x3e>
 8007248:	18e1      	adds	r1, r4, r3
 800724a:	1c5a      	adds	r2, r3, #1
 800724c:	2030      	movs	r0, #48	@ 0x30
 800724e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007252:	4422      	add	r2, r4
 8007254:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007258:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800725c:	3302      	adds	r3, #2
 800725e:	e7c7      	b.n	80071f0 <_printf_common+0x58>
 8007260:	2301      	movs	r3, #1
 8007262:	4622      	mov	r2, r4
 8007264:	4641      	mov	r1, r8
 8007266:	4638      	mov	r0, r7
 8007268:	47c8      	blx	r9
 800726a:	3001      	adds	r0, #1
 800726c:	d0e6      	beq.n	800723c <_printf_common+0xa4>
 800726e:	3601      	adds	r6, #1
 8007270:	e7d9      	b.n	8007226 <_printf_common+0x8e>
	...

08007274 <_printf_i>:
 8007274:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007278:	7e0f      	ldrb	r7, [r1, #24]
 800727a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800727c:	2f78      	cmp	r7, #120	@ 0x78
 800727e:	4691      	mov	r9, r2
 8007280:	4680      	mov	r8, r0
 8007282:	460c      	mov	r4, r1
 8007284:	469a      	mov	sl, r3
 8007286:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800728a:	d807      	bhi.n	800729c <_printf_i+0x28>
 800728c:	2f62      	cmp	r7, #98	@ 0x62
 800728e:	d80a      	bhi.n	80072a6 <_printf_i+0x32>
 8007290:	2f00      	cmp	r7, #0
 8007292:	f000 80d2 	beq.w	800743a <_printf_i+0x1c6>
 8007296:	2f58      	cmp	r7, #88	@ 0x58
 8007298:	f000 80b9 	beq.w	800740e <_printf_i+0x19a>
 800729c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80072a0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80072a4:	e03a      	b.n	800731c <_printf_i+0xa8>
 80072a6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80072aa:	2b15      	cmp	r3, #21
 80072ac:	d8f6      	bhi.n	800729c <_printf_i+0x28>
 80072ae:	a101      	add	r1, pc, #4	@ (adr r1, 80072b4 <_printf_i+0x40>)
 80072b0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80072b4:	0800730d 	.word	0x0800730d
 80072b8:	08007321 	.word	0x08007321
 80072bc:	0800729d 	.word	0x0800729d
 80072c0:	0800729d 	.word	0x0800729d
 80072c4:	0800729d 	.word	0x0800729d
 80072c8:	0800729d 	.word	0x0800729d
 80072cc:	08007321 	.word	0x08007321
 80072d0:	0800729d 	.word	0x0800729d
 80072d4:	0800729d 	.word	0x0800729d
 80072d8:	0800729d 	.word	0x0800729d
 80072dc:	0800729d 	.word	0x0800729d
 80072e0:	08007421 	.word	0x08007421
 80072e4:	0800734b 	.word	0x0800734b
 80072e8:	080073db 	.word	0x080073db
 80072ec:	0800729d 	.word	0x0800729d
 80072f0:	0800729d 	.word	0x0800729d
 80072f4:	08007443 	.word	0x08007443
 80072f8:	0800729d 	.word	0x0800729d
 80072fc:	0800734b 	.word	0x0800734b
 8007300:	0800729d 	.word	0x0800729d
 8007304:	0800729d 	.word	0x0800729d
 8007308:	080073e3 	.word	0x080073e3
 800730c:	6833      	ldr	r3, [r6, #0]
 800730e:	1d1a      	adds	r2, r3, #4
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	6032      	str	r2, [r6, #0]
 8007314:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007318:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800731c:	2301      	movs	r3, #1
 800731e:	e09d      	b.n	800745c <_printf_i+0x1e8>
 8007320:	6833      	ldr	r3, [r6, #0]
 8007322:	6820      	ldr	r0, [r4, #0]
 8007324:	1d19      	adds	r1, r3, #4
 8007326:	6031      	str	r1, [r6, #0]
 8007328:	0606      	lsls	r6, r0, #24
 800732a:	d501      	bpl.n	8007330 <_printf_i+0xbc>
 800732c:	681d      	ldr	r5, [r3, #0]
 800732e:	e003      	b.n	8007338 <_printf_i+0xc4>
 8007330:	0645      	lsls	r5, r0, #25
 8007332:	d5fb      	bpl.n	800732c <_printf_i+0xb8>
 8007334:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007338:	2d00      	cmp	r5, #0
 800733a:	da03      	bge.n	8007344 <_printf_i+0xd0>
 800733c:	232d      	movs	r3, #45	@ 0x2d
 800733e:	426d      	negs	r5, r5
 8007340:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007344:	4859      	ldr	r0, [pc, #356]	@ (80074ac <_printf_i+0x238>)
 8007346:	230a      	movs	r3, #10
 8007348:	e011      	b.n	800736e <_printf_i+0xfa>
 800734a:	6821      	ldr	r1, [r4, #0]
 800734c:	6833      	ldr	r3, [r6, #0]
 800734e:	0608      	lsls	r0, r1, #24
 8007350:	f853 5b04 	ldr.w	r5, [r3], #4
 8007354:	d402      	bmi.n	800735c <_printf_i+0xe8>
 8007356:	0649      	lsls	r1, r1, #25
 8007358:	bf48      	it	mi
 800735a:	b2ad      	uxthmi	r5, r5
 800735c:	2f6f      	cmp	r7, #111	@ 0x6f
 800735e:	4853      	ldr	r0, [pc, #332]	@ (80074ac <_printf_i+0x238>)
 8007360:	6033      	str	r3, [r6, #0]
 8007362:	bf14      	ite	ne
 8007364:	230a      	movne	r3, #10
 8007366:	2308      	moveq	r3, #8
 8007368:	2100      	movs	r1, #0
 800736a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800736e:	6866      	ldr	r6, [r4, #4]
 8007370:	60a6      	str	r6, [r4, #8]
 8007372:	2e00      	cmp	r6, #0
 8007374:	bfa2      	ittt	ge
 8007376:	6821      	ldrge	r1, [r4, #0]
 8007378:	f021 0104 	bicge.w	r1, r1, #4
 800737c:	6021      	strge	r1, [r4, #0]
 800737e:	b90d      	cbnz	r5, 8007384 <_printf_i+0x110>
 8007380:	2e00      	cmp	r6, #0
 8007382:	d04b      	beq.n	800741c <_printf_i+0x1a8>
 8007384:	4616      	mov	r6, r2
 8007386:	fbb5 f1f3 	udiv	r1, r5, r3
 800738a:	fb03 5711 	mls	r7, r3, r1, r5
 800738e:	5dc7      	ldrb	r7, [r0, r7]
 8007390:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007394:	462f      	mov	r7, r5
 8007396:	42bb      	cmp	r3, r7
 8007398:	460d      	mov	r5, r1
 800739a:	d9f4      	bls.n	8007386 <_printf_i+0x112>
 800739c:	2b08      	cmp	r3, #8
 800739e:	d10b      	bne.n	80073b8 <_printf_i+0x144>
 80073a0:	6823      	ldr	r3, [r4, #0]
 80073a2:	07df      	lsls	r7, r3, #31
 80073a4:	d508      	bpl.n	80073b8 <_printf_i+0x144>
 80073a6:	6923      	ldr	r3, [r4, #16]
 80073a8:	6861      	ldr	r1, [r4, #4]
 80073aa:	4299      	cmp	r1, r3
 80073ac:	bfde      	ittt	le
 80073ae:	2330      	movle	r3, #48	@ 0x30
 80073b0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80073b4:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80073b8:	1b92      	subs	r2, r2, r6
 80073ba:	6122      	str	r2, [r4, #16]
 80073bc:	f8cd a000 	str.w	sl, [sp]
 80073c0:	464b      	mov	r3, r9
 80073c2:	aa03      	add	r2, sp, #12
 80073c4:	4621      	mov	r1, r4
 80073c6:	4640      	mov	r0, r8
 80073c8:	f7ff fee6 	bl	8007198 <_printf_common>
 80073cc:	3001      	adds	r0, #1
 80073ce:	d14a      	bne.n	8007466 <_printf_i+0x1f2>
 80073d0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80073d4:	b004      	add	sp, #16
 80073d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073da:	6823      	ldr	r3, [r4, #0]
 80073dc:	f043 0320 	orr.w	r3, r3, #32
 80073e0:	6023      	str	r3, [r4, #0]
 80073e2:	4833      	ldr	r0, [pc, #204]	@ (80074b0 <_printf_i+0x23c>)
 80073e4:	2778      	movs	r7, #120	@ 0x78
 80073e6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80073ea:	6823      	ldr	r3, [r4, #0]
 80073ec:	6831      	ldr	r1, [r6, #0]
 80073ee:	061f      	lsls	r7, r3, #24
 80073f0:	f851 5b04 	ldr.w	r5, [r1], #4
 80073f4:	d402      	bmi.n	80073fc <_printf_i+0x188>
 80073f6:	065f      	lsls	r7, r3, #25
 80073f8:	bf48      	it	mi
 80073fa:	b2ad      	uxthmi	r5, r5
 80073fc:	6031      	str	r1, [r6, #0]
 80073fe:	07d9      	lsls	r1, r3, #31
 8007400:	bf44      	itt	mi
 8007402:	f043 0320 	orrmi.w	r3, r3, #32
 8007406:	6023      	strmi	r3, [r4, #0]
 8007408:	b11d      	cbz	r5, 8007412 <_printf_i+0x19e>
 800740a:	2310      	movs	r3, #16
 800740c:	e7ac      	b.n	8007368 <_printf_i+0xf4>
 800740e:	4827      	ldr	r0, [pc, #156]	@ (80074ac <_printf_i+0x238>)
 8007410:	e7e9      	b.n	80073e6 <_printf_i+0x172>
 8007412:	6823      	ldr	r3, [r4, #0]
 8007414:	f023 0320 	bic.w	r3, r3, #32
 8007418:	6023      	str	r3, [r4, #0]
 800741a:	e7f6      	b.n	800740a <_printf_i+0x196>
 800741c:	4616      	mov	r6, r2
 800741e:	e7bd      	b.n	800739c <_printf_i+0x128>
 8007420:	6833      	ldr	r3, [r6, #0]
 8007422:	6825      	ldr	r5, [r4, #0]
 8007424:	6961      	ldr	r1, [r4, #20]
 8007426:	1d18      	adds	r0, r3, #4
 8007428:	6030      	str	r0, [r6, #0]
 800742a:	062e      	lsls	r6, r5, #24
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	d501      	bpl.n	8007434 <_printf_i+0x1c0>
 8007430:	6019      	str	r1, [r3, #0]
 8007432:	e002      	b.n	800743a <_printf_i+0x1c6>
 8007434:	0668      	lsls	r0, r5, #25
 8007436:	d5fb      	bpl.n	8007430 <_printf_i+0x1bc>
 8007438:	8019      	strh	r1, [r3, #0]
 800743a:	2300      	movs	r3, #0
 800743c:	6123      	str	r3, [r4, #16]
 800743e:	4616      	mov	r6, r2
 8007440:	e7bc      	b.n	80073bc <_printf_i+0x148>
 8007442:	6833      	ldr	r3, [r6, #0]
 8007444:	1d1a      	adds	r2, r3, #4
 8007446:	6032      	str	r2, [r6, #0]
 8007448:	681e      	ldr	r6, [r3, #0]
 800744a:	6862      	ldr	r2, [r4, #4]
 800744c:	2100      	movs	r1, #0
 800744e:	4630      	mov	r0, r6
 8007450:	f7f8 febe 	bl	80001d0 <memchr>
 8007454:	b108      	cbz	r0, 800745a <_printf_i+0x1e6>
 8007456:	1b80      	subs	r0, r0, r6
 8007458:	6060      	str	r0, [r4, #4]
 800745a:	6863      	ldr	r3, [r4, #4]
 800745c:	6123      	str	r3, [r4, #16]
 800745e:	2300      	movs	r3, #0
 8007460:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007464:	e7aa      	b.n	80073bc <_printf_i+0x148>
 8007466:	6923      	ldr	r3, [r4, #16]
 8007468:	4632      	mov	r2, r6
 800746a:	4649      	mov	r1, r9
 800746c:	4640      	mov	r0, r8
 800746e:	47d0      	blx	sl
 8007470:	3001      	adds	r0, #1
 8007472:	d0ad      	beq.n	80073d0 <_printf_i+0x15c>
 8007474:	6823      	ldr	r3, [r4, #0]
 8007476:	079b      	lsls	r3, r3, #30
 8007478:	d413      	bmi.n	80074a2 <_printf_i+0x22e>
 800747a:	68e0      	ldr	r0, [r4, #12]
 800747c:	9b03      	ldr	r3, [sp, #12]
 800747e:	4298      	cmp	r0, r3
 8007480:	bfb8      	it	lt
 8007482:	4618      	movlt	r0, r3
 8007484:	e7a6      	b.n	80073d4 <_printf_i+0x160>
 8007486:	2301      	movs	r3, #1
 8007488:	4632      	mov	r2, r6
 800748a:	4649      	mov	r1, r9
 800748c:	4640      	mov	r0, r8
 800748e:	47d0      	blx	sl
 8007490:	3001      	adds	r0, #1
 8007492:	d09d      	beq.n	80073d0 <_printf_i+0x15c>
 8007494:	3501      	adds	r5, #1
 8007496:	68e3      	ldr	r3, [r4, #12]
 8007498:	9903      	ldr	r1, [sp, #12]
 800749a:	1a5b      	subs	r3, r3, r1
 800749c:	42ab      	cmp	r3, r5
 800749e:	dcf2      	bgt.n	8007486 <_printf_i+0x212>
 80074a0:	e7eb      	b.n	800747a <_printf_i+0x206>
 80074a2:	2500      	movs	r5, #0
 80074a4:	f104 0619 	add.w	r6, r4, #25
 80074a8:	e7f5      	b.n	8007496 <_printf_i+0x222>
 80074aa:	bf00      	nop
 80074ac:	08007a25 	.word	0x08007a25
 80074b0:	08007a36 	.word	0x08007a36

080074b4 <__sflush_r>:
 80074b4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80074b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80074bc:	0716      	lsls	r6, r2, #28
 80074be:	4605      	mov	r5, r0
 80074c0:	460c      	mov	r4, r1
 80074c2:	d454      	bmi.n	800756e <__sflush_r+0xba>
 80074c4:	684b      	ldr	r3, [r1, #4]
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	dc02      	bgt.n	80074d0 <__sflush_r+0x1c>
 80074ca:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	dd48      	ble.n	8007562 <__sflush_r+0xae>
 80074d0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80074d2:	2e00      	cmp	r6, #0
 80074d4:	d045      	beq.n	8007562 <__sflush_r+0xae>
 80074d6:	2300      	movs	r3, #0
 80074d8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80074dc:	682f      	ldr	r7, [r5, #0]
 80074de:	6a21      	ldr	r1, [r4, #32]
 80074e0:	602b      	str	r3, [r5, #0]
 80074e2:	d030      	beq.n	8007546 <__sflush_r+0x92>
 80074e4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80074e6:	89a3      	ldrh	r3, [r4, #12]
 80074e8:	0759      	lsls	r1, r3, #29
 80074ea:	d505      	bpl.n	80074f8 <__sflush_r+0x44>
 80074ec:	6863      	ldr	r3, [r4, #4]
 80074ee:	1ad2      	subs	r2, r2, r3
 80074f0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80074f2:	b10b      	cbz	r3, 80074f8 <__sflush_r+0x44>
 80074f4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80074f6:	1ad2      	subs	r2, r2, r3
 80074f8:	2300      	movs	r3, #0
 80074fa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80074fc:	6a21      	ldr	r1, [r4, #32]
 80074fe:	4628      	mov	r0, r5
 8007500:	47b0      	blx	r6
 8007502:	1c43      	adds	r3, r0, #1
 8007504:	89a3      	ldrh	r3, [r4, #12]
 8007506:	d106      	bne.n	8007516 <__sflush_r+0x62>
 8007508:	6829      	ldr	r1, [r5, #0]
 800750a:	291d      	cmp	r1, #29
 800750c:	d82b      	bhi.n	8007566 <__sflush_r+0xb2>
 800750e:	4a2a      	ldr	r2, [pc, #168]	@ (80075b8 <__sflush_r+0x104>)
 8007510:	410a      	asrs	r2, r1
 8007512:	07d6      	lsls	r6, r2, #31
 8007514:	d427      	bmi.n	8007566 <__sflush_r+0xb2>
 8007516:	2200      	movs	r2, #0
 8007518:	6062      	str	r2, [r4, #4]
 800751a:	04d9      	lsls	r1, r3, #19
 800751c:	6922      	ldr	r2, [r4, #16]
 800751e:	6022      	str	r2, [r4, #0]
 8007520:	d504      	bpl.n	800752c <__sflush_r+0x78>
 8007522:	1c42      	adds	r2, r0, #1
 8007524:	d101      	bne.n	800752a <__sflush_r+0x76>
 8007526:	682b      	ldr	r3, [r5, #0]
 8007528:	b903      	cbnz	r3, 800752c <__sflush_r+0x78>
 800752a:	6560      	str	r0, [r4, #84]	@ 0x54
 800752c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800752e:	602f      	str	r7, [r5, #0]
 8007530:	b1b9      	cbz	r1, 8007562 <__sflush_r+0xae>
 8007532:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007536:	4299      	cmp	r1, r3
 8007538:	d002      	beq.n	8007540 <__sflush_r+0x8c>
 800753a:	4628      	mov	r0, r5
 800753c:	f7ff fbf2 	bl	8006d24 <_free_r>
 8007540:	2300      	movs	r3, #0
 8007542:	6363      	str	r3, [r4, #52]	@ 0x34
 8007544:	e00d      	b.n	8007562 <__sflush_r+0xae>
 8007546:	2301      	movs	r3, #1
 8007548:	4628      	mov	r0, r5
 800754a:	47b0      	blx	r6
 800754c:	4602      	mov	r2, r0
 800754e:	1c50      	adds	r0, r2, #1
 8007550:	d1c9      	bne.n	80074e6 <__sflush_r+0x32>
 8007552:	682b      	ldr	r3, [r5, #0]
 8007554:	2b00      	cmp	r3, #0
 8007556:	d0c6      	beq.n	80074e6 <__sflush_r+0x32>
 8007558:	2b1d      	cmp	r3, #29
 800755a:	d001      	beq.n	8007560 <__sflush_r+0xac>
 800755c:	2b16      	cmp	r3, #22
 800755e:	d11e      	bne.n	800759e <__sflush_r+0xea>
 8007560:	602f      	str	r7, [r5, #0]
 8007562:	2000      	movs	r0, #0
 8007564:	e022      	b.n	80075ac <__sflush_r+0xf8>
 8007566:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800756a:	b21b      	sxth	r3, r3
 800756c:	e01b      	b.n	80075a6 <__sflush_r+0xf2>
 800756e:	690f      	ldr	r7, [r1, #16]
 8007570:	2f00      	cmp	r7, #0
 8007572:	d0f6      	beq.n	8007562 <__sflush_r+0xae>
 8007574:	0793      	lsls	r3, r2, #30
 8007576:	680e      	ldr	r6, [r1, #0]
 8007578:	bf08      	it	eq
 800757a:	694b      	ldreq	r3, [r1, #20]
 800757c:	600f      	str	r7, [r1, #0]
 800757e:	bf18      	it	ne
 8007580:	2300      	movne	r3, #0
 8007582:	eba6 0807 	sub.w	r8, r6, r7
 8007586:	608b      	str	r3, [r1, #8]
 8007588:	f1b8 0f00 	cmp.w	r8, #0
 800758c:	dde9      	ble.n	8007562 <__sflush_r+0xae>
 800758e:	6a21      	ldr	r1, [r4, #32]
 8007590:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007592:	4643      	mov	r3, r8
 8007594:	463a      	mov	r2, r7
 8007596:	4628      	mov	r0, r5
 8007598:	47b0      	blx	r6
 800759a:	2800      	cmp	r0, #0
 800759c:	dc08      	bgt.n	80075b0 <__sflush_r+0xfc>
 800759e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80075a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80075a6:	81a3      	strh	r3, [r4, #12]
 80075a8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80075ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80075b0:	4407      	add	r7, r0
 80075b2:	eba8 0800 	sub.w	r8, r8, r0
 80075b6:	e7e7      	b.n	8007588 <__sflush_r+0xd4>
 80075b8:	dfbffffe 	.word	0xdfbffffe

080075bc <_fflush_r>:
 80075bc:	b538      	push	{r3, r4, r5, lr}
 80075be:	690b      	ldr	r3, [r1, #16]
 80075c0:	4605      	mov	r5, r0
 80075c2:	460c      	mov	r4, r1
 80075c4:	b913      	cbnz	r3, 80075cc <_fflush_r+0x10>
 80075c6:	2500      	movs	r5, #0
 80075c8:	4628      	mov	r0, r5
 80075ca:	bd38      	pop	{r3, r4, r5, pc}
 80075cc:	b118      	cbz	r0, 80075d6 <_fflush_r+0x1a>
 80075ce:	6a03      	ldr	r3, [r0, #32]
 80075d0:	b90b      	cbnz	r3, 80075d6 <_fflush_r+0x1a>
 80075d2:	f7ff f9ad 	bl	8006930 <__sinit>
 80075d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d0f3      	beq.n	80075c6 <_fflush_r+0xa>
 80075de:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80075e0:	07d0      	lsls	r0, r2, #31
 80075e2:	d404      	bmi.n	80075ee <_fflush_r+0x32>
 80075e4:	0599      	lsls	r1, r3, #22
 80075e6:	d402      	bmi.n	80075ee <_fflush_r+0x32>
 80075e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80075ea:	f7ff fb98 	bl	8006d1e <__retarget_lock_acquire_recursive>
 80075ee:	4628      	mov	r0, r5
 80075f0:	4621      	mov	r1, r4
 80075f2:	f7ff ff5f 	bl	80074b4 <__sflush_r>
 80075f6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80075f8:	07da      	lsls	r2, r3, #31
 80075fa:	4605      	mov	r5, r0
 80075fc:	d4e4      	bmi.n	80075c8 <_fflush_r+0xc>
 80075fe:	89a3      	ldrh	r3, [r4, #12]
 8007600:	059b      	lsls	r3, r3, #22
 8007602:	d4e1      	bmi.n	80075c8 <_fflush_r+0xc>
 8007604:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007606:	f7ff fb8b 	bl	8006d20 <__retarget_lock_release_recursive>
 800760a:	e7dd      	b.n	80075c8 <_fflush_r+0xc>

0800760c <__swhatbuf_r>:
 800760c:	b570      	push	{r4, r5, r6, lr}
 800760e:	460c      	mov	r4, r1
 8007610:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007614:	2900      	cmp	r1, #0
 8007616:	b096      	sub	sp, #88	@ 0x58
 8007618:	4615      	mov	r5, r2
 800761a:	461e      	mov	r6, r3
 800761c:	da0d      	bge.n	800763a <__swhatbuf_r+0x2e>
 800761e:	89a3      	ldrh	r3, [r4, #12]
 8007620:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007624:	f04f 0100 	mov.w	r1, #0
 8007628:	bf14      	ite	ne
 800762a:	2340      	movne	r3, #64	@ 0x40
 800762c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007630:	2000      	movs	r0, #0
 8007632:	6031      	str	r1, [r6, #0]
 8007634:	602b      	str	r3, [r5, #0]
 8007636:	b016      	add	sp, #88	@ 0x58
 8007638:	bd70      	pop	{r4, r5, r6, pc}
 800763a:	466a      	mov	r2, sp
 800763c:	f000 f848 	bl	80076d0 <_fstat_r>
 8007640:	2800      	cmp	r0, #0
 8007642:	dbec      	blt.n	800761e <__swhatbuf_r+0x12>
 8007644:	9901      	ldr	r1, [sp, #4]
 8007646:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800764a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800764e:	4259      	negs	r1, r3
 8007650:	4159      	adcs	r1, r3
 8007652:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007656:	e7eb      	b.n	8007630 <__swhatbuf_r+0x24>

08007658 <__smakebuf_r>:
 8007658:	898b      	ldrh	r3, [r1, #12]
 800765a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800765c:	079d      	lsls	r5, r3, #30
 800765e:	4606      	mov	r6, r0
 8007660:	460c      	mov	r4, r1
 8007662:	d507      	bpl.n	8007674 <__smakebuf_r+0x1c>
 8007664:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007668:	6023      	str	r3, [r4, #0]
 800766a:	6123      	str	r3, [r4, #16]
 800766c:	2301      	movs	r3, #1
 800766e:	6163      	str	r3, [r4, #20]
 8007670:	b003      	add	sp, #12
 8007672:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007674:	ab01      	add	r3, sp, #4
 8007676:	466a      	mov	r2, sp
 8007678:	f7ff ffc8 	bl	800760c <__swhatbuf_r>
 800767c:	9f00      	ldr	r7, [sp, #0]
 800767e:	4605      	mov	r5, r0
 8007680:	4639      	mov	r1, r7
 8007682:	4630      	mov	r0, r6
 8007684:	f7ff fbba 	bl	8006dfc <_malloc_r>
 8007688:	b948      	cbnz	r0, 800769e <__smakebuf_r+0x46>
 800768a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800768e:	059a      	lsls	r2, r3, #22
 8007690:	d4ee      	bmi.n	8007670 <__smakebuf_r+0x18>
 8007692:	f023 0303 	bic.w	r3, r3, #3
 8007696:	f043 0302 	orr.w	r3, r3, #2
 800769a:	81a3      	strh	r3, [r4, #12]
 800769c:	e7e2      	b.n	8007664 <__smakebuf_r+0xc>
 800769e:	89a3      	ldrh	r3, [r4, #12]
 80076a0:	6020      	str	r0, [r4, #0]
 80076a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80076a6:	81a3      	strh	r3, [r4, #12]
 80076a8:	9b01      	ldr	r3, [sp, #4]
 80076aa:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80076ae:	b15b      	cbz	r3, 80076c8 <__smakebuf_r+0x70>
 80076b0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80076b4:	4630      	mov	r0, r6
 80076b6:	f000 f81d 	bl	80076f4 <_isatty_r>
 80076ba:	b128      	cbz	r0, 80076c8 <__smakebuf_r+0x70>
 80076bc:	89a3      	ldrh	r3, [r4, #12]
 80076be:	f023 0303 	bic.w	r3, r3, #3
 80076c2:	f043 0301 	orr.w	r3, r3, #1
 80076c6:	81a3      	strh	r3, [r4, #12]
 80076c8:	89a3      	ldrh	r3, [r4, #12]
 80076ca:	431d      	orrs	r5, r3
 80076cc:	81a5      	strh	r5, [r4, #12]
 80076ce:	e7cf      	b.n	8007670 <__smakebuf_r+0x18>

080076d0 <_fstat_r>:
 80076d0:	b538      	push	{r3, r4, r5, lr}
 80076d2:	4d07      	ldr	r5, [pc, #28]	@ (80076f0 <_fstat_r+0x20>)
 80076d4:	2300      	movs	r3, #0
 80076d6:	4604      	mov	r4, r0
 80076d8:	4608      	mov	r0, r1
 80076da:	4611      	mov	r1, r2
 80076dc:	602b      	str	r3, [r5, #0]
 80076de:	f7f9 fd16 	bl	800110e <_fstat>
 80076e2:	1c43      	adds	r3, r0, #1
 80076e4:	d102      	bne.n	80076ec <_fstat_r+0x1c>
 80076e6:	682b      	ldr	r3, [r5, #0]
 80076e8:	b103      	cbz	r3, 80076ec <_fstat_r+0x1c>
 80076ea:	6023      	str	r3, [r4, #0]
 80076ec:	bd38      	pop	{r3, r4, r5, pc}
 80076ee:	bf00      	nop
 80076f0:	20000b68 	.word	0x20000b68

080076f4 <_isatty_r>:
 80076f4:	b538      	push	{r3, r4, r5, lr}
 80076f6:	4d06      	ldr	r5, [pc, #24]	@ (8007710 <_isatty_r+0x1c>)
 80076f8:	2300      	movs	r3, #0
 80076fa:	4604      	mov	r4, r0
 80076fc:	4608      	mov	r0, r1
 80076fe:	602b      	str	r3, [r5, #0]
 8007700:	f7f9 fd15 	bl	800112e <_isatty>
 8007704:	1c43      	adds	r3, r0, #1
 8007706:	d102      	bne.n	800770e <_isatty_r+0x1a>
 8007708:	682b      	ldr	r3, [r5, #0]
 800770a:	b103      	cbz	r3, 800770e <_isatty_r+0x1a>
 800770c:	6023      	str	r3, [r4, #0]
 800770e:	bd38      	pop	{r3, r4, r5, pc}
 8007710:	20000b68 	.word	0x20000b68

08007714 <_sbrk_r>:
 8007714:	b538      	push	{r3, r4, r5, lr}
 8007716:	4d06      	ldr	r5, [pc, #24]	@ (8007730 <_sbrk_r+0x1c>)
 8007718:	2300      	movs	r3, #0
 800771a:	4604      	mov	r4, r0
 800771c:	4608      	mov	r0, r1
 800771e:	602b      	str	r3, [r5, #0]
 8007720:	f7f9 fd1e 	bl	8001160 <_sbrk>
 8007724:	1c43      	adds	r3, r0, #1
 8007726:	d102      	bne.n	800772e <_sbrk_r+0x1a>
 8007728:	682b      	ldr	r3, [r5, #0]
 800772a:	b103      	cbz	r3, 800772e <_sbrk_r+0x1a>
 800772c:	6023      	str	r3, [r4, #0]
 800772e:	bd38      	pop	{r3, r4, r5, pc}
 8007730:	20000b68 	.word	0x20000b68

08007734 <_init>:
 8007734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007736:	bf00      	nop
 8007738:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800773a:	bc08      	pop	{r3}
 800773c:	469e      	mov	lr, r3
 800773e:	4770      	bx	lr

08007740 <_fini>:
 8007740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007742:	bf00      	nop
 8007744:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007746:	bc08      	pop	{r3}
 8007748:	469e      	mov	lr, r3
 800774a:	4770      	bx	lr
