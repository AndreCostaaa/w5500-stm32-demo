
w5500-demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007438  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000300  080075c8  080075c8  000085c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080078c8  080078c8  000090a0  2**0
                  CONTENTS
  4 .ARM          00000008  080078c8  080078c8  000088c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080078d0  080078d0  000090a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080078d0  080078d0  000088d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080078d4  080078d4  000088d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000a0  20000000  080078d8  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ad0  200000a0  08007978  000090a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000b70  08007978  00009b70  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000090a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014314  00000000  00000000  000090d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d2c  00000000  00000000  0001d3e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001458  00000000  00000000  00020110  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000fec  00000000  00000000  00021568  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000288bb  00000000  00000000  00022554  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001706c  00000000  00000000  0004ae0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000faa95  00000000  00000000  00061e7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015c910  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005d98  00000000  00000000  0015c954  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  001626ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000a0 	.word	0x200000a0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080075b0 	.word	0x080075b0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000a4 	.word	0x200000a4
 80001cc:	080075b0 	.word	0x080075b0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <__io_putchar>:
// 				   .dhcp_mode = NETINFO_DHCP };
static wiz_NetTimeout wiznet_timeout = { .retry_cnt = 3, .time_100us = 2000 };

//Used by _write syscall (printf)
int __io_putchar(int byte)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b082      	sub	sp, #8
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]
	return HAL_UART_Transmit(&console_uart, (uint8_t *)&byte, 1, 100);
 8000568:	1d39      	adds	r1, r7, #4
 800056a:	2364      	movs	r3, #100	@ 0x64
 800056c:	2201      	movs	r2, #1
 800056e:	4804      	ldr	r0, [pc, #16]	@ (8000580 <__io_putchar+0x20>)
 8000570:	f003 fe3c 	bl	80041ec <HAL_UART_Transmit>
 8000574:	4603      	mov	r3, r0
}
 8000576:	4618      	mov	r0, r3
 8000578:	3708      	adds	r7, #8
 800057a:	46bd      	mov	sp, r7
 800057c:	bd80      	pop	{r7, pc}
 800057e:	bf00      	nop
 8000580:	20000120 	.word	0x20000120

08000584 <crit_section_enter>:

void crit_section_enter(void)
{
 8000584:	b480      	push	{r7}
 8000586:	b083      	sub	sp, #12
 8000588:	af00      	add	r7, sp, #0
 800058a:	2301      	movs	r3, #1
 800058c:	607b      	str	r3, [r7, #4]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	f383 8810 	msr	PRIMASK, r3
}
 8000594:	bf00      	nop
	__set_PRIMASK(1);
}
 8000596:	bf00      	nop
 8000598:	370c      	adds	r7, #12
 800059a:	46bd      	mov	sp, r7
 800059c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a0:	4770      	bx	lr

080005a2 <crit_section_leave>:

void crit_section_leave(void)
{
 80005a2:	b480      	push	{r7}
 80005a4:	b083      	sub	sp, #12
 80005a6:	af00      	add	r7, sp, #0
 80005a8:	2300      	movs	r3, #0
 80005aa:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	f383 8810 	msr	PRIMASK, r3
}
 80005b2:	bf00      	nop
	__set_PRIMASK(0);
}
 80005b4:	bf00      	nop
 80005b6:	370c      	adds	r7, #12
 80005b8:	46bd      	mov	sp, r7
 80005ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005be:	4770      	bx	lr

080005c0 <spi_cs_select>:

void spi_cs_select(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 80005c4:	2200      	movs	r2, #0
 80005c6:	2140      	movs	r1, #64	@ 0x40
 80005c8:	4802      	ldr	r0, [pc, #8]	@ (80005d4 <spi_cs_select+0x14>)
 80005ca:	f001 f8b1 	bl	8001730 <HAL_GPIO_WritePin>
}
 80005ce:	bf00      	nop
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	48000400 	.word	0x48000400

080005d8 <spi_cs_deselect>:
void spi_cs_deselect(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 80005dc:	2201      	movs	r2, #1
 80005de:	2140      	movs	r1, #64	@ 0x40
 80005e0:	4802      	ldr	r0, [pc, #8]	@ (80005ec <spi_cs_deselect+0x14>)
 80005e2:	f001 f8a5 	bl	8001730 <HAL_GPIO_WritePin>
}
 80005e6:	bf00      	nop
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop
 80005ec:	48000400 	.word	0x48000400

080005f0 <spi_read>:
void spi_read(uint8_t *buf, uint16_t size)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b084      	sub	sp, #16
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
 80005f8:	460b      	mov	r3, r1
 80005fa:	807b      	strh	r3, [r7, #2]
	HAL_StatusTypeDef ret = HAL_SPI_Receive(&w5500_spi, buf, size, 100);
 80005fc:	887a      	ldrh	r2, [r7, #2]
 80005fe:	2364      	movs	r3, #100	@ 0x64
 8000600:	6879      	ldr	r1, [r7, #4]
 8000602:	4807      	ldr	r0, [pc, #28]	@ (8000620 <spi_read+0x30>)
 8000604:	f002 fde4 	bl	80031d0 <HAL_SPI_Receive>
 8000608:	4603      	mov	r3, r0
 800060a:	73fb      	strb	r3, [r7, #15]
	if (ret != HAL_OK) {
 800060c:	7bfb      	ldrb	r3, [r7, #15]
 800060e:	2b00      	cmp	r3, #0
 8000610:	d002      	beq.n	8000618 <spi_read+0x28>
		printf("Failed to read\r\n");
 8000612:	4804      	ldr	r0, [pc, #16]	@ (8000624 <spi_read+0x34>)
 8000614:	f006 f968 	bl	80068e8 <puts>
		//Handle error
	}
}
 8000618:	bf00      	nop
 800061a:	3710      	adds	r7, #16
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}
 8000620:	200000bc 	.word	0x200000bc
 8000624:	080075c8 	.word	0x080075c8

08000628 <spi_write>:
void spi_write(uint8_t *buf, uint16_t size)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b084      	sub	sp, #16
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
 8000630:	460b      	mov	r3, r1
 8000632:	807b      	strh	r3, [r7, #2]
	HAL_StatusTypeDef ret = HAL_SPI_Transmit(&w5500_spi, buf, size, 100);
 8000634:	887a      	ldrh	r2, [r7, #2]
 8000636:	2364      	movs	r3, #100	@ 0x64
 8000638:	6879      	ldr	r1, [r7, #4]
 800063a:	4807      	ldr	r0, [pc, #28]	@ (8000658 <spi_write+0x30>)
 800063c:	f002 fc53 	bl	8002ee6 <HAL_SPI_Transmit>
 8000640:	4603      	mov	r3, r0
 8000642:	73fb      	strb	r3, [r7, #15]
	if (ret != HAL_OK) {
 8000644:	7bfb      	ldrb	r3, [r7, #15]
 8000646:	2b00      	cmp	r3, #0
 8000648:	d002      	beq.n	8000650 <spi_write+0x28>
		printf("Failed to read\r\n");
 800064a:	4804      	ldr	r0, [pc, #16]	@ (800065c <spi_write+0x34>)
 800064c:	f006 f94c 	bl	80068e8 <puts>
		//Handle error
	}
}
 8000650:	bf00      	nop
 8000652:	3710      	adds	r7, #16
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}
 8000658:	200000bc 	.word	0x200000bc
 800065c:	080075c8 	.word	0x080075c8

08000660 <spi_read_byte>:
uint8_t spi_read_byte(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b082      	sub	sp, #8
 8000664:	af00      	add	r7, sp, #0
	uint8_t data;

	spi_read(&data, 1);
 8000666:	1dfb      	adds	r3, r7, #7
 8000668:	2101      	movs	r1, #1
 800066a:	4618      	mov	r0, r3
 800066c:	f7ff ffc0 	bl	80005f0 <spi_read>
	return data;
 8000670:	79fb      	ldrb	r3, [r7, #7]
}
 8000672:	4618      	mov	r0, r3
 8000674:	3708      	adds	r7, #8
 8000676:	46bd      	mov	sp, r7
 8000678:	bd80      	pop	{r7, pc}

0800067a <spi_write_byte>:
void spi_write_byte(uint8_t data)
{
 800067a:	b580      	push	{r7, lr}
 800067c:	b082      	sub	sp, #8
 800067e:	af00      	add	r7, sp, #0
 8000680:	4603      	mov	r3, r0
 8000682:	71fb      	strb	r3, [r7, #7]
	spi_write(&data, 1);
 8000684:	1dfb      	adds	r3, r7, #7
 8000686:	2101      	movs	r1, #1
 8000688:	4618      	mov	r0, r3
 800068a:	f7ff ffcd 	bl	8000628 <spi_write>
}
 800068e:	bf00      	nop
 8000690:	3708      	adds	r7, #8
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}
	...

08000698 <register_callbacks>:

void register_callbacks(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	af00      	add	r7, sp, #0
	//critical section
	reg_wizchip_cris_cbfunc(crit_section_enter, crit_section_leave);
 800069c:	4908      	ldr	r1, [pc, #32]	@ (80006c0 <register_callbacks+0x28>)
 800069e:	4809      	ldr	r0, [pc, #36]	@ (80006c4 <register_callbacks+0x2c>)
 80006a0:	f005 fa80 	bl	8005ba4 <reg_wizchip_cris_cbfunc>
	//chip select
	reg_wizchip_cs_cbfunc(spi_cs_select, spi_cs_deselect);
 80006a4:	4908      	ldr	r1, [pc, #32]	@ (80006c8 <register_callbacks+0x30>)
 80006a6:	4809      	ldr	r0, [pc, #36]	@ (80006cc <register_callbacks+0x34>)
 80006a8:	f005 faa2 	bl	8005bf0 <reg_wizchip_cs_cbfunc>
	//spi
	reg_wizchip_spi_cbfunc(spi_read_byte, spi_write_byte);
 80006ac:	4908      	ldr	r1, [pc, #32]	@ (80006d0 <register_callbacks+0x38>)
 80006ae:	4809      	ldr	r0, [pc, #36]	@ (80006d4 <register_callbacks+0x3c>)
 80006b0:	f005 fac4 	bl	8005c3c <reg_wizchip_spi_cbfunc>
	//spi burst
	reg_wizchip_spiburst_cbfunc(spi_read, spi_write);
 80006b4:	4908      	ldr	r1, [pc, #32]	@ (80006d8 <register_callbacks+0x40>)
 80006b6:	4809      	ldr	r0, [pc, #36]	@ (80006dc <register_callbacks+0x44>)
 80006b8:	f005 faec 	bl	8005c94 <reg_wizchip_spiburst_cbfunc>
}
 80006bc:	bf00      	nop
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	080005a3 	.word	0x080005a3
 80006c4:	08000585 	.word	0x08000585
 80006c8:	080005d9 	.word	0x080005d9
 80006cc:	080005c1 	.word	0x080005c1
 80006d0:	0800067b 	.word	0x0800067b
 80006d4:	08000661 	.word	0x08000661
 80006d8:	08000629 	.word	0x08000629
 80006dc:	080005f1 	.word	0x080005f1

080006e0 <network_init>:
	printf("DNS: %d.%d.%d.%d\r\n", info->dns[0], info->dns[1], info->dns[2],
	       info->dns[3]);
	printf("======================\r\n");
}
void network_init(wiz_NetInfo *info, wiz_NetTimeout *timeout)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b082      	sub	sp, #8
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
 80006e8:	6039      	str	r1, [r7, #0]
	ctlnetwork(CN_SET_TIMEOUT, (void *)timeout);
 80006ea:	6839      	ldr	r1, [r7, #0]
 80006ec:	2004      	movs	r0, #4
 80006ee:	f005 fbdd 	bl	8005eac <ctlnetwork>
	ctlnetwork(CN_SET_NETINFO, (void *)info);
 80006f2:	6879      	ldr	r1, [r7, #4]
 80006f4:	2000      	movs	r0, #0
 80006f6:	f005 fbd9 	bl	8005eac <ctlnetwork>
}
 80006fa:	bf00      	nop
 80006fc:	3708      	adds	r7, #8
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}
	...

08000704 <handle_tcp_connection>:
		break;
	}
	old_dhcp_ret = dhcp_ret;
}
void handle_tcp_connection(void)
{
 8000704:	b590      	push	{r4, r7, lr}
 8000706:	b087      	sub	sp, #28
 8000708:	af02      	add	r7, sp, #8
	int32_t size, size_tx_sent = 0;
 800070a:	2300      	movs	r3, #0
 800070c:	60bb      	str	r3, [r7, #8]
	static uint16_t current_port = 50000;
	switch (getSn_SR(TCP_SOCKET)) {
 800070e:	f44f 704a 	mov.w	r0, #808	@ 0x328
 8000712:	f004 fac3 	bl	8004c9c <WIZCHIP_READ>
 8000716:	4603      	mov	r3, r0
 8000718:	2b1c      	cmp	r3, #28
 800071a:	f200 80f2 	bhi.w	8000902 <handle_tcp_connection+0x1fe>
 800071e:	a201      	add	r2, pc, #4	@ (adr r2, 8000724 <handle_tcp_connection+0x20>)
 8000720:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000724:	080008b3 	.word	0x080008b3
 8000728:	08000903 	.word	0x08000903
 800072c:	08000903 	.word	0x08000903
 8000730:	08000903 	.word	0x08000903
 8000734:	08000903 	.word	0x08000903
 8000738:	08000903 	.word	0x08000903
 800073c:	08000903 	.word	0x08000903
 8000740:	08000903 	.word	0x08000903
 8000744:	08000903 	.word	0x08000903
 8000748:	08000903 	.word	0x08000903
 800074c:	08000903 	.word	0x08000903
 8000750:	08000903 	.word	0x08000903
 8000754:	08000903 	.word	0x08000903
 8000758:	08000903 	.word	0x08000903
 800075c:	08000903 	.word	0x08000903
 8000760:	08000903 	.word	0x08000903
 8000764:	08000903 	.word	0x08000903
 8000768:	08000903 	.word	0x08000903
 800076c:	08000903 	.word	0x08000903
 8000770:	0800086f 	.word	0x0800086f
 8000774:	08000903 	.word	0x08000903
 8000778:	08000903 	.word	0x08000903
 800077c:	08000903 	.word	0x08000903
 8000780:	08000799 	.word	0x08000799
 8000784:	08000903 	.word	0x08000903
 8000788:	08000903 	.word	0x08000903
 800078c:	08000903 	.word	0x08000903
 8000790:	08000903 	.word	0x08000903
 8000794:	0800085b 	.word	0x0800085b
	case SOCK_ESTABLISHED:

		if (getSn_IR(TCP_SOCKET) & Sn_IR_CON) { // Interrupt flag
 8000798:	f44f 700a 	mov.w	r0, #552	@ 0x228
 800079c:	f004 fa7e 	bl	8004c9c <WIZCHIP_READ>
 80007a0:	4603      	mov	r3, r0
 80007a2:	f003 0301 	and.w	r3, r3, #1
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d004      	beq.n	80007b4 <handle_tcp_connection+0xb0>
			setSn_IR(TCP_SOCKET, Sn_IR_CON); // clear interrupt flag
 80007aa:	2101      	movs	r1, #1
 80007ac:	f44f 700a 	mov.w	r0, #552	@ 0x228
 80007b0:	f004 fac0 	bl	8004d34 <WIZCHIP_WRITE>
		}
		if ((size = getSn_RX_RSR(TCP_SOCKET)) <= 0) {
 80007b4:	2001      	movs	r0, #1
 80007b6:	f004 fc14 	bl	8004fe2 <getSn_RX_RSR>
 80007ba:	4603      	mov	r3, r0
 80007bc:	60fb      	str	r3, [r7, #12]
 80007be:	68fb      	ldr	r3, [r7, #12]
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	f340 8095 	ble.w	80008f0 <handle_tcp_connection+0x1ec>
			break;
		}
		if (size > TCP_BUFFER_SIZE) {
 80007c6:	68fb      	ldr	r3, [r7, #12]
 80007c8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80007cc:	dd02      	ble.n	80007d4 <handle_tcp_connection+0xd0>
			size = TCP_BUFFER_SIZE;
 80007ce:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80007d2:	60fb      	str	r3, [r7, #12]
		}
		size = recv(TCP_SOCKET, tcp_buffer, size);
 80007d4:	68fb      	ldr	r3, [r7, #12]
 80007d6:	b29b      	uxth	r3, r3
 80007d8:	461a      	mov	r2, r3
 80007da:	494b      	ldr	r1, [pc, #300]	@ (8000908 <handle_tcp_connection+0x204>)
 80007dc:	2001      	movs	r0, #1
 80007de:	f005 f8c9 	bl	8005974 <recv>
 80007e2:	60f8      	str	r0, [r7, #12]
		if (size <= 0) {
 80007e4:	68fb      	ldr	r3, [r7, #12]
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	dc04      	bgt.n	80007f4 <handle_tcp_connection+0xf0>
			printf("Received failed %d\r\n", size);
 80007ea:	68f9      	ldr	r1, [r7, #12]
 80007ec:	4847      	ldr	r0, [pc, #284]	@ (800090c <handle_tcp_connection+0x208>)
 80007ee:	f006 f813 	bl	8006818 <iprintf>
			break;
 80007f2:	e086      	b.n	8000902 <handle_tcp_connection+0x1fe>
		}
		for (int32_t i = 0; i < size; ++i) {
 80007f4:	2300      	movs	r3, #0
 80007f6:	607b      	str	r3, [r7, #4]
 80007f8:	e00d      	b.n	8000816 <handle_tcp_connection+0x112>
			tcp_buffer[i]++;
 80007fa:	4a43      	ldr	r2, [pc, #268]	@ (8000908 <handle_tcp_connection+0x204>)
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	4413      	add	r3, r2
 8000800:	781b      	ldrb	r3, [r3, #0]
 8000802:	3301      	adds	r3, #1
 8000804:	b2d9      	uxtb	r1, r3
 8000806:	4a40      	ldr	r2, [pc, #256]	@ (8000908 <handle_tcp_connection+0x204>)
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	4413      	add	r3, r2
 800080c:	460a      	mov	r2, r1
 800080e:	701a      	strb	r2, [r3, #0]
		for (int32_t i = 0; i < size; ++i) {
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	3301      	adds	r3, #1
 8000814:	607b      	str	r3, [r7, #4]
 8000816:	687a      	ldr	r2, [r7, #4]
 8000818:	68fb      	ldr	r3, [r7, #12]
 800081a:	429a      	cmp	r2, r3
 800081c:	dbed      	blt.n	80007fa <handle_tcp_connection+0xf6>
		}
		while (size_tx_sent < size) {
 800081e:	e017      	b.n	8000850 <handle_tcp_connection+0x14c>
			size_tx_sent += send(TCP_SOCKET,
 8000820:	68bb      	ldr	r3, [r7, #8]
 8000822:	4a39      	ldr	r2, [pc, #228]	@ (8000908 <handle_tcp_connection+0x204>)
 8000824:	4413      	add	r3, r2
 8000826:	68fa      	ldr	r2, [r7, #12]
 8000828:	b292      	uxth	r2, r2
 800082a:	4619      	mov	r1, r3
 800082c:	2001      	movs	r0, #1
 800082e:	f004 ffa9 	bl	8005784 <send>
 8000832:	4602      	mov	r2, r0
 8000834:	68bb      	ldr	r3, [r7, #8]
 8000836:	4413      	add	r3, r2
 8000838:	60bb      	str	r3, [r7, #8]
					     tcp_buffer + size_tx_sent, size);
			if (size_tx_sent < 0) {
 800083a:	68bb      	ldr	r3, [r7, #8]
 800083c:	2b00      	cmp	r3, #0
 800083e:	da07      	bge.n	8000850 <handle_tcp_connection+0x14c>
				printf("Send Error %d. Closing socket\r\n",
 8000840:	68b9      	ldr	r1, [r7, #8]
 8000842:	4833      	ldr	r0, [pc, #204]	@ (8000910 <handle_tcp_connection+0x20c>)
 8000844:	f005 ffe8 	bl	8006818 <iprintf>
				       size_tx_sent);
				close(TCP_SOCKET);
 8000848:	2001      	movs	r0, #1
 800084a:	f004 fddb 	bl	8005404 <close>
				return;
 800084e:	e058      	b.n	8000902 <handle_tcp_connection+0x1fe>
		while (size_tx_sent < size) {
 8000850:	68ba      	ldr	r2, [r7, #8]
 8000852:	68fb      	ldr	r3, [r7, #12]
 8000854:	429a      	cmp	r2, r3
 8000856:	dbe3      	blt.n	8000820 <handle_tcp_connection+0x11c>
			}
		}
		break;
 8000858:	e053      	b.n	8000902 <handle_tcp_connection+0x1fe>
	case SOCK_CLOSE_WAIT:
		if (disconnect(TCP_SOCKET) != SOCK_OK) {
 800085a:	2001      	movs	r0, #1
 800085c:	f004 ff1c 	bl	8005698 <disconnect>
 8000860:	4603      	mov	r3, r0
 8000862:	2b01      	cmp	r3, #1
 8000864:	d146      	bne.n	80008f4 <handle_tcp_connection+0x1f0>
			break;
		}
		printf("Socket closed\r\n");
 8000866:	482b      	ldr	r0, [pc, #172]	@ (8000914 <handle_tcp_connection+0x210>)
 8000868:	f006 f83e 	bl	80068e8 <puts>
		break;
 800086c:	e049      	b.n	8000902 <handle_tcp_connection+0x1fe>
	case SOCK_INIT:
		printf("Connecting to %d.%d.%d.%d:%d\r\n", dst_ip[0], dst_ip[1],
 800086e:	4b2a      	ldr	r3, [pc, #168]	@ (8000918 <handle_tcp_connection+0x214>)
 8000870:	781b      	ldrb	r3, [r3, #0]
 8000872:	4619      	mov	r1, r3
 8000874:	4b28      	ldr	r3, [pc, #160]	@ (8000918 <handle_tcp_connection+0x214>)
 8000876:	785b      	ldrb	r3, [r3, #1]
 8000878:	4618      	mov	r0, r3
		       dst_ip[2], dst_ip[3], dst_port);
 800087a:	4b27      	ldr	r3, [pc, #156]	@ (8000918 <handle_tcp_connection+0x214>)
 800087c:	789b      	ldrb	r3, [r3, #2]
		printf("Connecting to %d.%d.%d.%d:%d\r\n", dst_ip[0], dst_ip[1],
 800087e:	461c      	mov	r4, r3
		       dst_ip[2], dst_ip[3], dst_port);
 8000880:	4b25      	ldr	r3, [pc, #148]	@ (8000918 <handle_tcp_connection+0x214>)
 8000882:	78db      	ldrb	r3, [r3, #3]
		printf("Connecting to %d.%d.%d.%d:%d\r\n", dst_ip[0], dst_ip[1],
 8000884:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 8000888:	9201      	str	r2, [sp, #4]
 800088a:	9300      	str	r3, [sp, #0]
 800088c:	4623      	mov	r3, r4
 800088e:	4602      	mov	r2, r0
 8000890:	4822      	ldr	r0, [pc, #136]	@ (800091c <handle_tcp_connection+0x218>)
 8000892:	f005 ffc1 	bl	8006818 <iprintf>
		if (connect(TCP_SOCKET, dst_ip, dst_port) != SOCK_OK) {
 8000896:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 800089a:	461a      	mov	r2, r3
 800089c:	491e      	ldr	r1, [pc, #120]	@ (8000918 <handle_tcp_connection+0x214>)
 800089e:	2001      	movs	r0, #1
 80008a0:	f004 fe1e 	bl	80054e0 <connect>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b01      	cmp	r3, #1
 80008a8:	d126      	bne.n	80008f8 <handle_tcp_connection+0x1f4>
			return;
		}
		printf("Connected !\r\n");
 80008aa:	481d      	ldr	r0, [pc, #116]	@ (8000920 <handle_tcp_connection+0x21c>)
 80008ac:	f006 f81c 	bl	80068e8 <puts>
		break;
 80008b0:	e027      	b.n	8000902 <handle_tcp_connection+0x1fe>
	case SOCK_CLOSED:
		printf("sock closed !\r\n");
 80008b2:	481c      	ldr	r0, [pc, #112]	@ (8000924 <handle_tcp_connection+0x220>)
 80008b4:	f006 f818 	bl	80068e8 <puts>
		close(TCP_SOCKET);
 80008b8:	2001      	movs	r0, #1
 80008ba:	f004 fda3 	bl	8005404 <close>
		if (socket(TCP_SOCKET, Sn_MR_TCP, current_port++, 0x00) !=
 80008be:	4b1a      	ldr	r3, [pc, #104]	@ (8000928 <handle_tcp_connection+0x224>)
 80008c0:	881a      	ldrh	r2, [r3, #0]
 80008c2:	1c53      	adds	r3, r2, #1
 80008c4:	b299      	uxth	r1, r3
 80008c6:	4b18      	ldr	r3, [pc, #96]	@ (8000928 <handle_tcp_connection+0x224>)
 80008c8:	8019      	strh	r1, [r3, #0]
 80008ca:	2300      	movs	r3, #0
 80008cc:	2101      	movs	r1, #1
 80008ce:	2001      	movs	r0, #1
 80008d0:	f004 fc84 	bl	80051dc <socket>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b01      	cmp	r3, #1
 80008d8:	d010      	beq.n	80008fc <handle_tcp_connection+0x1f8>
		    TCP_SOCKET) {
			if (current_port == 0xffff) {
 80008da:	4b13      	ldr	r3, [pc, #76]	@ (8000928 <handle_tcp_connection+0x224>)
 80008dc:	881b      	ldrh	r3, [r3, #0]
 80008de:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80008e2:	4293      	cmp	r3, r2
 80008e4:	d10c      	bne.n	8000900 <handle_tcp_connection+0x1fc>
				current_port = 50000;
 80008e6:	4b10      	ldr	r3, [pc, #64]	@ (8000928 <handle_tcp_connection+0x224>)
 80008e8:	f24c 3250 	movw	r2, #50000	@ 0xc350
 80008ec:	801a      	strh	r2, [r3, #0]
			}
			break;
 80008ee:	e007      	b.n	8000900 <handle_tcp_connection+0x1fc>
			break;
 80008f0:	bf00      	nop
 80008f2:	e006      	b.n	8000902 <handle_tcp_connection+0x1fe>
			break;
 80008f4:	bf00      	nop
 80008f6:	e004      	b.n	8000902 <handle_tcp_connection+0x1fe>
			return;
 80008f8:	bf00      	nop
 80008fa:	e002      	b.n	8000902 <handle_tcp_connection+0x1fe>
		}
		break;
 80008fc:	bf00      	nop
 80008fe:	e000      	b.n	8000902 <handle_tcp_connection+0x1fe>
			break;
 8000900:	bf00      	nop
	}
}
 8000902:	3714      	adds	r7, #20
 8000904:	46bd      	mov	sp, r7
 8000906:	bd90      	pop	{r4, r7, pc}
 8000908:	200001f4 	.word	0x200001f4
 800090c:	08007744 	.word	0x08007744
 8000910:	0800775c 	.word	0x0800775c
 8000914:	0800777c 	.word	0x0800777c
 8000918:	20000000 	.word	0x20000000
 800091c:	0800778c 	.word	0x0800778c
 8000920:	080077ac 	.word	0x080077ac
 8000924:	080077bc 	.word	0x080077bc
 8000928:	20000008 	.word	0x20000008

0800092c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b082      	sub	sp, #8
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
	if (htim == &htim16) {
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	4a04      	ldr	r2, [pc, #16]	@ (8000948 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8000938:	4293      	cmp	r3, r2
 800093a:	d101      	bne.n	8000940 <HAL_TIM_PeriodElapsedCallback+0x14>
		DHCP_time_handler();
 800093c:	f005 fe9c 	bl	8006678 <DHCP_time_handler>
	}
}
 8000940:	bf00      	nop
 8000942:	3708      	adds	r7, #8
 8000944:	46bd      	mov	sp, r7
 8000946:	bd80      	pop	{r7, pc}
 8000948:	200001a8 	.word	0x200001a8

0800094c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800094c:	b590      	push	{r4, r7, lr}
 800094e:	b08b      	sub	sp, #44	@ 0x2c
 8000950:	af00      	add	r7, sp, #0
	uint8_t memsize[2][8] = { { 2, 2, 2, 2, 2, 2, 2, 2 },
 8000952:	4b27      	ldr	r3, [pc, #156]	@ (80009f0 <main+0xa4>)
 8000954:	f107 0418 	add.w	r4, r7, #24
 8000958:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800095a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
				  { 2, 2, 2, 2, 2, 2, 2, 2 } };
	HAL_Init();
 800095e:	f000 fbaf 	bl	80010c0 <HAL_Init>

	SystemClock_Config();
 8000962:	f000 f855 	bl	8000a10 <SystemClock_Config>

	MX_GPIO_Init();
 8000966:	f000 f93d 	bl	8000be4 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 800096a:	f000 f90b 	bl	8000b84 <MX_USART2_UART_Init>
	MX_SPI1_Init();
 800096e:	f000 f8cb 	bl	8000b08 <MX_SPI1_Init>
	MX_TIM16_Init();
 8000972:	f000 f89f 	bl	8000ab4 <MX_TIM16_Init>

	register_callbacks();
 8000976:	f7ff fe8f 	bl	8000698 <register_callbacks>
	if (ctlwizchip(0, (void *)memsize) == -1) {
 800097a:	f107 0318 	add.w	r3, r7, #24
 800097e:	4619      	mov	r1, r3
 8000980:	2000      	movs	r0, #0
 8000982:	f005 f9b3 	bl	8005cec <ctlwizchip>
 8000986:	4603      	mov	r3, r0
 8000988:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800098c:	d104      	bne.n	8000998 <main+0x4c>
		printf("WIZCHIP Initialized fail.\r\n");
 800098e:	4819      	ldr	r0, [pc, #100]	@ (80009f4 <main+0xa8>)
 8000990:	f005 ffaa 	bl	80068e8 <puts>
		Error_Handler();
 8000994:	f000 f98c 	bl	8000cb0 <Error_Handler>
	setSHAR(mac_address);
	reg_dhcp_cbfunc(on_dhcp_ip_assign, on_dhcp_ip_renewed,
			on_dhcp_ip_conflict);
	DHCP_init(DHCP_SOCKET, dhcp_buffer);
#else
	wiz_NetInfo info = { .gw = { 192, 168, 0, 1 },
 8000998:	463b      	mov	r3, r7
 800099a:	2200      	movs	r2, #0
 800099c:	601a      	str	r2, [r3, #0]
 800099e:	605a      	str	r2, [r3, #4]
 80009a0:	609a      	str	r2, [r3, #8]
 80009a2:	60da      	str	r2, [r3, #12]
 80009a4:	611a      	str	r2, [r3, #16]
 80009a6:	f8c3 2013 	str.w	r2, [r3, #19]
 80009aa:	4a13      	ldr	r2, [pc, #76]	@ (80009f8 <main+0xac>)
 80009ac:	463b      	mov	r3, r7
 80009ae:	e892 0003 	ldmia.w	r2, {r0, r1}
 80009b2:	6018      	str	r0, [r3, #0]
 80009b4:	3304      	adds	r3, #4
 80009b6:	8019      	strh	r1, [r3, #0]
 80009b8:	4a10      	ldr	r2, [pc, #64]	@ (80009fc <main+0xb0>)
 80009ba:	1dbb      	adds	r3, r7, #6
 80009bc:	6810      	ldr	r0, [r2, #0]
 80009be:	6018      	str	r0, [r3, #0]
 80009c0:	4a0f      	ldr	r2, [pc, #60]	@ (8000a00 <main+0xb4>)
 80009c2:	f107 030a 	add.w	r3, r7, #10
 80009c6:	6810      	ldr	r0, [r2, #0]
 80009c8:	6018      	str	r0, [r3, #0]
 80009ca:	4a0e      	ldr	r2, [pc, #56]	@ (8000a04 <main+0xb8>)
 80009cc:	f107 030e 	add.w	r3, r7, #14
 80009d0:	6810      	ldr	r0, [r2, #0]
 80009d2:	6018      	str	r0, [r3, #0]
 80009d4:	2301      	movs	r3, #1
 80009d6:	75bb      	strb	r3, [r7, #22]
			     .ip = { 192, 168, 0, 2 },
			     .sn = { 255, 255, 255, 0 },
			     .mac = { 0x0c, 0x29, 0xab, 0x7c, 0x00, 0x01 },
			     .dhcp = NETINFO_STATIC };
	network_init(&info, &wiznet_timeout);
 80009d8:	463b      	mov	r3, r7
 80009da:	490b      	ldr	r1, [pc, #44]	@ (8000a08 <main+0xbc>)
 80009dc:	4618      	mov	r0, r3
 80009de:	f7ff fe7f 	bl	80006e0 <network_init>
#endif

	printf("Hello World!\r\n");
 80009e2:	480a      	ldr	r0, [pc, #40]	@ (8000a0c <main+0xc0>)
 80009e4:	f005 ff80 	bl	80068e8 <puts>
	while (1) {
#ifdef DHCP
		handle_dhcp();
#endif
		handle_tcp_connection();
 80009e8:	f7ff fe8c 	bl	8000704 <handle_tcp_connection>
 80009ec:	e7fc      	b.n	80009e8 <main+0x9c>
 80009ee:	bf00      	nop
 80009f0:	080077f8 	.word	0x080077f8
 80009f4:	080077cc 	.word	0x080077cc
 80009f8:	08007808 	.word	0x08007808
 80009fc:	08007810 	.word	0x08007810
 8000a00:	08007814 	.word	0x08007814
 8000a04:	08007818 	.word	0x08007818
 8000a08:	20000004 	.word	0x20000004
 8000a0c:	080077e8 	.word	0x080077e8

08000a10 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b096      	sub	sp, #88	@ 0x58
 8000a14:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000a16:	f107 0314 	add.w	r3, r7, #20
 8000a1a:	2244      	movs	r2, #68	@ 0x44
 8000a1c:	2100      	movs	r1, #0
 8000a1e:	4618      	mov	r0, r3
 8000a20:	f006 f842 	bl	8006aa8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000a24:	463b      	mov	r3, r7
 8000a26:	2200      	movs	r2, #0
 8000a28:	601a      	str	r2, [r3, #0]
 8000a2a:	605a      	str	r2, [r3, #4]
 8000a2c:	609a      	str	r2, [r3, #8]
 8000a2e:	60da      	str	r2, [r3, #12]
 8000a30:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
  */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) !=
 8000a32:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000a36:	f000 fea1 	bl	800177c <HAL_PWREx_ControlVoltageScaling>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d001      	beq.n	8000a44 <SystemClock_Config+0x34>
	    HAL_OK) {
		Error_Handler();
 8000a40:	f000 f936 	bl	8000cb0 <Error_Handler>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a44:	2302      	movs	r3, #2
 8000a46:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a48:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000a4c:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a4e:	2310      	movs	r3, #16
 8000a50:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a52:	2302      	movs	r3, #2
 8000a54:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a56:	2302      	movs	r3, #2
 8000a58:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLM = 1;
 8000a5a:	2301      	movs	r3, #1
 8000a5c:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLN = 10;
 8000a5e:	230a      	movs	r3, #10
 8000a60:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000a62:	2307      	movs	r3, #7
 8000a64:	64fb      	str	r3, [r7, #76]	@ 0x4c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000a66:	2302      	movs	r3, #2
 8000a68:	653b      	str	r3, [r7, #80]	@ 0x50
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000a6a:	2302      	movs	r3, #2
 8000a6c:	657b      	str	r3, [r7, #84]	@ 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000a6e:	f107 0314 	add.w	r3, r7, #20
 8000a72:	4618      	mov	r0, r3
 8000a74:	f000 fed8 	bl	8001828 <HAL_RCC_OscConfig>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d001      	beq.n	8000a82 <SystemClock_Config+0x72>
		Error_Handler();
 8000a7e:	f000 f917 	bl	8000cb0 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
  */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK |
 8000a82:	230f      	movs	r3, #15
 8000a84:	603b      	str	r3, [r7, #0]
				      RCC_CLOCKTYPE_SYSCLK |
				      RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a86:	2303      	movs	r3, #3
 8000a88:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a92:	2300      	movs	r3, #0
 8000a94:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) !=
 8000a96:	463b      	mov	r3, r7
 8000a98:	2104      	movs	r1, #4
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f001 faa0 	bl	8001fe0 <HAL_RCC_ClockConfig>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d001      	beq.n	8000aaa <SystemClock_Config+0x9a>
	    HAL_OK) {
		Error_Handler();
 8000aa6:	f000 f903 	bl	8000cb0 <Error_Handler>
	}
}
 8000aaa:	bf00      	nop
 8000aac:	3758      	adds	r7, #88	@ 0x58
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}
	...

08000ab4 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	af00      	add	r7, sp, #0
	htim16.Instance = TIM16;
 8000ab8:	4b11      	ldr	r3, [pc, #68]	@ (8000b00 <MX_TIM16_Init+0x4c>)
 8000aba:	4a12      	ldr	r2, [pc, #72]	@ (8000b04 <MX_TIM16_Init+0x50>)
 8000abc:	601a      	str	r2, [r3, #0]
	htim16.Init.Prescaler = 8000 - 1;
 8000abe:	4b10      	ldr	r3, [pc, #64]	@ (8000b00 <MX_TIM16_Init+0x4c>)
 8000ac0:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8000ac4:	605a      	str	r2, [r3, #4]
	htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ac6:	4b0e      	ldr	r3, [pc, #56]	@ (8000b00 <MX_TIM16_Init+0x4c>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	609a      	str	r2, [r3, #8]
	htim16.Init.Period = 10000 - 1;
 8000acc:	4b0c      	ldr	r3, [pc, #48]	@ (8000b00 <MX_TIM16_Init+0x4c>)
 8000ace:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000ad2:	60da      	str	r2, [r3, #12]
	htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ad4:	4b0a      	ldr	r3, [pc, #40]	@ (8000b00 <MX_TIM16_Init+0x4c>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	611a      	str	r2, [r3, #16]
	htim16.Init.RepetitionCounter = 0;
 8000ada:	4b09      	ldr	r3, [pc, #36]	@ (8000b00 <MX_TIM16_Init+0x4c>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	615a      	str	r2, [r3, #20]
	htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ae0:	4b07      	ldr	r3, [pc, #28]	@ (8000b00 <MX_TIM16_Init+0x4c>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim16) != HAL_OK) {
 8000ae6:	4806      	ldr	r0, [pc, #24]	@ (8000b00 <MX_TIM16_Init+0x4c>)
 8000ae8:	f003 f888 	bl	8003bfc <HAL_TIM_Base_Init>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d001      	beq.n	8000af6 <MX_TIM16_Init+0x42>
		Error_Handler();
 8000af2:	f000 f8dd 	bl	8000cb0 <Error_Handler>
	}
	HAL_TIM_Base_Start_IT(&htim16);
 8000af6:	4802      	ldr	r0, [pc, #8]	@ (8000b00 <MX_TIM16_Init+0x4c>)
 8000af8:	f003 f8d8 	bl	8003cac <HAL_TIM_Base_Start_IT>
}
 8000afc:	bf00      	nop
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	200001a8 	.word	0x200001a8
 8000b04:	40014400 	.word	0x40014400

08000b08 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	af00      	add	r7, sp, #0
	/* SPI1 parameter configuration*/
	w5500_spi.Instance = SPI1;
 8000b0c:	4b1b      	ldr	r3, [pc, #108]	@ (8000b7c <MX_SPI1_Init+0x74>)
 8000b0e:	4a1c      	ldr	r2, [pc, #112]	@ (8000b80 <MX_SPI1_Init+0x78>)
 8000b10:	601a      	str	r2, [r3, #0]
	w5500_spi.Init.Mode = SPI_MODE_MASTER;
 8000b12:	4b1a      	ldr	r3, [pc, #104]	@ (8000b7c <MX_SPI1_Init+0x74>)
 8000b14:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000b18:	605a      	str	r2, [r3, #4]
	w5500_spi.Init.Direction = SPI_DIRECTION_2LINES;
 8000b1a:	4b18      	ldr	r3, [pc, #96]	@ (8000b7c <MX_SPI1_Init+0x74>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	609a      	str	r2, [r3, #8]
	w5500_spi.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b20:	4b16      	ldr	r3, [pc, #88]	@ (8000b7c <MX_SPI1_Init+0x74>)
 8000b22:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000b26:	60da      	str	r2, [r3, #12]
	w5500_spi.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b28:	4b14      	ldr	r3, [pc, #80]	@ (8000b7c <MX_SPI1_Init+0x74>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	611a      	str	r2, [r3, #16]
	w5500_spi.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b2e:	4b13      	ldr	r3, [pc, #76]	@ (8000b7c <MX_SPI1_Init+0x74>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	615a      	str	r2, [r3, #20]
	w5500_spi.Init.NSS = SPI_NSS_SOFT;
 8000b34:	4b11      	ldr	r3, [pc, #68]	@ (8000b7c <MX_SPI1_Init+0x74>)
 8000b36:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000b3a:	619a      	str	r2, [r3, #24]
	w5500_spi.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000b3c:	4b0f      	ldr	r3, [pc, #60]	@ (8000b7c <MX_SPI1_Init+0x74>)
 8000b3e:	2208      	movs	r2, #8
 8000b40:	61da      	str	r2, [r3, #28]
	w5500_spi.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b42:	4b0e      	ldr	r3, [pc, #56]	@ (8000b7c <MX_SPI1_Init+0x74>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	621a      	str	r2, [r3, #32]
	w5500_spi.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b48:	4b0c      	ldr	r3, [pc, #48]	@ (8000b7c <MX_SPI1_Init+0x74>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	625a      	str	r2, [r3, #36]	@ 0x24
	w5500_spi.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b4e:	4b0b      	ldr	r3, [pc, #44]	@ (8000b7c <MX_SPI1_Init+0x74>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	629a      	str	r2, [r3, #40]	@ 0x28
	w5500_spi.Init.CRCPolynomial = 7;
 8000b54:	4b09      	ldr	r3, [pc, #36]	@ (8000b7c <MX_SPI1_Init+0x74>)
 8000b56:	2207      	movs	r2, #7
 8000b58:	62da      	str	r2, [r3, #44]	@ 0x2c
	w5500_spi.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000b5a:	4b08      	ldr	r3, [pc, #32]	@ (8000b7c <MX_SPI1_Init+0x74>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	631a      	str	r2, [r3, #48]	@ 0x30
	w5500_spi.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000b60:	4b06      	ldr	r3, [pc, #24]	@ (8000b7c <MX_SPI1_Init+0x74>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	635a      	str	r2, [r3, #52]	@ 0x34
	if (HAL_SPI_Init(&w5500_spi) != HAL_OK) {
 8000b66:	4805      	ldr	r0, [pc, #20]	@ (8000b7c <MX_SPI1_Init+0x74>)
 8000b68:	f002 f91a 	bl	8002da0 <HAL_SPI_Init>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d001      	beq.n	8000b76 <MX_SPI1_Init+0x6e>
		Error_Handler();
 8000b72:	f000 f89d 	bl	8000cb0 <Error_Handler>
	}
}
 8000b76:	bf00      	nop
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	200000bc 	.word	0x200000bc
 8000b80:	40013000 	.word	0x40013000

08000b84 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	af00      	add	r7, sp, #0
	console_uart.Instance = USART2;
 8000b88:	4b14      	ldr	r3, [pc, #80]	@ (8000bdc <MX_USART2_UART_Init+0x58>)
 8000b8a:	4a15      	ldr	r2, [pc, #84]	@ (8000be0 <MX_USART2_UART_Init+0x5c>)
 8000b8c:	601a      	str	r2, [r3, #0]
	console_uart.Init.BaudRate = 115200;
 8000b8e:	4b13      	ldr	r3, [pc, #76]	@ (8000bdc <MX_USART2_UART_Init+0x58>)
 8000b90:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b94:	605a      	str	r2, [r3, #4]
	console_uart.Init.WordLength = UART_WORDLENGTH_8B;
 8000b96:	4b11      	ldr	r3, [pc, #68]	@ (8000bdc <MX_USART2_UART_Init+0x58>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	609a      	str	r2, [r3, #8]
	console_uart.Init.StopBits = UART_STOPBITS_1;
 8000b9c:	4b0f      	ldr	r3, [pc, #60]	@ (8000bdc <MX_USART2_UART_Init+0x58>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	60da      	str	r2, [r3, #12]
	console_uart.Init.Parity = UART_PARITY_NONE;
 8000ba2:	4b0e      	ldr	r3, [pc, #56]	@ (8000bdc <MX_USART2_UART_Init+0x58>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	611a      	str	r2, [r3, #16]
	console_uart.Init.Mode = UART_MODE_TX_RX;
 8000ba8:	4b0c      	ldr	r3, [pc, #48]	@ (8000bdc <MX_USART2_UART_Init+0x58>)
 8000baa:	220c      	movs	r2, #12
 8000bac:	615a      	str	r2, [r3, #20]
	console_uart.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bae:	4b0b      	ldr	r3, [pc, #44]	@ (8000bdc <MX_USART2_UART_Init+0x58>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	619a      	str	r2, [r3, #24]
	console_uart.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bb4:	4b09      	ldr	r3, [pc, #36]	@ (8000bdc <MX_USART2_UART_Init+0x58>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	61da      	str	r2, [r3, #28]
	console_uart.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bba:	4b08      	ldr	r3, [pc, #32]	@ (8000bdc <MX_USART2_UART_Init+0x58>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	621a      	str	r2, [r3, #32]
	console_uart.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bc0:	4b06      	ldr	r3, [pc, #24]	@ (8000bdc <MX_USART2_UART_Init+0x58>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	625a      	str	r2, [r3, #36]	@ 0x24
	if (HAL_UART_Init(&console_uart) != HAL_OK) {
 8000bc6:	4805      	ldr	r0, [pc, #20]	@ (8000bdc <MX_USART2_UART_Init+0x58>)
 8000bc8:	f003 fac2 	bl	8004150 <HAL_UART_Init>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d001      	beq.n	8000bd6 <MX_USART2_UART_Init+0x52>
		Error_Handler();
 8000bd2:	f000 f86d 	bl	8000cb0 <Error_Handler>
	}
}
 8000bd6:	bf00      	nop
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	20000120 	.word	0x20000120
 8000be0:	40004400 	.word	0x40004400

08000be4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b08a      	sub	sp, #40	@ 0x28
 8000be8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000bea:	f107 0314 	add.w	r3, r7, #20
 8000bee:	2200      	movs	r2, #0
 8000bf0:	601a      	str	r2, [r3, #0]
 8000bf2:	605a      	str	r2, [r3, #4]
 8000bf4:	609a      	str	r2, [r3, #8]
 8000bf6:	60da      	str	r2, [r3, #12]
 8000bf8:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000bfa:	4b2a      	ldr	r3, [pc, #168]	@ (8000ca4 <MX_GPIO_Init+0xc0>)
 8000bfc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bfe:	4a29      	ldr	r2, [pc, #164]	@ (8000ca4 <MX_GPIO_Init+0xc0>)
 8000c00:	f043 0304 	orr.w	r3, r3, #4
 8000c04:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c06:	4b27      	ldr	r3, [pc, #156]	@ (8000ca4 <MX_GPIO_Init+0xc0>)
 8000c08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c0a:	f003 0304 	and.w	r3, r3, #4
 8000c0e:	613b      	str	r3, [r7, #16]
 8000c10:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000c12:	4b24      	ldr	r3, [pc, #144]	@ (8000ca4 <MX_GPIO_Init+0xc0>)
 8000c14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c16:	4a23      	ldr	r2, [pc, #140]	@ (8000ca4 <MX_GPIO_Init+0xc0>)
 8000c18:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000c1c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c1e:	4b21      	ldr	r3, [pc, #132]	@ (8000ca4 <MX_GPIO_Init+0xc0>)
 8000c20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000c26:	60fb      	str	r3, [r7, #12]
 8000c28:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000c2a:	4b1e      	ldr	r3, [pc, #120]	@ (8000ca4 <MX_GPIO_Init+0xc0>)
 8000c2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c2e:	4a1d      	ldr	r2, [pc, #116]	@ (8000ca4 <MX_GPIO_Init+0xc0>)
 8000c30:	f043 0301 	orr.w	r3, r3, #1
 8000c34:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c36:	4b1b      	ldr	r3, [pc, #108]	@ (8000ca4 <MX_GPIO_Init+0xc0>)
 8000c38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c3a:	f003 0301 	and.w	r3, r3, #1
 8000c3e:	60bb      	str	r3, [r7, #8]
 8000c40:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000c42:	4b18      	ldr	r3, [pc, #96]	@ (8000ca4 <MX_GPIO_Init+0xc0>)
 8000c44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c46:	4a17      	ldr	r2, [pc, #92]	@ (8000ca4 <MX_GPIO_Init+0xc0>)
 8000c48:	f043 0302 	orr.w	r3, r3, #2
 8000c4c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c4e:	4b15      	ldr	r3, [pc, #84]	@ (8000ca4 <MX_GPIO_Init+0xc0>)
 8000c50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c52:	f003 0302 	and.w	r3, r3, #2
 8000c56:	607b      	str	r3, [r7, #4]
 8000c58:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	2140      	movs	r1, #64	@ 0x40
 8000c5e:	4812      	ldr	r0, [pc, #72]	@ (8000ca8 <MX_GPIO_Init+0xc4>)
 8000c60:	f000 fd66 	bl	8001730 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8000c64:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c68:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000c6a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000c6e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c70:	2300      	movs	r3, #0
 8000c72:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c74:	f107 0314 	add.w	r3, r7, #20
 8000c78:	4619      	mov	r1, r3
 8000c7a:	480c      	ldr	r0, [pc, #48]	@ (8000cac <MX_GPIO_Init+0xc8>)
 8000c7c:	f000 fbae 	bl	80013dc <HAL_GPIO_Init>

	/*Configure GPIO pin : PB6 */
	GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000c80:	2340      	movs	r3, #64	@ 0x40
 8000c82:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c84:	2301      	movs	r3, #1
 8000c86:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c90:	f107 0314 	add.w	r3, r7, #20
 8000c94:	4619      	mov	r1, r3
 8000c96:	4804      	ldr	r0, [pc, #16]	@ (8000ca8 <MX_GPIO_Init+0xc4>)
 8000c98:	f000 fba0 	bl	80013dc <HAL_GPIO_Init>
}
 8000c9c:	bf00      	nop
 8000c9e:	3728      	adds	r7, #40	@ 0x28
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	40021000 	.word	0x40021000
 8000ca8:	48000400 	.word	0x48000400
 8000cac:	48000800 	.word	0x48000800

08000cb0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000cb4:	b672      	cpsid	i
}
 8000cb6:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000cb8:	bf00      	nop
 8000cba:	e7fd      	b.n	8000cb8 <Error_Handler+0x8>

08000cbc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	b083      	sub	sp, #12
 8000cc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cc2:	4b0f      	ldr	r3, [pc, #60]	@ (8000d00 <HAL_MspInit+0x44>)
 8000cc4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000cc6:	4a0e      	ldr	r2, [pc, #56]	@ (8000d00 <HAL_MspInit+0x44>)
 8000cc8:	f043 0301 	orr.w	r3, r3, #1
 8000ccc:	6613      	str	r3, [r2, #96]	@ 0x60
 8000cce:	4b0c      	ldr	r3, [pc, #48]	@ (8000d00 <HAL_MspInit+0x44>)
 8000cd0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000cd2:	f003 0301 	and.w	r3, r3, #1
 8000cd6:	607b      	str	r3, [r7, #4]
 8000cd8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cda:	4b09      	ldr	r3, [pc, #36]	@ (8000d00 <HAL_MspInit+0x44>)
 8000cdc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000cde:	4a08      	ldr	r2, [pc, #32]	@ (8000d00 <HAL_MspInit+0x44>)
 8000ce0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ce4:	6593      	str	r3, [r2, #88]	@ 0x58
 8000ce6:	4b06      	ldr	r3, [pc, #24]	@ (8000d00 <HAL_MspInit+0x44>)
 8000ce8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000cea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cee:	603b      	str	r3, [r7, #0]
 8000cf0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cf2:	bf00      	nop
 8000cf4:	370c      	adds	r7, #12
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr
 8000cfe:	bf00      	nop
 8000d00:	40021000 	.word	0x40021000

08000d04 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b08a      	sub	sp, #40	@ 0x28
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d0c:	f107 0314 	add.w	r3, r7, #20
 8000d10:	2200      	movs	r2, #0
 8000d12:	601a      	str	r2, [r3, #0]
 8000d14:	605a      	str	r2, [r3, #4]
 8000d16:	609a      	str	r2, [r3, #8]
 8000d18:	60da      	str	r2, [r3, #12]
 8000d1a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	4a17      	ldr	r2, [pc, #92]	@ (8000d80 <HAL_SPI_MspInit+0x7c>)
 8000d22:	4293      	cmp	r3, r2
 8000d24:	d128      	bne.n	8000d78 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d26:	4b17      	ldr	r3, [pc, #92]	@ (8000d84 <HAL_SPI_MspInit+0x80>)
 8000d28:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d2a:	4a16      	ldr	r2, [pc, #88]	@ (8000d84 <HAL_SPI_MspInit+0x80>)
 8000d2c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000d30:	6613      	str	r3, [r2, #96]	@ 0x60
 8000d32:	4b14      	ldr	r3, [pc, #80]	@ (8000d84 <HAL_SPI_MspInit+0x80>)
 8000d34:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d36:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000d3a:	613b      	str	r3, [r7, #16]
 8000d3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d3e:	4b11      	ldr	r3, [pc, #68]	@ (8000d84 <HAL_SPI_MspInit+0x80>)
 8000d40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d42:	4a10      	ldr	r2, [pc, #64]	@ (8000d84 <HAL_SPI_MspInit+0x80>)
 8000d44:	f043 0301 	orr.w	r3, r3, #1
 8000d48:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d4a:	4b0e      	ldr	r3, [pc, #56]	@ (8000d84 <HAL_SPI_MspInit+0x80>)
 8000d4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d4e:	f003 0301 	and.w	r3, r3, #1
 8000d52:	60fb      	str	r3, [r7, #12]
 8000d54:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000d56:	23e0      	movs	r3, #224	@ 0xe0
 8000d58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d5a:	2302      	movs	r3, #2
 8000d5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d62:	2303      	movs	r3, #3
 8000d64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d66:	2305      	movs	r3, #5
 8000d68:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d6a:	f107 0314 	add.w	r3, r7, #20
 8000d6e:	4619      	mov	r1, r3
 8000d70:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d74:	f000 fb32 	bl	80013dc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000d78:	bf00      	nop
 8000d7a:	3728      	adds	r7, #40	@ 0x28
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	40013000 	.word	0x40013000
 8000d84:	40021000 	.word	0x40021000

08000d88 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b084      	sub	sp, #16
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	4a0d      	ldr	r2, [pc, #52]	@ (8000dcc <HAL_TIM_Base_MspInit+0x44>)
 8000d96:	4293      	cmp	r3, r2
 8000d98:	d113      	bne.n	8000dc2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000d9a:	4b0d      	ldr	r3, [pc, #52]	@ (8000dd0 <HAL_TIM_Base_MspInit+0x48>)
 8000d9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d9e:	4a0c      	ldr	r2, [pc, #48]	@ (8000dd0 <HAL_TIM_Base_MspInit+0x48>)
 8000da0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000da4:	6613      	str	r3, [r2, #96]	@ 0x60
 8000da6:	4b0a      	ldr	r3, [pc, #40]	@ (8000dd0 <HAL_TIM_Base_MspInit+0x48>)
 8000da8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000daa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000dae:	60fb      	str	r3, [r7, #12]
 8000db0:	68fb      	ldr	r3, [r7, #12]
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8000db2:	2200      	movs	r2, #0
 8000db4:	2100      	movs	r1, #0
 8000db6:	2019      	movs	r0, #25
 8000db8:	f000 fad9 	bl	800136e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000dbc:	2019      	movs	r0, #25
 8000dbe:	f000 faf2 	bl	80013a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8000dc2:	bf00      	nop
 8000dc4:	3710      	adds	r7, #16
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	40014400 	.word	0x40014400
 8000dd0:	40021000 	.word	0x40021000

08000dd4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b0ac      	sub	sp, #176	@ 0xb0
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ddc:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000de0:	2200      	movs	r2, #0
 8000de2:	601a      	str	r2, [r3, #0]
 8000de4:	605a      	str	r2, [r3, #4]
 8000de6:	609a      	str	r2, [r3, #8]
 8000de8:	60da      	str	r2, [r3, #12]
 8000dea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000dec:	f107 0314 	add.w	r3, r7, #20
 8000df0:	2288      	movs	r2, #136	@ 0x88
 8000df2:	2100      	movs	r1, #0
 8000df4:	4618      	mov	r0, r3
 8000df6:	f005 fe57 	bl	8006aa8 <memset>
  if(huart->Instance==USART2)
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	4a21      	ldr	r2, [pc, #132]	@ (8000e84 <HAL_UART_MspInit+0xb0>)
 8000e00:	4293      	cmp	r3, r2
 8000e02:	d13b      	bne.n	8000e7c <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000e04:	2302      	movs	r3, #2
 8000e06:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e0c:	f107 0314 	add.w	r3, r7, #20
 8000e10:	4618      	mov	r0, r3
 8000e12:	f001 fb09 	bl	8002428 <HAL_RCCEx_PeriphCLKConfig>
 8000e16:	4603      	mov	r3, r0
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d001      	beq.n	8000e20 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000e1c:	f7ff ff48 	bl	8000cb0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e20:	4b19      	ldr	r3, [pc, #100]	@ (8000e88 <HAL_UART_MspInit+0xb4>)
 8000e22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e24:	4a18      	ldr	r2, [pc, #96]	@ (8000e88 <HAL_UART_MspInit+0xb4>)
 8000e26:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e2a:	6593      	str	r3, [r2, #88]	@ 0x58
 8000e2c:	4b16      	ldr	r3, [pc, #88]	@ (8000e88 <HAL_UART_MspInit+0xb4>)
 8000e2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e30:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e34:	613b      	str	r3, [r7, #16]
 8000e36:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e38:	4b13      	ldr	r3, [pc, #76]	@ (8000e88 <HAL_UART_MspInit+0xb4>)
 8000e3a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e3c:	4a12      	ldr	r2, [pc, #72]	@ (8000e88 <HAL_UART_MspInit+0xb4>)
 8000e3e:	f043 0301 	orr.w	r3, r3, #1
 8000e42:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e44:	4b10      	ldr	r3, [pc, #64]	@ (8000e88 <HAL_UART_MspInit+0xb4>)
 8000e46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e48:	f003 0301 	and.w	r3, r3, #1
 8000e4c:	60fb      	str	r3, [r7, #12]
 8000e4e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000e50:	230c      	movs	r3, #12
 8000e52:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e56:	2302      	movs	r3, #2
 8000e58:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e62:	2303      	movs	r3, #3
 8000e64:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e68:	2307      	movs	r3, #7
 8000e6a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e6e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000e72:	4619      	mov	r1, r3
 8000e74:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e78:	f000 fab0 	bl	80013dc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000e7c:	bf00      	nop
 8000e7e:	37b0      	adds	r7, #176	@ 0xb0
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	40004400 	.word	0x40004400
 8000e88:	40021000 	.word	0x40021000

08000e8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e90:	bf00      	nop
 8000e92:	e7fd      	b.n	8000e90 <NMI_Handler+0x4>

08000e94 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e98:	bf00      	nop
 8000e9a:	e7fd      	b.n	8000e98 <HardFault_Handler+0x4>

08000e9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ea0:	bf00      	nop
 8000ea2:	e7fd      	b.n	8000ea0 <MemManage_Handler+0x4>

08000ea4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ea8:	bf00      	nop
 8000eaa:	e7fd      	b.n	8000ea8 <BusFault_Handler+0x4>

08000eac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000eb0:	bf00      	nop
 8000eb2:	e7fd      	b.n	8000eb0 <UsageFault_Handler+0x4>

08000eb4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000eb8:	bf00      	nop
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr

08000ec2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ec2:	b480      	push	{r7}
 8000ec4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ec6:	bf00      	nop
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ece:	4770      	bx	lr

08000ed0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ed4:	bf00      	nop
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr

08000ede <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ede:	b580      	push	{r7, lr}
 8000ee0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ee2:	f000 f949 	bl	8001178 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ee6:	bf00      	nop
 8000ee8:	bd80      	pop	{r7, pc}
	...

08000eec <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8000ef0:	4802      	ldr	r0, [pc, #8]	@ (8000efc <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000ef2:	f002 ff4b 	bl	8003d8c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000ef6:	bf00      	nop
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	200001a8 	.word	0x200001a8

08000f00 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b086      	sub	sp, #24
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	60f8      	str	r0, [r7, #12]
 8000f08:	60b9      	str	r1, [r7, #8]
 8000f0a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	617b      	str	r3, [r7, #20]
 8000f10:	e00a      	b.n	8000f28 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000f12:	f3af 8000 	nop.w
 8000f16:	4601      	mov	r1, r0
 8000f18:	68bb      	ldr	r3, [r7, #8]
 8000f1a:	1c5a      	adds	r2, r3, #1
 8000f1c:	60ba      	str	r2, [r7, #8]
 8000f1e:	b2ca      	uxtb	r2, r1
 8000f20:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f22:	697b      	ldr	r3, [r7, #20]
 8000f24:	3301      	adds	r3, #1
 8000f26:	617b      	str	r3, [r7, #20]
 8000f28:	697a      	ldr	r2, [r7, #20]
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	429a      	cmp	r2, r3
 8000f2e:	dbf0      	blt.n	8000f12 <_read+0x12>
  }

  return len;
 8000f30:	687b      	ldr	r3, [r7, #4]
}
 8000f32:	4618      	mov	r0, r3
 8000f34:	3718      	adds	r7, #24
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}

08000f3a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000f3a:	b580      	push	{r7, lr}
 8000f3c:	b086      	sub	sp, #24
 8000f3e:	af00      	add	r7, sp, #0
 8000f40:	60f8      	str	r0, [r7, #12]
 8000f42:	60b9      	str	r1, [r7, #8]
 8000f44:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f46:	2300      	movs	r3, #0
 8000f48:	617b      	str	r3, [r7, #20]
 8000f4a:	e009      	b.n	8000f60 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000f4c:	68bb      	ldr	r3, [r7, #8]
 8000f4e:	1c5a      	adds	r2, r3, #1
 8000f50:	60ba      	str	r2, [r7, #8]
 8000f52:	781b      	ldrb	r3, [r3, #0]
 8000f54:	4618      	mov	r0, r3
 8000f56:	f7ff fb03 	bl	8000560 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f5a:	697b      	ldr	r3, [r7, #20]
 8000f5c:	3301      	adds	r3, #1
 8000f5e:	617b      	str	r3, [r7, #20]
 8000f60:	697a      	ldr	r2, [r7, #20]
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	429a      	cmp	r2, r3
 8000f66:	dbf1      	blt.n	8000f4c <_write+0x12>
  }
  return len;
 8000f68:	687b      	ldr	r3, [r7, #4]
}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	3718      	adds	r7, #24
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}

08000f72 <_close>:

int _close(int file)
{
 8000f72:	b480      	push	{r7}
 8000f74:	b083      	sub	sp, #12
 8000f76:	af00      	add	r7, sp, #0
 8000f78:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000f7a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000f7e:	4618      	mov	r0, r3
 8000f80:	370c      	adds	r7, #12
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr

08000f8a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f8a:	b480      	push	{r7}
 8000f8c:	b083      	sub	sp, #12
 8000f8e:	af00      	add	r7, sp, #0
 8000f90:	6078      	str	r0, [r7, #4]
 8000f92:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000f9a:	605a      	str	r2, [r3, #4]
  return 0;
 8000f9c:	2300      	movs	r3, #0
}
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	370c      	adds	r7, #12
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr

08000faa <_isatty>:

int _isatty(int file)
{
 8000faa:	b480      	push	{r7}
 8000fac:	b083      	sub	sp, #12
 8000fae:	af00      	add	r7, sp, #0
 8000fb0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000fb2:	2301      	movs	r3, #1
}
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	370c      	adds	r7, #12
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbe:	4770      	bx	lr

08000fc0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b085      	sub	sp, #20
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	60f8      	str	r0, [r7, #12]
 8000fc8:	60b9      	str	r1, [r7, #8]
 8000fca:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000fcc:	2300      	movs	r3, #0
}
 8000fce:	4618      	mov	r0, r3
 8000fd0:	3714      	adds	r7, #20
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr
	...

08000fdc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b086      	sub	sp, #24
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fe4:	4a14      	ldr	r2, [pc, #80]	@ (8001038 <_sbrk+0x5c>)
 8000fe6:	4b15      	ldr	r3, [pc, #84]	@ (800103c <_sbrk+0x60>)
 8000fe8:	1ad3      	subs	r3, r2, r3
 8000fea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fec:	697b      	ldr	r3, [r7, #20]
 8000fee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ff0:	4b13      	ldr	r3, [pc, #76]	@ (8001040 <_sbrk+0x64>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d102      	bne.n	8000ffe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ff8:	4b11      	ldr	r3, [pc, #68]	@ (8001040 <_sbrk+0x64>)
 8000ffa:	4a12      	ldr	r2, [pc, #72]	@ (8001044 <_sbrk+0x68>)
 8000ffc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ffe:	4b10      	ldr	r3, [pc, #64]	@ (8001040 <_sbrk+0x64>)
 8001000:	681a      	ldr	r2, [r3, #0]
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	4413      	add	r3, r2
 8001006:	693a      	ldr	r2, [r7, #16]
 8001008:	429a      	cmp	r2, r3
 800100a:	d207      	bcs.n	800101c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800100c:	f005 fd9a 	bl	8006b44 <__errno>
 8001010:	4603      	mov	r3, r0
 8001012:	220c      	movs	r2, #12
 8001014:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001016:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800101a:	e009      	b.n	8001030 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800101c:	4b08      	ldr	r3, [pc, #32]	@ (8001040 <_sbrk+0x64>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001022:	4b07      	ldr	r3, [pc, #28]	@ (8001040 <_sbrk+0x64>)
 8001024:	681a      	ldr	r2, [r3, #0]
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	4413      	add	r3, r2
 800102a:	4a05      	ldr	r2, [pc, #20]	@ (8001040 <_sbrk+0x64>)
 800102c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800102e:	68fb      	ldr	r3, [r7, #12]
}
 8001030:	4618      	mov	r0, r3
 8001032:	3718      	adds	r7, #24
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	20018000 	.word	0x20018000
 800103c:	00000400 	.word	0x00000400
 8001040:	200009f4 	.word	0x200009f4
 8001044:	20000b70 	.word	0x20000b70

08001048 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800104c:	4b06      	ldr	r3, [pc, #24]	@ (8001068 <SystemInit+0x20>)
 800104e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001052:	4a05      	ldr	r2, [pc, #20]	@ (8001068 <SystemInit+0x20>)
 8001054:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001058:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 800105c:	bf00      	nop
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop
 8001068:	e000ed00 	.word	0xe000ed00

0800106c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800106c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80010a4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001070:	f7ff ffea 	bl	8001048 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001074:	480c      	ldr	r0, [pc, #48]	@ (80010a8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001076:	490d      	ldr	r1, [pc, #52]	@ (80010ac <LoopForever+0xa>)
  ldr r2, =_sidata
 8001078:	4a0d      	ldr	r2, [pc, #52]	@ (80010b0 <LoopForever+0xe>)
  movs r3, #0
 800107a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800107c:	e002      	b.n	8001084 <LoopCopyDataInit>

0800107e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800107e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001080:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001082:	3304      	adds	r3, #4

08001084 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001084:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001086:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001088:	d3f9      	bcc.n	800107e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800108a:	4a0a      	ldr	r2, [pc, #40]	@ (80010b4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800108c:	4c0a      	ldr	r4, [pc, #40]	@ (80010b8 <LoopForever+0x16>)
  movs r3, #0
 800108e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001090:	e001      	b.n	8001096 <LoopFillZerobss>

08001092 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001092:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001094:	3204      	adds	r2, #4

08001096 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001096:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001098:	d3fb      	bcc.n	8001092 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800109a:	f005 fd59 	bl	8006b50 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800109e:	f7ff fc55 	bl	800094c <main>

080010a2 <LoopForever>:

LoopForever:
    b LoopForever
 80010a2:	e7fe      	b.n	80010a2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80010a4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80010a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010ac:	200000a0 	.word	0x200000a0
  ldr r2, =_sidata
 80010b0:	080078d8 	.word	0x080078d8
  ldr r2, =_sbss
 80010b4:	200000a0 	.word	0x200000a0
  ldr r4, =_ebss
 80010b8:	20000b70 	.word	0x20000b70

080010bc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80010bc:	e7fe      	b.n	80010bc <ADC1_2_IRQHandler>
	...

080010c0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80010c6:	2300      	movs	r3, #0
 80010c8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010ca:	4b0c      	ldr	r3, [pc, #48]	@ (80010fc <HAL_Init+0x3c>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	4a0b      	ldr	r2, [pc, #44]	@ (80010fc <HAL_Init+0x3c>)
 80010d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80010d4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010d6:	2003      	movs	r0, #3
 80010d8:	f000 f93e 	bl	8001358 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80010dc:	2000      	movs	r0, #0
 80010de:	f000 f80f 	bl	8001100 <HAL_InitTick>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d002      	beq.n	80010ee <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80010e8:	2301      	movs	r3, #1
 80010ea:	71fb      	strb	r3, [r7, #7]
 80010ec:	e001      	b.n	80010f2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80010ee:	f7ff fde5 	bl	8000cbc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80010f2:	79fb      	ldrb	r3, [r7, #7]
}
 80010f4:	4618      	mov	r0, r3
 80010f6:	3708      	adds	r7, #8
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	40022000 	.word	0x40022000

08001100 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b084      	sub	sp, #16
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001108:	2300      	movs	r3, #0
 800110a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800110c:	4b17      	ldr	r3, [pc, #92]	@ (800116c <HAL_InitTick+0x6c>)
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	2b00      	cmp	r3, #0
 8001112:	d023      	beq.n	800115c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001114:	4b16      	ldr	r3, [pc, #88]	@ (8001170 <HAL_InitTick+0x70>)
 8001116:	681a      	ldr	r2, [r3, #0]
 8001118:	4b14      	ldr	r3, [pc, #80]	@ (800116c <HAL_InitTick+0x6c>)
 800111a:	781b      	ldrb	r3, [r3, #0]
 800111c:	4619      	mov	r1, r3
 800111e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001122:	fbb3 f3f1 	udiv	r3, r3, r1
 8001126:	fbb2 f3f3 	udiv	r3, r2, r3
 800112a:	4618      	mov	r0, r3
 800112c:	f000 f949 	bl	80013c2 <HAL_SYSTICK_Config>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d10f      	bne.n	8001156 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	2b0f      	cmp	r3, #15
 800113a:	d809      	bhi.n	8001150 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800113c:	2200      	movs	r2, #0
 800113e:	6879      	ldr	r1, [r7, #4]
 8001140:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001144:	f000 f913 	bl	800136e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001148:	4a0a      	ldr	r2, [pc, #40]	@ (8001174 <HAL_InitTick+0x74>)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	6013      	str	r3, [r2, #0]
 800114e:	e007      	b.n	8001160 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001150:	2301      	movs	r3, #1
 8001152:	73fb      	strb	r3, [r7, #15]
 8001154:	e004      	b.n	8001160 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001156:	2301      	movs	r3, #1
 8001158:	73fb      	strb	r3, [r7, #15]
 800115a:	e001      	b.n	8001160 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800115c:	2301      	movs	r3, #1
 800115e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001160:	7bfb      	ldrb	r3, [r7, #15]
}
 8001162:	4618      	mov	r0, r3
 8001164:	3710      	adds	r7, #16
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	20000014 	.word	0x20000014
 8001170:	2000000c 	.word	0x2000000c
 8001174:	20000010 	.word	0x20000010

08001178 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001178:	b480      	push	{r7}
 800117a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800117c:	4b06      	ldr	r3, [pc, #24]	@ (8001198 <HAL_IncTick+0x20>)
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	461a      	mov	r2, r3
 8001182:	4b06      	ldr	r3, [pc, #24]	@ (800119c <HAL_IncTick+0x24>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	4413      	add	r3, r2
 8001188:	4a04      	ldr	r2, [pc, #16]	@ (800119c <HAL_IncTick+0x24>)
 800118a:	6013      	str	r3, [r2, #0]
}
 800118c:	bf00      	nop
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr
 8001196:	bf00      	nop
 8001198:	20000014 	.word	0x20000014
 800119c:	200009f8 	.word	0x200009f8

080011a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0
  return uwTick;
 80011a4:	4b03      	ldr	r3, [pc, #12]	@ (80011b4 <HAL_GetTick+0x14>)
 80011a6:	681b      	ldr	r3, [r3, #0]
}
 80011a8:	4618      	mov	r0, r3
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr
 80011b2:	bf00      	nop
 80011b4:	200009f8 	.word	0x200009f8

080011b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011b8:	b480      	push	{r7}
 80011ba:	b085      	sub	sp, #20
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	f003 0307 	and.w	r3, r3, #7
 80011c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011c8:	4b0c      	ldr	r3, [pc, #48]	@ (80011fc <__NVIC_SetPriorityGrouping+0x44>)
 80011ca:	68db      	ldr	r3, [r3, #12]
 80011cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011ce:	68ba      	ldr	r2, [r7, #8]
 80011d0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80011d4:	4013      	ands	r3, r2
 80011d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011dc:	68bb      	ldr	r3, [r7, #8]
 80011de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011e0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80011e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80011e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011ea:	4a04      	ldr	r2, [pc, #16]	@ (80011fc <__NVIC_SetPriorityGrouping+0x44>)
 80011ec:	68bb      	ldr	r3, [r7, #8]
 80011ee:	60d3      	str	r3, [r2, #12]
}
 80011f0:	bf00      	nop
 80011f2:	3714      	adds	r7, #20
 80011f4:	46bd      	mov	sp, r7
 80011f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fa:	4770      	bx	lr
 80011fc:	e000ed00 	.word	0xe000ed00

08001200 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001204:	4b04      	ldr	r3, [pc, #16]	@ (8001218 <__NVIC_GetPriorityGrouping+0x18>)
 8001206:	68db      	ldr	r3, [r3, #12]
 8001208:	0a1b      	lsrs	r3, r3, #8
 800120a:	f003 0307 	and.w	r3, r3, #7
}
 800120e:	4618      	mov	r0, r3
 8001210:	46bd      	mov	sp, r7
 8001212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001216:	4770      	bx	lr
 8001218:	e000ed00 	.word	0xe000ed00

0800121c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800121c:	b480      	push	{r7}
 800121e:	b083      	sub	sp, #12
 8001220:	af00      	add	r7, sp, #0
 8001222:	4603      	mov	r3, r0
 8001224:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001226:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800122a:	2b00      	cmp	r3, #0
 800122c:	db0b      	blt.n	8001246 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800122e:	79fb      	ldrb	r3, [r7, #7]
 8001230:	f003 021f 	and.w	r2, r3, #31
 8001234:	4907      	ldr	r1, [pc, #28]	@ (8001254 <__NVIC_EnableIRQ+0x38>)
 8001236:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800123a:	095b      	lsrs	r3, r3, #5
 800123c:	2001      	movs	r0, #1
 800123e:	fa00 f202 	lsl.w	r2, r0, r2
 8001242:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001246:	bf00      	nop
 8001248:	370c      	adds	r7, #12
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr
 8001252:	bf00      	nop
 8001254:	e000e100 	.word	0xe000e100

08001258 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001258:	b480      	push	{r7}
 800125a:	b083      	sub	sp, #12
 800125c:	af00      	add	r7, sp, #0
 800125e:	4603      	mov	r3, r0
 8001260:	6039      	str	r1, [r7, #0]
 8001262:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001264:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001268:	2b00      	cmp	r3, #0
 800126a:	db0a      	blt.n	8001282 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	b2da      	uxtb	r2, r3
 8001270:	490c      	ldr	r1, [pc, #48]	@ (80012a4 <__NVIC_SetPriority+0x4c>)
 8001272:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001276:	0112      	lsls	r2, r2, #4
 8001278:	b2d2      	uxtb	r2, r2
 800127a:	440b      	add	r3, r1
 800127c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001280:	e00a      	b.n	8001298 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	b2da      	uxtb	r2, r3
 8001286:	4908      	ldr	r1, [pc, #32]	@ (80012a8 <__NVIC_SetPriority+0x50>)
 8001288:	79fb      	ldrb	r3, [r7, #7]
 800128a:	f003 030f 	and.w	r3, r3, #15
 800128e:	3b04      	subs	r3, #4
 8001290:	0112      	lsls	r2, r2, #4
 8001292:	b2d2      	uxtb	r2, r2
 8001294:	440b      	add	r3, r1
 8001296:	761a      	strb	r2, [r3, #24]
}
 8001298:	bf00      	nop
 800129a:	370c      	adds	r7, #12
 800129c:	46bd      	mov	sp, r7
 800129e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a2:	4770      	bx	lr
 80012a4:	e000e100 	.word	0xe000e100
 80012a8:	e000ed00 	.word	0xe000ed00

080012ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012ac:	b480      	push	{r7}
 80012ae:	b089      	sub	sp, #36	@ 0x24
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	60f8      	str	r0, [r7, #12]
 80012b4:	60b9      	str	r1, [r7, #8]
 80012b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	f003 0307 	and.w	r3, r3, #7
 80012be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012c0:	69fb      	ldr	r3, [r7, #28]
 80012c2:	f1c3 0307 	rsb	r3, r3, #7
 80012c6:	2b04      	cmp	r3, #4
 80012c8:	bf28      	it	cs
 80012ca:	2304      	movcs	r3, #4
 80012cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012ce:	69fb      	ldr	r3, [r7, #28]
 80012d0:	3304      	adds	r3, #4
 80012d2:	2b06      	cmp	r3, #6
 80012d4:	d902      	bls.n	80012dc <NVIC_EncodePriority+0x30>
 80012d6:	69fb      	ldr	r3, [r7, #28]
 80012d8:	3b03      	subs	r3, #3
 80012da:	e000      	b.n	80012de <NVIC_EncodePriority+0x32>
 80012dc:	2300      	movs	r3, #0
 80012de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012e0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80012e4:	69bb      	ldr	r3, [r7, #24]
 80012e6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ea:	43da      	mvns	r2, r3
 80012ec:	68bb      	ldr	r3, [r7, #8]
 80012ee:	401a      	ands	r2, r3
 80012f0:	697b      	ldr	r3, [r7, #20]
 80012f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012f4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80012f8:	697b      	ldr	r3, [r7, #20]
 80012fa:	fa01 f303 	lsl.w	r3, r1, r3
 80012fe:	43d9      	mvns	r1, r3
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001304:	4313      	orrs	r3, r2
         );
}
 8001306:	4618      	mov	r0, r3
 8001308:	3724      	adds	r7, #36	@ 0x24
 800130a:	46bd      	mov	sp, r7
 800130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001310:	4770      	bx	lr
	...

08001314 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b082      	sub	sp, #8
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	3b01      	subs	r3, #1
 8001320:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001324:	d301      	bcc.n	800132a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001326:	2301      	movs	r3, #1
 8001328:	e00f      	b.n	800134a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800132a:	4a0a      	ldr	r2, [pc, #40]	@ (8001354 <SysTick_Config+0x40>)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	3b01      	subs	r3, #1
 8001330:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001332:	210f      	movs	r1, #15
 8001334:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001338:	f7ff ff8e 	bl	8001258 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800133c:	4b05      	ldr	r3, [pc, #20]	@ (8001354 <SysTick_Config+0x40>)
 800133e:	2200      	movs	r2, #0
 8001340:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001342:	4b04      	ldr	r3, [pc, #16]	@ (8001354 <SysTick_Config+0x40>)
 8001344:	2207      	movs	r2, #7
 8001346:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001348:	2300      	movs	r3, #0
}
 800134a:	4618      	mov	r0, r3
 800134c:	3708      	adds	r7, #8
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	e000e010 	.word	0xe000e010

08001358 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b082      	sub	sp, #8
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001360:	6878      	ldr	r0, [r7, #4]
 8001362:	f7ff ff29 	bl	80011b8 <__NVIC_SetPriorityGrouping>
}
 8001366:	bf00      	nop
 8001368:	3708      	adds	r7, #8
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}

0800136e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800136e:	b580      	push	{r7, lr}
 8001370:	b086      	sub	sp, #24
 8001372:	af00      	add	r7, sp, #0
 8001374:	4603      	mov	r3, r0
 8001376:	60b9      	str	r1, [r7, #8]
 8001378:	607a      	str	r2, [r7, #4]
 800137a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800137c:	2300      	movs	r3, #0
 800137e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001380:	f7ff ff3e 	bl	8001200 <__NVIC_GetPriorityGrouping>
 8001384:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001386:	687a      	ldr	r2, [r7, #4]
 8001388:	68b9      	ldr	r1, [r7, #8]
 800138a:	6978      	ldr	r0, [r7, #20]
 800138c:	f7ff ff8e 	bl	80012ac <NVIC_EncodePriority>
 8001390:	4602      	mov	r2, r0
 8001392:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001396:	4611      	mov	r1, r2
 8001398:	4618      	mov	r0, r3
 800139a:	f7ff ff5d 	bl	8001258 <__NVIC_SetPriority>
}
 800139e:	bf00      	nop
 80013a0:	3718      	adds	r7, #24
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}

080013a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013a6:	b580      	push	{r7, lr}
 80013a8:	b082      	sub	sp, #8
 80013aa:	af00      	add	r7, sp, #0
 80013ac:	4603      	mov	r3, r0
 80013ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013b4:	4618      	mov	r0, r3
 80013b6:	f7ff ff31 	bl	800121c <__NVIC_EnableIRQ>
}
 80013ba:	bf00      	nop
 80013bc:	3708      	adds	r7, #8
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}

080013c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013c2:	b580      	push	{r7, lr}
 80013c4:	b082      	sub	sp, #8
 80013c6:	af00      	add	r7, sp, #0
 80013c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013ca:	6878      	ldr	r0, [r7, #4]
 80013cc:	f7ff ffa2 	bl	8001314 <SysTick_Config>
 80013d0:	4603      	mov	r3, r0
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	3708      	adds	r7, #8
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
	...

080013dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013dc:	b480      	push	{r7}
 80013de:	b087      	sub	sp, #28
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
 80013e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80013e6:	2300      	movs	r3, #0
 80013e8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013ea:	e17f      	b.n	80016ec <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	681a      	ldr	r2, [r3, #0]
 80013f0:	2101      	movs	r1, #1
 80013f2:	697b      	ldr	r3, [r7, #20]
 80013f4:	fa01 f303 	lsl.w	r3, r1, r3
 80013f8:	4013      	ands	r3, r2
 80013fa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	f000 8171 	beq.w	80016e6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	f003 0303 	and.w	r3, r3, #3
 800140c:	2b01      	cmp	r3, #1
 800140e:	d005      	beq.n	800141c <HAL_GPIO_Init+0x40>
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	f003 0303 	and.w	r3, r3, #3
 8001418:	2b02      	cmp	r3, #2
 800141a:	d130      	bne.n	800147e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	689b      	ldr	r3, [r3, #8]
 8001420:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001422:	697b      	ldr	r3, [r7, #20]
 8001424:	005b      	lsls	r3, r3, #1
 8001426:	2203      	movs	r2, #3
 8001428:	fa02 f303 	lsl.w	r3, r2, r3
 800142c:	43db      	mvns	r3, r3
 800142e:	693a      	ldr	r2, [r7, #16]
 8001430:	4013      	ands	r3, r2
 8001432:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	68da      	ldr	r2, [r3, #12]
 8001438:	697b      	ldr	r3, [r7, #20]
 800143a:	005b      	lsls	r3, r3, #1
 800143c:	fa02 f303 	lsl.w	r3, r2, r3
 8001440:	693a      	ldr	r2, [r7, #16]
 8001442:	4313      	orrs	r3, r2
 8001444:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	693a      	ldr	r2, [r7, #16]
 800144a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001452:	2201      	movs	r2, #1
 8001454:	697b      	ldr	r3, [r7, #20]
 8001456:	fa02 f303 	lsl.w	r3, r2, r3
 800145a:	43db      	mvns	r3, r3
 800145c:	693a      	ldr	r2, [r7, #16]
 800145e:	4013      	ands	r3, r2
 8001460:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	091b      	lsrs	r3, r3, #4
 8001468:	f003 0201 	and.w	r2, r3, #1
 800146c:	697b      	ldr	r3, [r7, #20]
 800146e:	fa02 f303 	lsl.w	r3, r2, r3
 8001472:	693a      	ldr	r2, [r7, #16]
 8001474:	4313      	orrs	r3, r2
 8001476:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	693a      	ldr	r2, [r7, #16]
 800147c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	685b      	ldr	r3, [r3, #4]
 8001482:	f003 0303 	and.w	r3, r3, #3
 8001486:	2b03      	cmp	r3, #3
 8001488:	d118      	bne.n	80014bc <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800148e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001490:	2201      	movs	r2, #1
 8001492:	697b      	ldr	r3, [r7, #20]
 8001494:	fa02 f303 	lsl.w	r3, r2, r3
 8001498:	43db      	mvns	r3, r3
 800149a:	693a      	ldr	r2, [r7, #16]
 800149c:	4013      	ands	r3, r2
 800149e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	08db      	lsrs	r3, r3, #3
 80014a6:	f003 0201 	and.w	r2, r3, #1
 80014aa:	697b      	ldr	r3, [r7, #20]
 80014ac:	fa02 f303 	lsl.w	r3, r2, r3
 80014b0:	693a      	ldr	r2, [r7, #16]
 80014b2:	4313      	orrs	r3, r2
 80014b4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	693a      	ldr	r2, [r7, #16]
 80014ba:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	f003 0303 	and.w	r3, r3, #3
 80014c4:	2b03      	cmp	r3, #3
 80014c6:	d017      	beq.n	80014f8 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	68db      	ldr	r3, [r3, #12]
 80014cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80014ce:	697b      	ldr	r3, [r7, #20]
 80014d0:	005b      	lsls	r3, r3, #1
 80014d2:	2203      	movs	r2, #3
 80014d4:	fa02 f303 	lsl.w	r3, r2, r3
 80014d8:	43db      	mvns	r3, r3
 80014da:	693a      	ldr	r2, [r7, #16]
 80014dc:	4013      	ands	r3, r2
 80014de:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	689a      	ldr	r2, [r3, #8]
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	005b      	lsls	r3, r3, #1
 80014e8:	fa02 f303 	lsl.w	r3, r2, r3
 80014ec:	693a      	ldr	r2, [r7, #16]
 80014ee:	4313      	orrs	r3, r2
 80014f0:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	693a      	ldr	r2, [r7, #16]
 80014f6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	f003 0303 	and.w	r3, r3, #3
 8001500:	2b02      	cmp	r3, #2
 8001502:	d123      	bne.n	800154c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001504:	697b      	ldr	r3, [r7, #20]
 8001506:	08da      	lsrs	r2, r3, #3
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	3208      	adds	r2, #8
 800150c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001510:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001512:	697b      	ldr	r3, [r7, #20]
 8001514:	f003 0307 	and.w	r3, r3, #7
 8001518:	009b      	lsls	r3, r3, #2
 800151a:	220f      	movs	r2, #15
 800151c:	fa02 f303 	lsl.w	r3, r2, r3
 8001520:	43db      	mvns	r3, r3
 8001522:	693a      	ldr	r2, [r7, #16]
 8001524:	4013      	ands	r3, r2
 8001526:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	691a      	ldr	r2, [r3, #16]
 800152c:	697b      	ldr	r3, [r7, #20]
 800152e:	f003 0307 	and.w	r3, r3, #7
 8001532:	009b      	lsls	r3, r3, #2
 8001534:	fa02 f303 	lsl.w	r3, r2, r3
 8001538:	693a      	ldr	r2, [r7, #16]
 800153a:	4313      	orrs	r3, r2
 800153c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800153e:	697b      	ldr	r3, [r7, #20]
 8001540:	08da      	lsrs	r2, r3, #3
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	3208      	adds	r2, #8
 8001546:	6939      	ldr	r1, [r7, #16]
 8001548:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001552:	697b      	ldr	r3, [r7, #20]
 8001554:	005b      	lsls	r3, r3, #1
 8001556:	2203      	movs	r2, #3
 8001558:	fa02 f303 	lsl.w	r3, r2, r3
 800155c:	43db      	mvns	r3, r3
 800155e:	693a      	ldr	r2, [r7, #16]
 8001560:	4013      	ands	r3, r2
 8001562:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	f003 0203 	and.w	r2, r3, #3
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	005b      	lsls	r3, r3, #1
 8001570:	fa02 f303 	lsl.w	r3, r2, r3
 8001574:	693a      	ldr	r2, [r7, #16]
 8001576:	4313      	orrs	r3, r2
 8001578:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	693a      	ldr	r2, [r7, #16]
 800157e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001588:	2b00      	cmp	r3, #0
 800158a:	f000 80ac 	beq.w	80016e6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800158e:	4b5f      	ldr	r3, [pc, #380]	@ (800170c <HAL_GPIO_Init+0x330>)
 8001590:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001592:	4a5e      	ldr	r2, [pc, #376]	@ (800170c <HAL_GPIO_Init+0x330>)
 8001594:	f043 0301 	orr.w	r3, r3, #1
 8001598:	6613      	str	r3, [r2, #96]	@ 0x60
 800159a:	4b5c      	ldr	r3, [pc, #368]	@ (800170c <HAL_GPIO_Init+0x330>)
 800159c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800159e:	f003 0301 	and.w	r3, r3, #1
 80015a2:	60bb      	str	r3, [r7, #8]
 80015a4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80015a6:	4a5a      	ldr	r2, [pc, #360]	@ (8001710 <HAL_GPIO_Init+0x334>)
 80015a8:	697b      	ldr	r3, [r7, #20]
 80015aa:	089b      	lsrs	r3, r3, #2
 80015ac:	3302      	adds	r3, #2
 80015ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015b2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80015b4:	697b      	ldr	r3, [r7, #20]
 80015b6:	f003 0303 	and.w	r3, r3, #3
 80015ba:	009b      	lsls	r3, r3, #2
 80015bc:	220f      	movs	r2, #15
 80015be:	fa02 f303 	lsl.w	r3, r2, r3
 80015c2:	43db      	mvns	r3, r3
 80015c4:	693a      	ldr	r2, [r7, #16]
 80015c6:	4013      	ands	r3, r2
 80015c8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80015d0:	d025      	beq.n	800161e <HAL_GPIO_Init+0x242>
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	4a4f      	ldr	r2, [pc, #316]	@ (8001714 <HAL_GPIO_Init+0x338>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d01f      	beq.n	800161a <HAL_GPIO_Init+0x23e>
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	4a4e      	ldr	r2, [pc, #312]	@ (8001718 <HAL_GPIO_Init+0x33c>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d019      	beq.n	8001616 <HAL_GPIO_Init+0x23a>
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	4a4d      	ldr	r2, [pc, #308]	@ (800171c <HAL_GPIO_Init+0x340>)
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d013      	beq.n	8001612 <HAL_GPIO_Init+0x236>
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	4a4c      	ldr	r2, [pc, #304]	@ (8001720 <HAL_GPIO_Init+0x344>)
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d00d      	beq.n	800160e <HAL_GPIO_Init+0x232>
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	4a4b      	ldr	r2, [pc, #300]	@ (8001724 <HAL_GPIO_Init+0x348>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d007      	beq.n	800160a <HAL_GPIO_Init+0x22e>
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	4a4a      	ldr	r2, [pc, #296]	@ (8001728 <HAL_GPIO_Init+0x34c>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d101      	bne.n	8001606 <HAL_GPIO_Init+0x22a>
 8001602:	2306      	movs	r3, #6
 8001604:	e00c      	b.n	8001620 <HAL_GPIO_Init+0x244>
 8001606:	2307      	movs	r3, #7
 8001608:	e00a      	b.n	8001620 <HAL_GPIO_Init+0x244>
 800160a:	2305      	movs	r3, #5
 800160c:	e008      	b.n	8001620 <HAL_GPIO_Init+0x244>
 800160e:	2304      	movs	r3, #4
 8001610:	e006      	b.n	8001620 <HAL_GPIO_Init+0x244>
 8001612:	2303      	movs	r3, #3
 8001614:	e004      	b.n	8001620 <HAL_GPIO_Init+0x244>
 8001616:	2302      	movs	r3, #2
 8001618:	e002      	b.n	8001620 <HAL_GPIO_Init+0x244>
 800161a:	2301      	movs	r3, #1
 800161c:	e000      	b.n	8001620 <HAL_GPIO_Init+0x244>
 800161e:	2300      	movs	r3, #0
 8001620:	697a      	ldr	r2, [r7, #20]
 8001622:	f002 0203 	and.w	r2, r2, #3
 8001626:	0092      	lsls	r2, r2, #2
 8001628:	4093      	lsls	r3, r2
 800162a:	693a      	ldr	r2, [r7, #16]
 800162c:	4313      	orrs	r3, r2
 800162e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001630:	4937      	ldr	r1, [pc, #220]	@ (8001710 <HAL_GPIO_Init+0x334>)
 8001632:	697b      	ldr	r3, [r7, #20]
 8001634:	089b      	lsrs	r3, r3, #2
 8001636:	3302      	adds	r3, #2
 8001638:	693a      	ldr	r2, [r7, #16]
 800163a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800163e:	4b3b      	ldr	r3, [pc, #236]	@ (800172c <HAL_GPIO_Init+0x350>)
 8001640:	689b      	ldr	r3, [r3, #8]
 8001642:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	43db      	mvns	r3, r3
 8001648:	693a      	ldr	r2, [r7, #16]
 800164a:	4013      	ands	r3, r2
 800164c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001656:	2b00      	cmp	r3, #0
 8001658:	d003      	beq.n	8001662 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800165a:	693a      	ldr	r2, [r7, #16]
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	4313      	orrs	r3, r2
 8001660:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001662:	4a32      	ldr	r2, [pc, #200]	@ (800172c <HAL_GPIO_Init+0x350>)
 8001664:	693b      	ldr	r3, [r7, #16]
 8001666:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001668:	4b30      	ldr	r3, [pc, #192]	@ (800172c <HAL_GPIO_Init+0x350>)
 800166a:	68db      	ldr	r3, [r3, #12]
 800166c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	43db      	mvns	r3, r3
 8001672:	693a      	ldr	r2, [r7, #16]
 8001674:	4013      	ands	r3, r2
 8001676:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001680:	2b00      	cmp	r3, #0
 8001682:	d003      	beq.n	800168c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001684:	693a      	ldr	r2, [r7, #16]
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	4313      	orrs	r3, r2
 800168a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800168c:	4a27      	ldr	r2, [pc, #156]	@ (800172c <HAL_GPIO_Init+0x350>)
 800168e:	693b      	ldr	r3, [r7, #16]
 8001690:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001692:	4b26      	ldr	r3, [pc, #152]	@ (800172c <HAL_GPIO_Init+0x350>)
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	43db      	mvns	r3, r3
 800169c:	693a      	ldr	r2, [r7, #16]
 800169e:	4013      	ands	r3, r2
 80016a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d003      	beq.n	80016b6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80016ae:	693a      	ldr	r2, [r7, #16]
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	4313      	orrs	r3, r2
 80016b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80016b6:	4a1d      	ldr	r2, [pc, #116]	@ (800172c <HAL_GPIO_Init+0x350>)
 80016b8:	693b      	ldr	r3, [r7, #16]
 80016ba:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80016bc:	4b1b      	ldr	r3, [pc, #108]	@ (800172c <HAL_GPIO_Init+0x350>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	43db      	mvns	r3, r3
 80016c6:	693a      	ldr	r2, [r7, #16]
 80016c8:	4013      	ands	r3, r2
 80016ca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d003      	beq.n	80016e0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80016d8:	693a      	ldr	r2, [r7, #16]
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	4313      	orrs	r3, r2
 80016de:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80016e0:	4a12      	ldr	r2, [pc, #72]	@ (800172c <HAL_GPIO_Init+0x350>)
 80016e2:	693b      	ldr	r3, [r7, #16]
 80016e4:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80016e6:	697b      	ldr	r3, [r7, #20]
 80016e8:	3301      	adds	r3, #1
 80016ea:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	681a      	ldr	r2, [r3, #0]
 80016f0:	697b      	ldr	r3, [r7, #20]
 80016f2:	fa22 f303 	lsr.w	r3, r2, r3
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	f47f ae78 	bne.w	80013ec <HAL_GPIO_Init+0x10>
  }
}
 80016fc:	bf00      	nop
 80016fe:	bf00      	nop
 8001700:	371c      	adds	r7, #28
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr
 800170a:	bf00      	nop
 800170c:	40021000 	.word	0x40021000
 8001710:	40010000 	.word	0x40010000
 8001714:	48000400 	.word	0x48000400
 8001718:	48000800 	.word	0x48000800
 800171c:	48000c00 	.word	0x48000c00
 8001720:	48001000 	.word	0x48001000
 8001724:	48001400 	.word	0x48001400
 8001728:	48001800 	.word	0x48001800
 800172c:	40010400 	.word	0x40010400

08001730 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001730:	b480      	push	{r7}
 8001732:	b083      	sub	sp, #12
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
 8001738:	460b      	mov	r3, r1
 800173a:	807b      	strh	r3, [r7, #2]
 800173c:	4613      	mov	r3, r2
 800173e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001740:	787b      	ldrb	r3, [r7, #1]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d003      	beq.n	800174e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001746:	887a      	ldrh	r2, [r7, #2]
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800174c:	e002      	b.n	8001754 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800174e:	887a      	ldrh	r2, [r7, #2]
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001754:	bf00      	nop
 8001756:	370c      	adds	r7, #12
 8001758:	46bd      	mov	sp, r7
 800175a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175e:	4770      	bx	lr

08001760 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001760:	b480      	push	{r7}
 8001762:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001764:	4b04      	ldr	r3, [pc, #16]	@ (8001778 <HAL_PWREx_GetVoltageRange+0x18>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 800176c:	4618      	mov	r0, r3
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr
 8001776:	bf00      	nop
 8001778:	40007000 	.word	0x40007000

0800177c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800177c:	b480      	push	{r7}
 800177e:	b085      	sub	sp, #20
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800178a:	d130      	bne.n	80017ee <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800178c:	4b23      	ldr	r3, [pc, #140]	@ (800181c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001794:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001798:	d038      	beq.n	800180c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800179a:	4b20      	ldr	r3, [pc, #128]	@ (800181c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80017a2:	4a1e      	ldr	r2, [pc, #120]	@ (800181c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017a4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80017a8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80017aa:	4b1d      	ldr	r3, [pc, #116]	@ (8001820 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	2232      	movs	r2, #50	@ 0x32
 80017b0:	fb02 f303 	mul.w	r3, r2, r3
 80017b4:	4a1b      	ldr	r2, [pc, #108]	@ (8001824 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80017b6:	fba2 2303 	umull	r2, r3, r2, r3
 80017ba:	0c9b      	lsrs	r3, r3, #18
 80017bc:	3301      	adds	r3, #1
 80017be:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80017c0:	e002      	b.n	80017c8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	3b01      	subs	r3, #1
 80017c6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80017c8:	4b14      	ldr	r3, [pc, #80]	@ (800181c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017ca:	695b      	ldr	r3, [r3, #20]
 80017cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80017d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80017d4:	d102      	bne.n	80017dc <HAL_PWREx_ControlVoltageScaling+0x60>
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d1f2      	bne.n	80017c2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80017dc:	4b0f      	ldr	r3, [pc, #60]	@ (800181c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017de:	695b      	ldr	r3, [r3, #20]
 80017e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80017e4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80017e8:	d110      	bne.n	800180c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80017ea:	2303      	movs	r3, #3
 80017ec:	e00f      	b.n	800180e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80017ee:	4b0b      	ldr	r3, [pc, #44]	@ (800181c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80017f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80017fa:	d007      	beq.n	800180c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80017fc:	4b07      	ldr	r3, [pc, #28]	@ (800181c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001804:	4a05      	ldr	r2, [pc, #20]	@ (800181c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001806:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800180a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800180c:	2300      	movs	r3, #0
}
 800180e:	4618      	mov	r0, r3
 8001810:	3714      	adds	r7, #20
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr
 800181a:	bf00      	nop
 800181c:	40007000 	.word	0x40007000
 8001820:	2000000c 	.word	0x2000000c
 8001824:	431bde83 	.word	0x431bde83

08001828 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b088      	sub	sp, #32
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2b00      	cmp	r3, #0
 8001834:	d101      	bne.n	800183a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001836:	2301      	movs	r3, #1
 8001838:	e3ca      	b.n	8001fd0 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800183a:	4b97      	ldr	r3, [pc, #604]	@ (8001a98 <HAL_RCC_OscConfig+0x270>)
 800183c:	689b      	ldr	r3, [r3, #8]
 800183e:	f003 030c 	and.w	r3, r3, #12
 8001842:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001844:	4b94      	ldr	r3, [pc, #592]	@ (8001a98 <HAL_RCC_OscConfig+0x270>)
 8001846:	68db      	ldr	r3, [r3, #12]
 8001848:	f003 0303 	and.w	r3, r3, #3
 800184c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f003 0310 	and.w	r3, r3, #16
 8001856:	2b00      	cmp	r3, #0
 8001858:	f000 80e4 	beq.w	8001a24 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800185c:	69bb      	ldr	r3, [r7, #24]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d007      	beq.n	8001872 <HAL_RCC_OscConfig+0x4a>
 8001862:	69bb      	ldr	r3, [r7, #24]
 8001864:	2b0c      	cmp	r3, #12
 8001866:	f040 808b 	bne.w	8001980 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800186a:	697b      	ldr	r3, [r7, #20]
 800186c:	2b01      	cmp	r3, #1
 800186e:	f040 8087 	bne.w	8001980 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001872:	4b89      	ldr	r3, [pc, #548]	@ (8001a98 <HAL_RCC_OscConfig+0x270>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f003 0302 	and.w	r3, r3, #2
 800187a:	2b00      	cmp	r3, #0
 800187c:	d005      	beq.n	800188a <HAL_RCC_OscConfig+0x62>
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	699b      	ldr	r3, [r3, #24]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d101      	bne.n	800188a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001886:	2301      	movs	r3, #1
 8001888:	e3a2      	b.n	8001fd0 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6a1a      	ldr	r2, [r3, #32]
 800188e:	4b82      	ldr	r3, [pc, #520]	@ (8001a98 <HAL_RCC_OscConfig+0x270>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f003 0308 	and.w	r3, r3, #8
 8001896:	2b00      	cmp	r3, #0
 8001898:	d004      	beq.n	80018a4 <HAL_RCC_OscConfig+0x7c>
 800189a:	4b7f      	ldr	r3, [pc, #508]	@ (8001a98 <HAL_RCC_OscConfig+0x270>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80018a2:	e005      	b.n	80018b0 <HAL_RCC_OscConfig+0x88>
 80018a4:	4b7c      	ldr	r3, [pc, #496]	@ (8001a98 <HAL_RCC_OscConfig+0x270>)
 80018a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80018aa:	091b      	lsrs	r3, r3, #4
 80018ac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80018b0:	4293      	cmp	r3, r2
 80018b2:	d223      	bcs.n	80018fc <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6a1b      	ldr	r3, [r3, #32]
 80018b8:	4618      	mov	r0, r3
 80018ba:	f000 fd55 	bl	8002368 <RCC_SetFlashLatencyFromMSIRange>
 80018be:	4603      	mov	r3, r0
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d001      	beq.n	80018c8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80018c4:	2301      	movs	r3, #1
 80018c6:	e383      	b.n	8001fd0 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80018c8:	4b73      	ldr	r3, [pc, #460]	@ (8001a98 <HAL_RCC_OscConfig+0x270>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4a72      	ldr	r2, [pc, #456]	@ (8001a98 <HAL_RCC_OscConfig+0x270>)
 80018ce:	f043 0308 	orr.w	r3, r3, #8
 80018d2:	6013      	str	r3, [r2, #0]
 80018d4:	4b70      	ldr	r3, [pc, #448]	@ (8001a98 <HAL_RCC_OscConfig+0x270>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6a1b      	ldr	r3, [r3, #32]
 80018e0:	496d      	ldr	r1, [pc, #436]	@ (8001a98 <HAL_RCC_OscConfig+0x270>)
 80018e2:	4313      	orrs	r3, r2
 80018e4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80018e6:	4b6c      	ldr	r3, [pc, #432]	@ (8001a98 <HAL_RCC_OscConfig+0x270>)
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	69db      	ldr	r3, [r3, #28]
 80018f2:	021b      	lsls	r3, r3, #8
 80018f4:	4968      	ldr	r1, [pc, #416]	@ (8001a98 <HAL_RCC_OscConfig+0x270>)
 80018f6:	4313      	orrs	r3, r2
 80018f8:	604b      	str	r3, [r1, #4]
 80018fa:	e025      	b.n	8001948 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80018fc:	4b66      	ldr	r3, [pc, #408]	@ (8001a98 <HAL_RCC_OscConfig+0x270>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a65      	ldr	r2, [pc, #404]	@ (8001a98 <HAL_RCC_OscConfig+0x270>)
 8001902:	f043 0308 	orr.w	r3, r3, #8
 8001906:	6013      	str	r3, [r2, #0]
 8001908:	4b63      	ldr	r3, [pc, #396]	@ (8001a98 <HAL_RCC_OscConfig+0x270>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6a1b      	ldr	r3, [r3, #32]
 8001914:	4960      	ldr	r1, [pc, #384]	@ (8001a98 <HAL_RCC_OscConfig+0x270>)
 8001916:	4313      	orrs	r3, r2
 8001918:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800191a:	4b5f      	ldr	r3, [pc, #380]	@ (8001a98 <HAL_RCC_OscConfig+0x270>)
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	69db      	ldr	r3, [r3, #28]
 8001926:	021b      	lsls	r3, r3, #8
 8001928:	495b      	ldr	r1, [pc, #364]	@ (8001a98 <HAL_RCC_OscConfig+0x270>)
 800192a:	4313      	orrs	r3, r2
 800192c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800192e:	69bb      	ldr	r3, [r7, #24]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d109      	bne.n	8001948 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6a1b      	ldr	r3, [r3, #32]
 8001938:	4618      	mov	r0, r3
 800193a:	f000 fd15 	bl	8002368 <RCC_SetFlashLatencyFromMSIRange>
 800193e:	4603      	mov	r3, r0
 8001940:	2b00      	cmp	r3, #0
 8001942:	d001      	beq.n	8001948 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001944:	2301      	movs	r3, #1
 8001946:	e343      	b.n	8001fd0 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001948:	f000 fc4a 	bl	80021e0 <HAL_RCC_GetSysClockFreq>
 800194c:	4602      	mov	r2, r0
 800194e:	4b52      	ldr	r3, [pc, #328]	@ (8001a98 <HAL_RCC_OscConfig+0x270>)
 8001950:	689b      	ldr	r3, [r3, #8]
 8001952:	091b      	lsrs	r3, r3, #4
 8001954:	f003 030f 	and.w	r3, r3, #15
 8001958:	4950      	ldr	r1, [pc, #320]	@ (8001a9c <HAL_RCC_OscConfig+0x274>)
 800195a:	5ccb      	ldrb	r3, [r1, r3]
 800195c:	f003 031f 	and.w	r3, r3, #31
 8001960:	fa22 f303 	lsr.w	r3, r2, r3
 8001964:	4a4e      	ldr	r2, [pc, #312]	@ (8001aa0 <HAL_RCC_OscConfig+0x278>)
 8001966:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001968:	4b4e      	ldr	r3, [pc, #312]	@ (8001aa4 <HAL_RCC_OscConfig+0x27c>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4618      	mov	r0, r3
 800196e:	f7ff fbc7 	bl	8001100 <HAL_InitTick>
 8001972:	4603      	mov	r3, r0
 8001974:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001976:	7bfb      	ldrb	r3, [r7, #15]
 8001978:	2b00      	cmp	r3, #0
 800197a:	d052      	beq.n	8001a22 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800197c:	7bfb      	ldrb	r3, [r7, #15]
 800197e:	e327      	b.n	8001fd0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	699b      	ldr	r3, [r3, #24]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d032      	beq.n	80019ee <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001988:	4b43      	ldr	r3, [pc, #268]	@ (8001a98 <HAL_RCC_OscConfig+0x270>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a42      	ldr	r2, [pc, #264]	@ (8001a98 <HAL_RCC_OscConfig+0x270>)
 800198e:	f043 0301 	orr.w	r3, r3, #1
 8001992:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001994:	f7ff fc04 	bl	80011a0 <HAL_GetTick>
 8001998:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800199a:	e008      	b.n	80019ae <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800199c:	f7ff fc00 	bl	80011a0 <HAL_GetTick>
 80019a0:	4602      	mov	r2, r0
 80019a2:	693b      	ldr	r3, [r7, #16]
 80019a4:	1ad3      	subs	r3, r2, r3
 80019a6:	2b02      	cmp	r3, #2
 80019a8:	d901      	bls.n	80019ae <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80019aa:	2303      	movs	r3, #3
 80019ac:	e310      	b.n	8001fd0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80019ae:	4b3a      	ldr	r3, [pc, #232]	@ (8001a98 <HAL_RCC_OscConfig+0x270>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f003 0302 	and.w	r3, r3, #2
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d0f0      	beq.n	800199c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80019ba:	4b37      	ldr	r3, [pc, #220]	@ (8001a98 <HAL_RCC_OscConfig+0x270>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4a36      	ldr	r2, [pc, #216]	@ (8001a98 <HAL_RCC_OscConfig+0x270>)
 80019c0:	f043 0308 	orr.w	r3, r3, #8
 80019c4:	6013      	str	r3, [r2, #0]
 80019c6:	4b34      	ldr	r3, [pc, #208]	@ (8001a98 <HAL_RCC_OscConfig+0x270>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6a1b      	ldr	r3, [r3, #32]
 80019d2:	4931      	ldr	r1, [pc, #196]	@ (8001a98 <HAL_RCC_OscConfig+0x270>)
 80019d4:	4313      	orrs	r3, r2
 80019d6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80019d8:	4b2f      	ldr	r3, [pc, #188]	@ (8001a98 <HAL_RCC_OscConfig+0x270>)
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	69db      	ldr	r3, [r3, #28]
 80019e4:	021b      	lsls	r3, r3, #8
 80019e6:	492c      	ldr	r1, [pc, #176]	@ (8001a98 <HAL_RCC_OscConfig+0x270>)
 80019e8:	4313      	orrs	r3, r2
 80019ea:	604b      	str	r3, [r1, #4]
 80019ec:	e01a      	b.n	8001a24 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80019ee:	4b2a      	ldr	r3, [pc, #168]	@ (8001a98 <HAL_RCC_OscConfig+0x270>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4a29      	ldr	r2, [pc, #164]	@ (8001a98 <HAL_RCC_OscConfig+0x270>)
 80019f4:	f023 0301 	bic.w	r3, r3, #1
 80019f8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80019fa:	f7ff fbd1 	bl	80011a0 <HAL_GetTick>
 80019fe:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001a00:	e008      	b.n	8001a14 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001a02:	f7ff fbcd 	bl	80011a0 <HAL_GetTick>
 8001a06:	4602      	mov	r2, r0
 8001a08:	693b      	ldr	r3, [r7, #16]
 8001a0a:	1ad3      	subs	r3, r2, r3
 8001a0c:	2b02      	cmp	r3, #2
 8001a0e:	d901      	bls.n	8001a14 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001a10:	2303      	movs	r3, #3
 8001a12:	e2dd      	b.n	8001fd0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001a14:	4b20      	ldr	r3, [pc, #128]	@ (8001a98 <HAL_RCC_OscConfig+0x270>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f003 0302 	and.w	r3, r3, #2
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d1f0      	bne.n	8001a02 <HAL_RCC_OscConfig+0x1da>
 8001a20:	e000      	b.n	8001a24 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001a22:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f003 0301 	and.w	r3, r3, #1
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d074      	beq.n	8001b1a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001a30:	69bb      	ldr	r3, [r7, #24]
 8001a32:	2b08      	cmp	r3, #8
 8001a34:	d005      	beq.n	8001a42 <HAL_RCC_OscConfig+0x21a>
 8001a36:	69bb      	ldr	r3, [r7, #24]
 8001a38:	2b0c      	cmp	r3, #12
 8001a3a:	d10e      	bne.n	8001a5a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001a3c:	697b      	ldr	r3, [r7, #20]
 8001a3e:	2b03      	cmp	r3, #3
 8001a40:	d10b      	bne.n	8001a5a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a42:	4b15      	ldr	r3, [pc, #84]	@ (8001a98 <HAL_RCC_OscConfig+0x270>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d064      	beq.n	8001b18 <HAL_RCC_OscConfig+0x2f0>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d160      	bne.n	8001b18 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001a56:	2301      	movs	r3, #1
 8001a58:	e2ba      	b.n	8001fd0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001a62:	d106      	bne.n	8001a72 <HAL_RCC_OscConfig+0x24a>
 8001a64:	4b0c      	ldr	r3, [pc, #48]	@ (8001a98 <HAL_RCC_OscConfig+0x270>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a0b      	ldr	r2, [pc, #44]	@ (8001a98 <HAL_RCC_OscConfig+0x270>)
 8001a6a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a6e:	6013      	str	r3, [r2, #0]
 8001a70:	e026      	b.n	8001ac0 <HAL_RCC_OscConfig+0x298>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001a7a:	d115      	bne.n	8001aa8 <HAL_RCC_OscConfig+0x280>
 8001a7c:	4b06      	ldr	r3, [pc, #24]	@ (8001a98 <HAL_RCC_OscConfig+0x270>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a05      	ldr	r2, [pc, #20]	@ (8001a98 <HAL_RCC_OscConfig+0x270>)
 8001a82:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001a86:	6013      	str	r3, [r2, #0]
 8001a88:	4b03      	ldr	r3, [pc, #12]	@ (8001a98 <HAL_RCC_OscConfig+0x270>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a02      	ldr	r2, [pc, #8]	@ (8001a98 <HAL_RCC_OscConfig+0x270>)
 8001a8e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a92:	6013      	str	r3, [r2, #0]
 8001a94:	e014      	b.n	8001ac0 <HAL_RCC_OscConfig+0x298>
 8001a96:	bf00      	nop
 8001a98:	40021000 	.word	0x40021000
 8001a9c:	0800784c 	.word	0x0800784c
 8001aa0:	2000000c 	.word	0x2000000c
 8001aa4:	20000010 	.word	0x20000010
 8001aa8:	4ba0      	ldr	r3, [pc, #640]	@ (8001d2c <HAL_RCC_OscConfig+0x504>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a9f      	ldr	r2, [pc, #636]	@ (8001d2c <HAL_RCC_OscConfig+0x504>)
 8001aae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001ab2:	6013      	str	r3, [r2, #0]
 8001ab4:	4b9d      	ldr	r3, [pc, #628]	@ (8001d2c <HAL_RCC_OscConfig+0x504>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4a9c      	ldr	r2, [pc, #624]	@ (8001d2c <HAL_RCC_OscConfig+0x504>)
 8001aba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001abe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d013      	beq.n	8001af0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ac8:	f7ff fb6a 	bl	80011a0 <HAL_GetTick>
 8001acc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ace:	e008      	b.n	8001ae2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ad0:	f7ff fb66 	bl	80011a0 <HAL_GetTick>
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	693b      	ldr	r3, [r7, #16]
 8001ad8:	1ad3      	subs	r3, r2, r3
 8001ada:	2b64      	cmp	r3, #100	@ 0x64
 8001adc:	d901      	bls.n	8001ae2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001ade:	2303      	movs	r3, #3
 8001ae0:	e276      	b.n	8001fd0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ae2:	4b92      	ldr	r3, [pc, #584]	@ (8001d2c <HAL_RCC_OscConfig+0x504>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d0f0      	beq.n	8001ad0 <HAL_RCC_OscConfig+0x2a8>
 8001aee:	e014      	b.n	8001b1a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001af0:	f7ff fb56 	bl	80011a0 <HAL_GetTick>
 8001af4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001af6:	e008      	b.n	8001b0a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001af8:	f7ff fb52 	bl	80011a0 <HAL_GetTick>
 8001afc:	4602      	mov	r2, r0
 8001afe:	693b      	ldr	r3, [r7, #16]
 8001b00:	1ad3      	subs	r3, r2, r3
 8001b02:	2b64      	cmp	r3, #100	@ 0x64
 8001b04:	d901      	bls.n	8001b0a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001b06:	2303      	movs	r3, #3
 8001b08:	e262      	b.n	8001fd0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001b0a:	4b88      	ldr	r3, [pc, #544]	@ (8001d2c <HAL_RCC_OscConfig+0x504>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d1f0      	bne.n	8001af8 <HAL_RCC_OscConfig+0x2d0>
 8001b16:	e000      	b.n	8001b1a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f003 0302 	and.w	r3, r3, #2
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d060      	beq.n	8001be8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001b26:	69bb      	ldr	r3, [r7, #24]
 8001b28:	2b04      	cmp	r3, #4
 8001b2a:	d005      	beq.n	8001b38 <HAL_RCC_OscConfig+0x310>
 8001b2c:	69bb      	ldr	r3, [r7, #24]
 8001b2e:	2b0c      	cmp	r3, #12
 8001b30:	d119      	bne.n	8001b66 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001b32:	697b      	ldr	r3, [r7, #20]
 8001b34:	2b02      	cmp	r3, #2
 8001b36:	d116      	bne.n	8001b66 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b38:	4b7c      	ldr	r3, [pc, #496]	@ (8001d2c <HAL_RCC_OscConfig+0x504>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d005      	beq.n	8001b50 <HAL_RCC_OscConfig+0x328>
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	68db      	ldr	r3, [r3, #12]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d101      	bne.n	8001b50 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	e23f      	b.n	8001fd0 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b50:	4b76      	ldr	r3, [pc, #472]	@ (8001d2c <HAL_RCC_OscConfig+0x504>)
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	691b      	ldr	r3, [r3, #16]
 8001b5c:	061b      	lsls	r3, r3, #24
 8001b5e:	4973      	ldr	r1, [pc, #460]	@ (8001d2c <HAL_RCC_OscConfig+0x504>)
 8001b60:	4313      	orrs	r3, r2
 8001b62:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b64:	e040      	b.n	8001be8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	68db      	ldr	r3, [r3, #12]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d023      	beq.n	8001bb6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b6e:	4b6f      	ldr	r3, [pc, #444]	@ (8001d2c <HAL_RCC_OscConfig+0x504>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4a6e      	ldr	r2, [pc, #440]	@ (8001d2c <HAL_RCC_OscConfig+0x504>)
 8001b74:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b78:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b7a:	f7ff fb11 	bl	80011a0 <HAL_GetTick>
 8001b7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b80:	e008      	b.n	8001b94 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b82:	f7ff fb0d 	bl	80011a0 <HAL_GetTick>
 8001b86:	4602      	mov	r2, r0
 8001b88:	693b      	ldr	r3, [r7, #16]
 8001b8a:	1ad3      	subs	r3, r2, r3
 8001b8c:	2b02      	cmp	r3, #2
 8001b8e:	d901      	bls.n	8001b94 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001b90:	2303      	movs	r3, #3
 8001b92:	e21d      	b.n	8001fd0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b94:	4b65      	ldr	r3, [pc, #404]	@ (8001d2c <HAL_RCC_OscConfig+0x504>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d0f0      	beq.n	8001b82 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ba0:	4b62      	ldr	r3, [pc, #392]	@ (8001d2c <HAL_RCC_OscConfig+0x504>)
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	691b      	ldr	r3, [r3, #16]
 8001bac:	061b      	lsls	r3, r3, #24
 8001bae:	495f      	ldr	r1, [pc, #380]	@ (8001d2c <HAL_RCC_OscConfig+0x504>)
 8001bb0:	4313      	orrs	r3, r2
 8001bb2:	604b      	str	r3, [r1, #4]
 8001bb4:	e018      	b.n	8001be8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001bb6:	4b5d      	ldr	r3, [pc, #372]	@ (8001d2c <HAL_RCC_OscConfig+0x504>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4a5c      	ldr	r2, [pc, #368]	@ (8001d2c <HAL_RCC_OscConfig+0x504>)
 8001bbc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001bc0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bc2:	f7ff faed 	bl	80011a0 <HAL_GetTick>
 8001bc6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001bc8:	e008      	b.n	8001bdc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bca:	f7ff fae9 	bl	80011a0 <HAL_GetTick>
 8001bce:	4602      	mov	r2, r0
 8001bd0:	693b      	ldr	r3, [r7, #16]
 8001bd2:	1ad3      	subs	r3, r2, r3
 8001bd4:	2b02      	cmp	r3, #2
 8001bd6:	d901      	bls.n	8001bdc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001bd8:	2303      	movs	r3, #3
 8001bda:	e1f9      	b.n	8001fd0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001bdc:	4b53      	ldr	r3, [pc, #332]	@ (8001d2c <HAL_RCC_OscConfig+0x504>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d1f0      	bne.n	8001bca <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f003 0308 	and.w	r3, r3, #8
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d03c      	beq.n	8001c6e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	695b      	ldr	r3, [r3, #20]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d01c      	beq.n	8001c36 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001bfc:	4b4b      	ldr	r3, [pc, #300]	@ (8001d2c <HAL_RCC_OscConfig+0x504>)
 8001bfe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001c02:	4a4a      	ldr	r2, [pc, #296]	@ (8001d2c <HAL_RCC_OscConfig+0x504>)
 8001c04:	f043 0301 	orr.w	r3, r3, #1
 8001c08:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c0c:	f7ff fac8 	bl	80011a0 <HAL_GetTick>
 8001c10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001c12:	e008      	b.n	8001c26 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c14:	f7ff fac4 	bl	80011a0 <HAL_GetTick>
 8001c18:	4602      	mov	r2, r0
 8001c1a:	693b      	ldr	r3, [r7, #16]
 8001c1c:	1ad3      	subs	r3, r2, r3
 8001c1e:	2b02      	cmp	r3, #2
 8001c20:	d901      	bls.n	8001c26 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001c22:	2303      	movs	r3, #3
 8001c24:	e1d4      	b.n	8001fd0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001c26:	4b41      	ldr	r3, [pc, #260]	@ (8001d2c <HAL_RCC_OscConfig+0x504>)
 8001c28:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001c2c:	f003 0302 	and.w	r3, r3, #2
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d0ef      	beq.n	8001c14 <HAL_RCC_OscConfig+0x3ec>
 8001c34:	e01b      	b.n	8001c6e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c36:	4b3d      	ldr	r3, [pc, #244]	@ (8001d2c <HAL_RCC_OscConfig+0x504>)
 8001c38:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001c3c:	4a3b      	ldr	r2, [pc, #236]	@ (8001d2c <HAL_RCC_OscConfig+0x504>)
 8001c3e:	f023 0301 	bic.w	r3, r3, #1
 8001c42:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c46:	f7ff faab 	bl	80011a0 <HAL_GetTick>
 8001c4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001c4c:	e008      	b.n	8001c60 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c4e:	f7ff faa7 	bl	80011a0 <HAL_GetTick>
 8001c52:	4602      	mov	r2, r0
 8001c54:	693b      	ldr	r3, [r7, #16]
 8001c56:	1ad3      	subs	r3, r2, r3
 8001c58:	2b02      	cmp	r3, #2
 8001c5a:	d901      	bls.n	8001c60 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001c5c:	2303      	movs	r3, #3
 8001c5e:	e1b7      	b.n	8001fd0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001c60:	4b32      	ldr	r3, [pc, #200]	@ (8001d2c <HAL_RCC_OscConfig+0x504>)
 8001c62:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001c66:	f003 0302 	and.w	r3, r3, #2
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d1ef      	bne.n	8001c4e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f003 0304 	and.w	r3, r3, #4
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	f000 80a6 	beq.w	8001dc8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001c80:	4b2a      	ldr	r3, [pc, #168]	@ (8001d2c <HAL_RCC_OscConfig+0x504>)
 8001c82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c84:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d10d      	bne.n	8001ca8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c8c:	4b27      	ldr	r3, [pc, #156]	@ (8001d2c <HAL_RCC_OscConfig+0x504>)
 8001c8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c90:	4a26      	ldr	r2, [pc, #152]	@ (8001d2c <HAL_RCC_OscConfig+0x504>)
 8001c92:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c96:	6593      	str	r3, [r2, #88]	@ 0x58
 8001c98:	4b24      	ldr	r3, [pc, #144]	@ (8001d2c <HAL_RCC_OscConfig+0x504>)
 8001c9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c9c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ca0:	60bb      	str	r3, [r7, #8]
 8001ca2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ca8:	4b21      	ldr	r3, [pc, #132]	@ (8001d30 <HAL_RCC_OscConfig+0x508>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d118      	bne.n	8001ce6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001cb4:	4b1e      	ldr	r3, [pc, #120]	@ (8001d30 <HAL_RCC_OscConfig+0x508>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4a1d      	ldr	r2, [pc, #116]	@ (8001d30 <HAL_RCC_OscConfig+0x508>)
 8001cba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001cbe:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001cc0:	f7ff fa6e 	bl	80011a0 <HAL_GetTick>
 8001cc4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001cc6:	e008      	b.n	8001cda <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cc8:	f7ff fa6a 	bl	80011a0 <HAL_GetTick>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	693b      	ldr	r3, [r7, #16]
 8001cd0:	1ad3      	subs	r3, r2, r3
 8001cd2:	2b02      	cmp	r3, #2
 8001cd4:	d901      	bls.n	8001cda <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001cd6:	2303      	movs	r3, #3
 8001cd8:	e17a      	b.n	8001fd0 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001cda:	4b15      	ldr	r3, [pc, #84]	@ (8001d30 <HAL_RCC_OscConfig+0x508>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d0f0      	beq.n	8001cc8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	689b      	ldr	r3, [r3, #8]
 8001cea:	2b01      	cmp	r3, #1
 8001cec:	d108      	bne.n	8001d00 <HAL_RCC_OscConfig+0x4d8>
 8001cee:	4b0f      	ldr	r3, [pc, #60]	@ (8001d2c <HAL_RCC_OscConfig+0x504>)
 8001cf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001cf4:	4a0d      	ldr	r2, [pc, #52]	@ (8001d2c <HAL_RCC_OscConfig+0x504>)
 8001cf6:	f043 0301 	orr.w	r3, r3, #1
 8001cfa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001cfe:	e029      	b.n	8001d54 <HAL_RCC_OscConfig+0x52c>
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	689b      	ldr	r3, [r3, #8]
 8001d04:	2b05      	cmp	r3, #5
 8001d06:	d115      	bne.n	8001d34 <HAL_RCC_OscConfig+0x50c>
 8001d08:	4b08      	ldr	r3, [pc, #32]	@ (8001d2c <HAL_RCC_OscConfig+0x504>)
 8001d0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d0e:	4a07      	ldr	r2, [pc, #28]	@ (8001d2c <HAL_RCC_OscConfig+0x504>)
 8001d10:	f043 0304 	orr.w	r3, r3, #4
 8001d14:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001d18:	4b04      	ldr	r3, [pc, #16]	@ (8001d2c <HAL_RCC_OscConfig+0x504>)
 8001d1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d1e:	4a03      	ldr	r2, [pc, #12]	@ (8001d2c <HAL_RCC_OscConfig+0x504>)
 8001d20:	f043 0301 	orr.w	r3, r3, #1
 8001d24:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001d28:	e014      	b.n	8001d54 <HAL_RCC_OscConfig+0x52c>
 8001d2a:	bf00      	nop
 8001d2c:	40021000 	.word	0x40021000
 8001d30:	40007000 	.word	0x40007000
 8001d34:	4b9c      	ldr	r3, [pc, #624]	@ (8001fa8 <HAL_RCC_OscConfig+0x780>)
 8001d36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d3a:	4a9b      	ldr	r2, [pc, #620]	@ (8001fa8 <HAL_RCC_OscConfig+0x780>)
 8001d3c:	f023 0301 	bic.w	r3, r3, #1
 8001d40:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001d44:	4b98      	ldr	r3, [pc, #608]	@ (8001fa8 <HAL_RCC_OscConfig+0x780>)
 8001d46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d4a:	4a97      	ldr	r2, [pc, #604]	@ (8001fa8 <HAL_RCC_OscConfig+0x780>)
 8001d4c:	f023 0304 	bic.w	r3, r3, #4
 8001d50:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	689b      	ldr	r3, [r3, #8]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d016      	beq.n	8001d8a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d5c:	f7ff fa20 	bl	80011a0 <HAL_GetTick>
 8001d60:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d62:	e00a      	b.n	8001d7a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d64:	f7ff fa1c 	bl	80011a0 <HAL_GetTick>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	693b      	ldr	r3, [r7, #16]
 8001d6c:	1ad3      	subs	r3, r2, r3
 8001d6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d901      	bls.n	8001d7a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001d76:	2303      	movs	r3, #3
 8001d78:	e12a      	b.n	8001fd0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d7a:	4b8b      	ldr	r3, [pc, #556]	@ (8001fa8 <HAL_RCC_OscConfig+0x780>)
 8001d7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d80:	f003 0302 	and.w	r3, r3, #2
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d0ed      	beq.n	8001d64 <HAL_RCC_OscConfig+0x53c>
 8001d88:	e015      	b.n	8001db6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d8a:	f7ff fa09 	bl	80011a0 <HAL_GetTick>
 8001d8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d90:	e00a      	b.n	8001da8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d92:	f7ff fa05 	bl	80011a0 <HAL_GetTick>
 8001d96:	4602      	mov	r2, r0
 8001d98:	693b      	ldr	r3, [r7, #16]
 8001d9a:	1ad3      	subs	r3, r2, r3
 8001d9c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001da0:	4293      	cmp	r3, r2
 8001da2:	d901      	bls.n	8001da8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001da4:	2303      	movs	r3, #3
 8001da6:	e113      	b.n	8001fd0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001da8:	4b7f      	ldr	r3, [pc, #508]	@ (8001fa8 <HAL_RCC_OscConfig+0x780>)
 8001daa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001dae:	f003 0302 	and.w	r3, r3, #2
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d1ed      	bne.n	8001d92 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001db6:	7ffb      	ldrb	r3, [r7, #31]
 8001db8:	2b01      	cmp	r3, #1
 8001dba:	d105      	bne.n	8001dc8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001dbc:	4b7a      	ldr	r3, [pc, #488]	@ (8001fa8 <HAL_RCC_OscConfig+0x780>)
 8001dbe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dc0:	4a79      	ldr	r2, [pc, #484]	@ (8001fa8 <HAL_RCC_OscConfig+0x780>)
 8001dc2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001dc6:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	f000 80fe 	beq.w	8001fce <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dd6:	2b02      	cmp	r3, #2
 8001dd8:	f040 80d0 	bne.w	8001f7c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001ddc:	4b72      	ldr	r3, [pc, #456]	@ (8001fa8 <HAL_RCC_OscConfig+0x780>)
 8001dde:	68db      	ldr	r3, [r3, #12]
 8001de0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001de2:	697b      	ldr	r3, [r7, #20]
 8001de4:	f003 0203 	and.w	r2, r3, #3
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dec:	429a      	cmp	r2, r3
 8001dee:	d130      	bne.n	8001e52 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001df0:	697b      	ldr	r3, [r7, #20]
 8001df2:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dfa:	3b01      	subs	r3, #1
 8001dfc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dfe:	429a      	cmp	r2, r3
 8001e00:	d127      	bne.n	8001e52 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e02:	697b      	ldr	r3, [r7, #20]
 8001e04:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e0c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001e0e:	429a      	cmp	r2, r3
 8001e10:	d11f      	bne.n	8001e52 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001e12:	697b      	ldr	r3, [r7, #20]
 8001e14:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e18:	687a      	ldr	r2, [r7, #4]
 8001e1a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001e1c:	2a07      	cmp	r2, #7
 8001e1e:	bf14      	ite	ne
 8001e20:	2201      	movne	r2, #1
 8001e22:	2200      	moveq	r2, #0
 8001e24:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d113      	bne.n	8001e52 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e2a:	697b      	ldr	r3, [r7, #20]
 8001e2c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e34:	085b      	lsrs	r3, r3, #1
 8001e36:	3b01      	subs	r3, #1
 8001e38:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001e3a:	429a      	cmp	r2, r3
 8001e3c:	d109      	bne.n	8001e52 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001e3e:	697b      	ldr	r3, [r7, #20]
 8001e40:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e48:	085b      	lsrs	r3, r3, #1
 8001e4a:	3b01      	subs	r3, #1
 8001e4c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e4e:	429a      	cmp	r2, r3
 8001e50:	d06e      	beq.n	8001f30 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001e52:	69bb      	ldr	r3, [r7, #24]
 8001e54:	2b0c      	cmp	r3, #12
 8001e56:	d069      	beq.n	8001f2c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001e58:	4b53      	ldr	r3, [pc, #332]	@ (8001fa8 <HAL_RCC_OscConfig+0x780>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d105      	bne.n	8001e70 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001e64:	4b50      	ldr	r3, [pc, #320]	@ (8001fa8 <HAL_RCC_OscConfig+0x780>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d001      	beq.n	8001e74 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001e70:	2301      	movs	r3, #1
 8001e72:	e0ad      	b.n	8001fd0 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001e74:	4b4c      	ldr	r3, [pc, #304]	@ (8001fa8 <HAL_RCC_OscConfig+0x780>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a4b      	ldr	r2, [pc, #300]	@ (8001fa8 <HAL_RCC_OscConfig+0x780>)
 8001e7a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001e7e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001e80:	f7ff f98e 	bl	80011a0 <HAL_GetTick>
 8001e84:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e86:	e008      	b.n	8001e9a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e88:	f7ff f98a 	bl	80011a0 <HAL_GetTick>
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	693b      	ldr	r3, [r7, #16]
 8001e90:	1ad3      	subs	r3, r2, r3
 8001e92:	2b02      	cmp	r3, #2
 8001e94:	d901      	bls.n	8001e9a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001e96:	2303      	movs	r3, #3
 8001e98:	e09a      	b.n	8001fd0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e9a:	4b43      	ldr	r3, [pc, #268]	@ (8001fa8 <HAL_RCC_OscConfig+0x780>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d1f0      	bne.n	8001e88 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ea6:	4b40      	ldr	r3, [pc, #256]	@ (8001fa8 <HAL_RCC_OscConfig+0x780>)
 8001ea8:	68da      	ldr	r2, [r3, #12]
 8001eaa:	4b40      	ldr	r3, [pc, #256]	@ (8001fac <HAL_RCC_OscConfig+0x784>)
 8001eac:	4013      	ands	r3, r2
 8001eae:	687a      	ldr	r2, [r7, #4]
 8001eb0:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001eb2:	687a      	ldr	r2, [r7, #4]
 8001eb4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001eb6:	3a01      	subs	r2, #1
 8001eb8:	0112      	lsls	r2, r2, #4
 8001eba:	4311      	orrs	r1, r2
 8001ebc:	687a      	ldr	r2, [r7, #4]
 8001ebe:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001ec0:	0212      	lsls	r2, r2, #8
 8001ec2:	4311      	orrs	r1, r2
 8001ec4:	687a      	ldr	r2, [r7, #4]
 8001ec6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001ec8:	0852      	lsrs	r2, r2, #1
 8001eca:	3a01      	subs	r2, #1
 8001ecc:	0552      	lsls	r2, r2, #21
 8001ece:	4311      	orrs	r1, r2
 8001ed0:	687a      	ldr	r2, [r7, #4]
 8001ed2:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001ed4:	0852      	lsrs	r2, r2, #1
 8001ed6:	3a01      	subs	r2, #1
 8001ed8:	0652      	lsls	r2, r2, #25
 8001eda:	4311      	orrs	r1, r2
 8001edc:	687a      	ldr	r2, [r7, #4]
 8001ede:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001ee0:	0912      	lsrs	r2, r2, #4
 8001ee2:	0452      	lsls	r2, r2, #17
 8001ee4:	430a      	orrs	r2, r1
 8001ee6:	4930      	ldr	r1, [pc, #192]	@ (8001fa8 <HAL_RCC_OscConfig+0x780>)
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001eec:	4b2e      	ldr	r3, [pc, #184]	@ (8001fa8 <HAL_RCC_OscConfig+0x780>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a2d      	ldr	r2, [pc, #180]	@ (8001fa8 <HAL_RCC_OscConfig+0x780>)
 8001ef2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001ef6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001ef8:	4b2b      	ldr	r3, [pc, #172]	@ (8001fa8 <HAL_RCC_OscConfig+0x780>)
 8001efa:	68db      	ldr	r3, [r3, #12]
 8001efc:	4a2a      	ldr	r2, [pc, #168]	@ (8001fa8 <HAL_RCC_OscConfig+0x780>)
 8001efe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001f02:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001f04:	f7ff f94c 	bl	80011a0 <HAL_GetTick>
 8001f08:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f0a:	e008      	b.n	8001f1e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f0c:	f7ff f948 	bl	80011a0 <HAL_GetTick>
 8001f10:	4602      	mov	r2, r0
 8001f12:	693b      	ldr	r3, [r7, #16]
 8001f14:	1ad3      	subs	r3, r2, r3
 8001f16:	2b02      	cmp	r3, #2
 8001f18:	d901      	bls.n	8001f1e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001f1a:	2303      	movs	r3, #3
 8001f1c:	e058      	b.n	8001fd0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f1e:	4b22      	ldr	r3, [pc, #136]	@ (8001fa8 <HAL_RCC_OscConfig+0x780>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d0f0      	beq.n	8001f0c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001f2a:	e050      	b.n	8001fce <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	e04f      	b.n	8001fd0 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f30:	4b1d      	ldr	r3, [pc, #116]	@ (8001fa8 <HAL_RCC_OscConfig+0x780>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d148      	bne.n	8001fce <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001f3c:	4b1a      	ldr	r3, [pc, #104]	@ (8001fa8 <HAL_RCC_OscConfig+0x780>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a19      	ldr	r2, [pc, #100]	@ (8001fa8 <HAL_RCC_OscConfig+0x780>)
 8001f42:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001f46:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001f48:	4b17      	ldr	r3, [pc, #92]	@ (8001fa8 <HAL_RCC_OscConfig+0x780>)
 8001f4a:	68db      	ldr	r3, [r3, #12]
 8001f4c:	4a16      	ldr	r2, [pc, #88]	@ (8001fa8 <HAL_RCC_OscConfig+0x780>)
 8001f4e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001f52:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001f54:	f7ff f924 	bl	80011a0 <HAL_GetTick>
 8001f58:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f5a:	e008      	b.n	8001f6e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f5c:	f7ff f920 	bl	80011a0 <HAL_GetTick>
 8001f60:	4602      	mov	r2, r0
 8001f62:	693b      	ldr	r3, [r7, #16]
 8001f64:	1ad3      	subs	r3, r2, r3
 8001f66:	2b02      	cmp	r3, #2
 8001f68:	d901      	bls.n	8001f6e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001f6a:	2303      	movs	r3, #3
 8001f6c:	e030      	b.n	8001fd0 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f6e:	4b0e      	ldr	r3, [pc, #56]	@ (8001fa8 <HAL_RCC_OscConfig+0x780>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d0f0      	beq.n	8001f5c <HAL_RCC_OscConfig+0x734>
 8001f7a:	e028      	b.n	8001fce <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001f7c:	69bb      	ldr	r3, [r7, #24]
 8001f7e:	2b0c      	cmp	r3, #12
 8001f80:	d023      	beq.n	8001fca <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f82:	4b09      	ldr	r3, [pc, #36]	@ (8001fa8 <HAL_RCC_OscConfig+0x780>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4a08      	ldr	r2, [pc, #32]	@ (8001fa8 <HAL_RCC_OscConfig+0x780>)
 8001f88:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001f8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f8e:	f7ff f907 	bl	80011a0 <HAL_GetTick>
 8001f92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f94:	e00c      	b.n	8001fb0 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f96:	f7ff f903 	bl	80011a0 <HAL_GetTick>
 8001f9a:	4602      	mov	r2, r0
 8001f9c:	693b      	ldr	r3, [r7, #16]
 8001f9e:	1ad3      	subs	r3, r2, r3
 8001fa0:	2b02      	cmp	r3, #2
 8001fa2:	d905      	bls.n	8001fb0 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001fa4:	2303      	movs	r3, #3
 8001fa6:	e013      	b.n	8001fd0 <HAL_RCC_OscConfig+0x7a8>
 8001fa8:	40021000 	.word	0x40021000
 8001fac:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001fb0:	4b09      	ldr	r3, [pc, #36]	@ (8001fd8 <HAL_RCC_OscConfig+0x7b0>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d1ec      	bne.n	8001f96 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001fbc:	4b06      	ldr	r3, [pc, #24]	@ (8001fd8 <HAL_RCC_OscConfig+0x7b0>)
 8001fbe:	68da      	ldr	r2, [r3, #12]
 8001fc0:	4905      	ldr	r1, [pc, #20]	@ (8001fd8 <HAL_RCC_OscConfig+0x7b0>)
 8001fc2:	4b06      	ldr	r3, [pc, #24]	@ (8001fdc <HAL_RCC_OscConfig+0x7b4>)
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	60cb      	str	r3, [r1, #12]
 8001fc8:	e001      	b.n	8001fce <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	e000      	b.n	8001fd0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001fce:	2300      	movs	r3, #0
}
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	3720      	adds	r7, #32
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}
 8001fd8:	40021000 	.word	0x40021000
 8001fdc:	feeefffc 	.word	0xfeeefffc

08001fe0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b084      	sub	sp, #16
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
 8001fe8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d101      	bne.n	8001ff4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	e0e7      	b.n	80021c4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ff4:	4b75      	ldr	r3, [pc, #468]	@ (80021cc <HAL_RCC_ClockConfig+0x1ec>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f003 0307 	and.w	r3, r3, #7
 8001ffc:	683a      	ldr	r2, [r7, #0]
 8001ffe:	429a      	cmp	r2, r3
 8002000:	d910      	bls.n	8002024 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002002:	4b72      	ldr	r3, [pc, #456]	@ (80021cc <HAL_RCC_ClockConfig+0x1ec>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f023 0207 	bic.w	r2, r3, #7
 800200a:	4970      	ldr	r1, [pc, #448]	@ (80021cc <HAL_RCC_ClockConfig+0x1ec>)
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	4313      	orrs	r3, r2
 8002010:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002012:	4b6e      	ldr	r3, [pc, #440]	@ (80021cc <HAL_RCC_ClockConfig+0x1ec>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f003 0307 	and.w	r3, r3, #7
 800201a:	683a      	ldr	r2, [r7, #0]
 800201c:	429a      	cmp	r2, r3
 800201e:	d001      	beq.n	8002024 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002020:	2301      	movs	r3, #1
 8002022:	e0cf      	b.n	80021c4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f003 0302 	and.w	r3, r3, #2
 800202c:	2b00      	cmp	r3, #0
 800202e:	d010      	beq.n	8002052 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	689a      	ldr	r2, [r3, #8]
 8002034:	4b66      	ldr	r3, [pc, #408]	@ (80021d0 <HAL_RCC_ClockConfig+0x1f0>)
 8002036:	689b      	ldr	r3, [r3, #8]
 8002038:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800203c:	429a      	cmp	r2, r3
 800203e:	d908      	bls.n	8002052 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002040:	4b63      	ldr	r3, [pc, #396]	@ (80021d0 <HAL_RCC_ClockConfig+0x1f0>)
 8002042:	689b      	ldr	r3, [r3, #8]
 8002044:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	689b      	ldr	r3, [r3, #8]
 800204c:	4960      	ldr	r1, [pc, #384]	@ (80021d0 <HAL_RCC_ClockConfig+0x1f0>)
 800204e:	4313      	orrs	r3, r2
 8002050:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f003 0301 	and.w	r3, r3, #1
 800205a:	2b00      	cmp	r3, #0
 800205c:	d04c      	beq.n	80020f8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	2b03      	cmp	r3, #3
 8002064:	d107      	bne.n	8002076 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002066:	4b5a      	ldr	r3, [pc, #360]	@ (80021d0 <HAL_RCC_ClockConfig+0x1f0>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800206e:	2b00      	cmp	r3, #0
 8002070:	d121      	bne.n	80020b6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002072:	2301      	movs	r3, #1
 8002074:	e0a6      	b.n	80021c4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	2b02      	cmp	r3, #2
 800207c:	d107      	bne.n	800208e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800207e:	4b54      	ldr	r3, [pc, #336]	@ (80021d0 <HAL_RCC_ClockConfig+0x1f0>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002086:	2b00      	cmp	r3, #0
 8002088:	d115      	bne.n	80020b6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	e09a      	b.n	80021c4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d107      	bne.n	80020a6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002096:	4b4e      	ldr	r3, [pc, #312]	@ (80021d0 <HAL_RCC_ClockConfig+0x1f0>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f003 0302 	and.w	r3, r3, #2
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d109      	bne.n	80020b6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80020a2:	2301      	movs	r3, #1
 80020a4:	e08e      	b.n	80021c4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80020a6:	4b4a      	ldr	r3, [pc, #296]	@ (80021d0 <HAL_RCC_ClockConfig+0x1f0>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d101      	bne.n	80020b6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80020b2:	2301      	movs	r3, #1
 80020b4:	e086      	b.n	80021c4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80020b6:	4b46      	ldr	r3, [pc, #280]	@ (80021d0 <HAL_RCC_ClockConfig+0x1f0>)
 80020b8:	689b      	ldr	r3, [r3, #8]
 80020ba:	f023 0203 	bic.w	r2, r3, #3
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	4943      	ldr	r1, [pc, #268]	@ (80021d0 <HAL_RCC_ClockConfig+0x1f0>)
 80020c4:	4313      	orrs	r3, r2
 80020c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80020c8:	f7ff f86a 	bl	80011a0 <HAL_GetTick>
 80020cc:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020ce:	e00a      	b.n	80020e6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020d0:	f7ff f866 	bl	80011a0 <HAL_GetTick>
 80020d4:	4602      	mov	r2, r0
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	1ad3      	subs	r3, r2, r3
 80020da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020de:	4293      	cmp	r3, r2
 80020e0:	d901      	bls.n	80020e6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80020e2:	2303      	movs	r3, #3
 80020e4:	e06e      	b.n	80021c4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020e6:	4b3a      	ldr	r3, [pc, #232]	@ (80021d0 <HAL_RCC_ClockConfig+0x1f0>)
 80020e8:	689b      	ldr	r3, [r3, #8]
 80020ea:	f003 020c 	and.w	r2, r3, #12
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	009b      	lsls	r3, r3, #2
 80020f4:	429a      	cmp	r2, r3
 80020f6:	d1eb      	bne.n	80020d0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f003 0302 	and.w	r3, r3, #2
 8002100:	2b00      	cmp	r3, #0
 8002102:	d010      	beq.n	8002126 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	689a      	ldr	r2, [r3, #8]
 8002108:	4b31      	ldr	r3, [pc, #196]	@ (80021d0 <HAL_RCC_ClockConfig+0x1f0>)
 800210a:	689b      	ldr	r3, [r3, #8]
 800210c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002110:	429a      	cmp	r2, r3
 8002112:	d208      	bcs.n	8002126 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002114:	4b2e      	ldr	r3, [pc, #184]	@ (80021d0 <HAL_RCC_ClockConfig+0x1f0>)
 8002116:	689b      	ldr	r3, [r3, #8]
 8002118:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	689b      	ldr	r3, [r3, #8]
 8002120:	492b      	ldr	r1, [pc, #172]	@ (80021d0 <HAL_RCC_ClockConfig+0x1f0>)
 8002122:	4313      	orrs	r3, r2
 8002124:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002126:	4b29      	ldr	r3, [pc, #164]	@ (80021cc <HAL_RCC_ClockConfig+0x1ec>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f003 0307 	and.w	r3, r3, #7
 800212e:	683a      	ldr	r2, [r7, #0]
 8002130:	429a      	cmp	r2, r3
 8002132:	d210      	bcs.n	8002156 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002134:	4b25      	ldr	r3, [pc, #148]	@ (80021cc <HAL_RCC_ClockConfig+0x1ec>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f023 0207 	bic.w	r2, r3, #7
 800213c:	4923      	ldr	r1, [pc, #140]	@ (80021cc <HAL_RCC_ClockConfig+0x1ec>)
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	4313      	orrs	r3, r2
 8002142:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002144:	4b21      	ldr	r3, [pc, #132]	@ (80021cc <HAL_RCC_ClockConfig+0x1ec>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f003 0307 	and.w	r3, r3, #7
 800214c:	683a      	ldr	r2, [r7, #0]
 800214e:	429a      	cmp	r2, r3
 8002150:	d001      	beq.n	8002156 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002152:	2301      	movs	r3, #1
 8002154:	e036      	b.n	80021c4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f003 0304 	and.w	r3, r3, #4
 800215e:	2b00      	cmp	r3, #0
 8002160:	d008      	beq.n	8002174 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002162:	4b1b      	ldr	r3, [pc, #108]	@ (80021d0 <HAL_RCC_ClockConfig+0x1f0>)
 8002164:	689b      	ldr	r3, [r3, #8]
 8002166:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	68db      	ldr	r3, [r3, #12]
 800216e:	4918      	ldr	r1, [pc, #96]	@ (80021d0 <HAL_RCC_ClockConfig+0x1f0>)
 8002170:	4313      	orrs	r3, r2
 8002172:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f003 0308 	and.w	r3, r3, #8
 800217c:	2b00      	cmp	r3, #0
 800217e:	d009      	beq.n	8002194 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002180:	4b13      	ldr	r3, [pc, #76]	@ (80021d0 <HAL_RCC_ClockConfig+0x1f0>)
 8002182:	689b      	ldr	r3, [r3, #8]
 8002184:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	691b      	ldr	r3, [r3, #16]
 800218c:	00db      	lsls	r3, r3, #3
 800218e:	4910      	ldr	r1, [pc, #64]	@ (80021d0 <HAL_RCC_ClockConfig+0x1f0>)
 8002190:	4313      	orrs	r3, r2
 8002192:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002194:	f000 f824 	bl	80021e0 <HAL_RCC_GetSysClockFreq>
 8002198:	4602      	mov	r2, r0
 800219a:	4b0d      	ldr	r3, [pc, #52]	@ (80021d0 <HAL_RCC_ClockConfig+0x1f0>)
 800219c:	689b      	ldr	r3, [r3, #8]
 800219e:	091b      	lsrs	r3, r3, #4
 80021a0:	f003 030f 	and.w	r3, r3, #15
 80021a4:	490b      	ldr	r1, [pc, #44]	@ (80021d4 <HAL_RCC_ClockConfig+0x1f4>)
 80021a6:	5ccb      	ldrb	r3, [r1, r3]
 80021a8:	f003 031f 	and.w	r3, r3, #31
 80021ac:	fa22 f303 	lsr.w	r3, r2, r3
 80021b0:	4a09      	ldr	r2, [pc, #36]	@ (80021d8 <HAL_RCC_ClockConfig+0x1f8>)
 80021b2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80021b4:	4b09      	ldr	r3, [pc, #36]	@ (80021dc <HAL_RCC_ClockConfig+0x1fc>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4618      	mov	r0, r3
 80021ba:	f7fe ffa1 	bl	8001100 <HAL_InitTick>
 80021be:	4603      	mov	r3, r0
 80021c0:	72fb      	strb	r3, [r7, #11]

  return status;
 80021c2:	7afb      	ldrb	r3, [r7, #11]
}
 80021c4:	4618      	mov	r0, r3
 80021c6:	3710      	adds	r7, #16
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bd80      	pop	{r7, pc}
 80021cc:	40022000 	.word	0x40022000
 80021d0:	40021000 	.word	0x40021000
 80021d4:	0800784c 	.word	0x0800784c
 80021d8:	2000000c 	.word	0x2000000c
 80021dc:	20000010 	.word	0x20000010

080021e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b089      	sub	sp, #36	@ 0x24
 80021e4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80021e6:	2300      	movs	r3, #0
 80021e8:	61fb      	str	r3, [r7, #28]
 80021ea:	2300      	movs	r3, #0
 80021ec:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80021ee:	4b3e      	ldr	r3, [pc, #248]	@ (80022e8 <HAL_RCC_GetSysClockFreq+0x108>)
 80021f0:	689b      	ldr	r3, [r3, #8]
 80021f2:	f003 030c 	and.w	r3, r3, #12
 80021f6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80021f8:	4b3b      	ldr	r3, [pc, #236]	@ (80022e8 <HAL_RCC_GetSysClockFreq+0x108>)
 80021fa:	68db      	ldr	r3, [r3, #12]
 80021fc:	f003 0303 	and.w	r3, r3, #3
 8002200:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002202:	693b      	ldr	r3, [r7, #16]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d005      	beq.n	8002214 <HAL_RCC_GetSysClockFreq+0x34>
 8002208:	693b      	ldr	r3, [r7, #16]
 800220a:	2b0c      	cmp	r3, #12
 800220c:	d121      	bne.n	8002252 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	2b01      	cmp	r3, #1
 8002212:	d11e      	bne.n	8002252 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002214:	4b34      	ldr	r3, [pc, #208]	@ (80022e8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f003 0308 	and.w	r3, r3, #8
 800221c:	2b00      	cmp	r3, #0
 800221e:	d107      	bne.n	8002230 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002220:	4b31      	ldr	r3, [pc, #196]	@ (80022e8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002222:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002226:	0a1b      	lsrs	r3, r3, #8
 8002228:	f003 030f 	and.w	r3, r3, #15
 800222c:	61fb      	str	r3, [r7, #28]
 800222e:	e005      	b.n	800223c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002230:	4b2d      	ldr	r3, [pc, #180]	@ (80022e8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	091b      	lsrs	r3, r3, #4
 8002236:	f003 030f 	and.w	r3, r3, #15
 800223a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800223c:	4a2b      	ldr	r2, [pc, #172]	@ (80022ec <HAL_RCC_GetSysClockFreq+0x10c>)
 800223e:	69fb      	ldr	r3, [r7, #28]
 8002240:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002244:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002246:	693b      	ldr	r3, [r7, #16]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d10d      	bne.n	8002268 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800224c:	69fb      	ldr	r3, [r7, #28]
 800224e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002250:	e00a      	b.n	8002268 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002252:	693b      	ldr	r3, [r7, #16]
 8002254:	2b04      	cmp	r3, #4
 8002256:	d102      	bne.n	800225e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002258:	4b25      	ldr	r3, [pc, #148]	@ (80022f0 <HAL_RCC_GetSysClockFreq+0x110>)
 800225a:	61bb      	str	r3, [r7, #24]
 800225c:	e004      	b.n	8002268 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800225e:	693b      	ldr	r3, [r7, #16]
 8002260:	2b08      	cmp	r3, #8
 8002262:	d101      	bne.n	8002268 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002264:	4b23      	ldr	r3, [pc, #140]	@ (80022f4 <HAL_RCC_GetSysClockFreq+0x114>)
 8002266:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002268:	693b      	ldr	r3, [r7, #16]
 800226a:	2b0c      	cmp	r3, #12
 800226c:	d134      	bne.n	80022d8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800226e:	4b1e      	ldr	r3, [pc, #120]	@ (80022e8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002270:	68db      	ldr	r3, [r3, #12]
 8002272:	f003 0303 	and.w	r3, r3, #3
 8002276:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	2b02      	cmp	r3, #2
 800227c:	d003      	beq.n	8002286 <HAL_RCC_GetSysClockFreq+0xa6>
 800227e:	68bb      	ldr	r3, [r7, #8]
 8002280:	2b03      	cmp	r3, #3
 8002282:	d003      	beq.n	800228c <HAL_RCC_GetSysClockFreq+0xac>
 8002284:	e005      	b.n	8002292 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002286:	4b1a      	ldr	r3, [pc, #104]	@ (80022f0 <HAL_RCC_GetSysClockFreq+0x110>)
 8002288:	617b      	str	r3, [r7, #20]
      break;
 800228a:	e005      	b.n	8002298 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800228c:	4b19      	ldr	r3, [pc, #100]	@ (80022f4 <HAL_RCC_GetSysClockFreq+0x114>)
 800228e:	617b      	str	r3, [r7, #20]
      break;
 8002290:	e002      	b.n	8002298 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002292:	69fb      	ldr	r3, [r7, #28]
 8002294:	617b      	str	r3, [r7, #20]
      break;
 8002296:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002298:	4b13      	ldr	r3, [pc, #76]	@ (80022e8 <HAL_RCC_GetSysClockFreq+0x108>)
 800229a:	68db      	ldr	r3, [r3, #12]
 800229c:	091b      	lsrs	r3, r3, #4
 800229e:	f003 0307 	and.w	r3, r3, #7
 80022a2:	3301      	adds	r3, #1
 80022a4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80022a6:	4b10      	ldr	r3, [pc, #64]	@ (80022e8 <HAL_RCC_GetSysClockFreq+0x108>)
 80022a8:	68db      	ldr	r3, [r3, #12]
 80022aa:	0a1b      	lsrs	r3, r3, #8
 80022ac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80022b0:	697a      	ldr	r2, [r7, #20]
 80022b2:	fb03 f202 	mul.w	r2, r3, r2
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80022bc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80022be:	4b0a      	ldr	r3, [pc, #40]	@ (80022e8 <HAL_RCC_GetSysClockFreq+0x108>)
 80022c0:	68db      	ldr	r3, [r3, #12]
 80022c2:	0e5b      	lsrs	r3, r3, #25
 80022c4:	f003 0303 	and.w	r3, r3, #3
 80022c8:	3301      	adds	r3, #1
 80022ca:	005b      	lsls	r3, r3, #1
 80022cc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80022ce:	697a      	ldr	r2, [r7, #20]
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80022d6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80022d8:	69bb      	ldr	r3, [r7, #24]
}
 80022da:	4618      	mov	r0, r3
 80022dc:	3724      	adds	r7, #36	@ 0x24
 80022de:	46bd      	mov	sp, r7
 80022e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e4:	4770      	bx	lr
 80022e6:	bf00      	nop
 80022e8:	40021000 	.word	0x40021000
 80022ec:	08007864 	.word	0x08007864
 80022f0:	00f42400 	.word	0x00f42400
 80022f4:	007a1200 	.word	0x007a1200

080022f8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80022f8:	b480      	push	{r7}
 80022fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80022fc:	4b03      	ldr	r3, [pc, #12]	@ (800230c <HAL_RCC_GetHCLKFreq+0x14>)
 80022fe:	681b      	ldr	r3, [r3, #0]
}
 8002300:	4618      	mov	r0, r3
 8002302:	46bd      	mov	sp, r7
 8002304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002308:	4770      	bx	lr
 800230a:	bf00      	nop
 800230c:	2000000c 	.word	0x2000000c

08002310 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002314:	f7ff fff0 	bl	80022f8 <HAL_RCC_GetHCLKFreq>
 8002318:	4602      	mov	r2, r0
 800231a:	4b06      	ldr	r3, [pc, #24]	@ (8002334 <HAL_RCC_GetPCLK1Freq+0x24>)
 800231c:	689b      	ldr	r3, [r3, #8]
 800231e:	0a1b      	lsrs	r3, r3, #8
 8002320:	f003 0307 	and.w	r3, r3, #7
 8002324:	4904      	ldr	r1, [pc, #16]	@ (8002338 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002326:	5ccb      	ldrb	r3, [r1, r3]
 8002328:	f003 031f 	and.w	r3, r3, #31
 800232c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002330:	4618      	mov	r0, r3
 8002332:	bd80      	pop	{r7, pc}
 8002334:	40021000 	.word	0x40021000
 8002338:	0800785c 	.word	0x0800785c

0800233c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002340:	f7ff ffda 	bl	80022f8 <HAL_RCC_GetHCLKFreq>
 8002344:	4602      	mov	r2, r0
 8002346:	4b06      	ldr	r3, [pc, #24]	@ (8002360 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002348:	689b      	ldr	r3, [r3, #8]
 800234a:	0adb      	lsrs	r3, r3, #11
 800234c:	f003 0307 	and.w	r3, r3, #7
 8002350:	4904      	ldr	r1, [pc, #16]	@ (8002364 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002352:	5ccb      	ldrb	r3, [r1, r3]
 8002354:	f003 031f 	and.w	r3, r3, #31
 8002358:	fa22 f303 	lsr.w	r3, r2, r3
}
 800235c:	4618      	mov	r0, r3
 800235e:	bd80      	pop	{r7, pc}
 8002360:	40021000 	.word	0x40021000
 8002364:	0800785c 	.word	0x0800785c

08002368 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b086      	sub	sp, #24
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002370:	2300      	movs	r3, #0
 8002372:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002374:	4b2a      	ldr	r3, [pc, #168]	@ (8002420 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002376:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002378:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800237c:	2b00      	cmp	r3, #0
 800237e:	d003      	beq.n	8002388 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002380:	f7ff f9ee 	bl	8001760 <HAL_PWREx_GetVoltageRange>
 8002384:	6178      	str	r0, [r7, #20]
 8002386:	e014      	b.n	80023b2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002388:	4b25      	ldr	r3, [pc, #148]	@ (8002420 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800238a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800238c:	4a24      	ldr	r2, [pc, #144]	@ (8002420 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800238e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002392:	6593      	str	r3, [r2, #88]	@ 0x58
 8002394:	4b22      	ldr	r3, [pc, #136]	@ (8002420 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002396:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002398:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800239c:	60fb      	str	r3, [r7, #12]
 800239e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80023a0:	f7ff f9de 	bl	8001760 <HAL_PWREx_GetVoltageRange>
 80023a4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80023a6:	4b1e      	ldr	r3, [pc, #120]	@ (8002420 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80023a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023aa:	4a1d      	ldr	r2, [pc, #116]	@ (8002420 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80023ac:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80023b0:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80023b2:	697b      	ldr	r3, [r7, #20]
 80023b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80023b8:	d10b      	bne.n	80023d2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2b80      	cmp	r3, #128	@ 0x80
 80023be:	d919      	bls.n	80023f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2ba0      	cmp	r3, #160	@ 0xa0
 80023c4:	d902      	bls.n	80023cc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80023c6:	2302      	movs	r3, #2
 80023c8:	613b      	str	r3, [r7, #16]
 80023ca:	e013      	b.n	80023f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80023cc:	2301      	movs	r3, #1
 80023ce:	613b      	str	r3, [r7, #16]
 80023d0:	e010      	b.n	80023f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2b80      	cmp	r3, #128	@ 0x80
 80023d6:	d902      	bls.n	80023de <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80023d8:	2303      	movs	r3, #3
 80023da:	613b      	str	r3, [r7, #16]
 80023dc:	e00a      	b.n	80023f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2b80      	cmp	r3, #128	@ 0x80
 80023e2:	d102      	bne.n	80023ea <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80023e4:	2302      	movs	r3, #2
 80023e6:	613b      	str	r3, [r7, #16]
 80023e8:	e004      	b.n	80023f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2b70      	cmp	r3, #112	@ 0x70
 80023ee:	d101      	bne.n	80023f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80023f0:	2301      	movs	r3, #1
 80023f2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80023f4:	4b0b      	ldr	r3, [pc, #44]	@ (8002424 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f023 0207 	bic.w	r2, r3, #7
 80023fc:	4909      	ldr	r1, [pc, #36]	@ (8002424 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80023fe:	693b      	ldr	r3, [r7, #16]
 8002400:	4313      	orrs	r3, r2
 8002402:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002404:	4b07      	ldr	r3, [pc, #28]	@ (8002424 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f003 0307 	and.w	r3, r3, #7
 800240c:	693a      	ldr	r2, [r7, #16]
 800240e:	429a      	cmp	r2, r3
 8002410:	d001      	beq.n	8002416 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002412:	2301      	movs	r3, #1
 8002414:	e000      	b.n	8002418 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002416:	2300      	movs	r3, #0
}
 8002418:	4618      	mov	r0, r3
 800241a:	3718      	adds	r7, #24
 800241c:	46bd      	mov	sp, r7
 800241e:	bd80      	pop	{r7, pc}
 8002420:	40021000 	.word	0x40021000
 8002424:	40022000 	.word	0x40022000

08002428 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b086      	sub	sp, #24
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002430:	2300      	movs	r3, #0
 8002432:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002434:	2300      	movs	r3, #0
 8002436:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002440:	2b00      	cmp	r3, #0
 8002442:	d041      	beq.n	80024c8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002448:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800244c:	d02a      	beq.n	80024a4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800244e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002452:	d824      	bhi.n	800249e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002454:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002458:	d008      	beq.n	800246c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800245a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800245e:	d81e      	bhi.n	800249e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002460:	2b00      	cmp	r3, #0
 8002462:	d00a      	beq.n	800247a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002464:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002468:	d010      	beq.n	800248c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800246a:	e018      	b.n	800249e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800246c:	4b86      	ldr	r3, [pc, #536]	@ (8002688 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800246e:	68db      	ldr	r3, [r3, #12]
 8002470:	4a85      	ldr	r2, [pc, #532]	@ (8002688 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002472:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002476:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002478:	e015      	b.n	80024a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	3304      	adds	r3, #4
 800247e:	2100      	movs	r1, #0
 8002480:	4618      	mov	r0, r3
 8002482:	f000 fabb 	bl	80029fc <RCCEx_PLLSAI1_Config>
 8002486:	4603      	mov	r3, r0
 8002488:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800248a:	e00c      	b.n	80024a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	3320      	adds	r3, #32
 8002490:	2100      	movs	r1, #0
 8002492:	4618      	mov	r0, r3
 8002494:	f000 fba6 	bl	8002be4 <RCCEx_PLLSAI2_Config>
 8002498:	4603      	mov	r3, r0
 800249a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800249c:	e003      	b.n	80024a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800249e:	2301      	movs	r3, #1
 80024a0:	74fb      	strb	r3, [r7, #19]
      break;
 80024a2:	e000      	b.n	80024a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80024a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80024a6:	7cfb      	ldrb	r3, [r7, #19]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d10b      	bne.n	80024c4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80024ac:	4b76      	ldr	r3, [pc, #472]	@ (8002688 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024b2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80024ba:	4973      	ldr	r1, [pc, #460]	@ (8002688 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024bc:	4313      	orrs	r3, r2
 80024be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80024c2:	e001      	b.n	80024c8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80024c4:	7cfb      	ldrb	r3, [r7, #19]
 80024c6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d041      	beq.n	8002558 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80024d8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80024dc:	d02a      	beq.n	8002534 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80024de:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80024e2:	d824      	bhi.n	800252e <HAL_RCCEx_PeriphCLKConfig+0x106>
 80024e4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80024e8:	d008      	beq.n	80024fc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80024ea:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80024ee:	d81e      	bhi.n	800252e <HAL_RCCEx_PeriphCLKConfig+0x106>
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d00a      	beq.n	800250a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80024f4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80024f8:	d010      	beq.n	800251c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80024fa:	e018      	b.n	800252e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80024fc:	4b62      	ldr	r3, [pc, #392]	@ (8002688 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024fe:	68db      	ldr	r3, [r3, #12]
 8002500:	4a61      	ldr	r2, [pc, #388]	@ (8002688 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002502:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002506:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002508:	e015      	b.n	8002536 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	3304      	adds	r3, #4
 800250e:	2100      	movs	r1, #0
 8002510:	4618      	mov	r0, r3
 8002512:	f000 fa73 	bl	80029fc <RCCEx_PLLSAI1_Config>
 8002516:	4603      	mov	r3, r0
 8002518:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800251a:	e00c      	b.n	8002536 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	3320      	adds	r3, #32
 8002520:	2100      	movs	r1, #0
 8002522:	4618      	mov	r0, r3
 8002524:	f000 fb5e 	bl	8002be4 <RCCEx_PLLSAI2_Config>
 8002528:	4603      	mov	r3, r0
 800252a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800252c:	e003      	b.n	8002536 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800252e:	2301      	movs	r3, #1
 8002530:	74fb      	strb	r3, [r7, #19]
      break;
 8002532:	e000      	b.n	8002536 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002534:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002536:	7cfb      	ldrb	r3, [r7, #19]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d10b      	bne.n	8002554 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800253c:	4b52      	ldr	r3, [pc, #328]	@ (8002688 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800253e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002542:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800254a:	494f      	ldr	r1, [pc, #316]	@ (8002688 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800254c:	4313      	orrs	r3, r2
 800254e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002552:	e001      	b.n	8002558 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002554:	7cfb      	ldrb	r3, [r7, #19]
 8002556:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002560:	2b00      	cmp	r3, #0
 8002562:	f000 80a0 	beq.w	80026a6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002566:	2300      	movs	r3, #0
 8002568:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800256a:	4b47      	ldr	r3, [pc, #284]	@ (8002688 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800256c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800256e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002572:	2b00      	cmp	r3, #0
 8002574:	d101      	bne.n	800257a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002576:	2301      	movs	r3, #1
 8002578:	e000      	b.n	800257c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800257a:	2300      	movs	r3, #0
 800257c:	2b00      	cmp	r3, #0
 800257e:	d00d      	beq.n	800259c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002580:	4b41      	ldr	r3, [pc, #260]	@ (8002688 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002582:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002584:	4a40      	ldr	r2, [pc, #256]	@ (8002688 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002586:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800258a:	6593      	str	r3, [r2, #88]	@ 0x58
 800258c:	4b3e      	ldr	r3, [pc, #248]	@ (8002688 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800258e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002590:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002594:	60bb      	str	r3, [r7, #8]
 8002596:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002598:	2301      	movs	r3, #1
 800259a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800259c:	4b3b      	ldr	r3, [pc, #236]	@ (800268c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a3a      	ldr	r2, [pc, #232]	@ (800268c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80025a2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80025a6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80025a8:	f7fe fdfa 	bl	80011a0 <HAL_GetTick>
 80025ac:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80025ae:	e009      	b.n	80025c4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025b0:	f7fe fdf6 	bl	80011a0 <HAL_GetTick>
 80025b4:	4602      	mov	r2, r0
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	1ad3      	subs	r3, r2, r3
 80025ba:	2b02      	cmp	r3, #2
 80025bc:	d902      	bls.n	80025c4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80025be:	2303      	movs	r3, #3
 80025c0:	74fb      	strb	r3, [r7, #19]
        break;
 80025c2:	e005      	b.n	80025d0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80025c4:	4b31      	ldr	r3, [pc, #196]	@ (800268c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d0ef      	beq.n	80025b0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80025d0:	7cfb      	ldrb	r3, [r7, #19]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d15c      	bne.n	8002690 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80025d6:	4b2c      	ldr	r3, [pc, #176]	@ (8002688 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025dc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80025e0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80025e2:	697b      	ldr	r3, [r7, #20]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d01f      	beq.n	8002628 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80025ee:	697a      	ldr	r2, [r7, #20]
 80025f0:	429a      	cmp	r2, r3
 80025f2:	d019      	beq.n	8002628 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80025f4:	4b24      	ldr	r3, [pc, #144]	@ (8002688 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025fa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80025fe:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002600:	4b21      	ldr	r3, [pc, #132]	@ (8002688 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002602:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002606:	4a20      	ldr	r2, [pc, #128]	@ (8002688 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002608:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800260c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002610:	4b1d      	ldr	r3, [pc, #116]	@ (8002688 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002612:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002616:	4a1c      	ldr	r2, [pc, #112]	@ (8002688 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002618:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800261c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002620:	4a19      	ldr	r2, [pc, #100]	@ (8002688 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002622:	697b      	ldr	r3, [r7, #20]
 8002624:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002628:	697b      	ldr	r3, [r7, #20]
 800262a:	f003 0301 	and.w	r3, r3, #1
 800262e:	2b00      	cmp	r3, #0
 8002630:	d016      	beq.n	8002660 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002632:	f7fe fdb5 	bl	80011a0 <HAL_GetTick>
 8002636:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002638:	e00b      	b.n	8002652 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800263a:	f7fe fdb1 	bl	80011a0 <HAL_GetTick>
 800263e:	4602      	mov	r2, r0
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	1ad3      	subs	r3, r2, r3
 8002644:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002648:	4293      	cmp	r3, r2
 800264a:	d902      	bls.n	8002652 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800264c:	2303      	movs	r3, #3
 800264e:	74fb      	strb	r3, [r7, #19]
            break;
 8002650:	e006      	b.n	8002660 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002652:	4b0d      	ldr	r3, [pc, #52]	@ (8002688 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002654:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002658:	f003 0302 	and.w	r3, r3, #2
 800265c:	2b00      	cmp	r3, #0
 800265e:	d0ec      	beq.n	800263a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002660:	7cfb      	ldrb	r3, [r7, #19]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d10c      	bne.n	8002680 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002666:	4b08      	ldr	r3, [pc, #32]	@ (8002688 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002668:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800266c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002676:	4904      	ldr	r1, [pc, #16]	@ (8002688 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002678:	4313      	orrs	r3, r2
 800267a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800267e:	e009      	b.n	8002694 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002680:	7cfb      	ldrb	r3, [r7, #19]
 8002682:	74bb      	strb	r3, [r7, #18]
 8002684:	e006      	b.n	8002694 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002686:	bf00      	nop
 8002688:	40021000 	.word	0x40021000
 800268c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002690:	7cfb      	ldrb	r3, [r7, #19]
 8002692:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002694:	7c7b      	ldrb	r3, [r7, #17]
 8002696:	2b01      	cmp	r3, #1
 8002698:	d105      	bne.n	80026a6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800269a:	4b9e      	ldr	r3, [pc, #632]	@ (8002914 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800269c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800269e:	4a9d      	ldr	r2, [pc, #628]	@ (8002914 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026a0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80026a4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f003 0301 	and.w	r3, r3, #1
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d00a      	beq.n	80026c8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80026b2:	4b98      	ldr	r3, [pc, #608]	@ (8002914 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026b8:	f023 0203 	bic.w	r2, r3, #3
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026c0:	4994      	ldr	r1, [pc, #592]	@ (8002914 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026c2:	4313      	orrs	r3, r2
 80026c4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f003 0302 	and.w	r3, r3, #2
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d00a      	beq.n	80026ea <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80026d4:	4b8f      	ldr	r3, [pc, #572]	@ (8002914 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026da:	f023 020c 	bic.w	r2, r3, #12
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026e2:	498c      	ldr	r1, [pc, #560]	@ (8002914 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026e4:	4313      	orrs	r3, r2
 80026e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f003 0304 	and.w	r3, r3, #4
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d00a      	beq.n	800270c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80026f6:	4b87      	ldr	r3, [pc, #540]	@ (8002914 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026fc:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002704:	4983      	ldr	r1, [pc, #524]	@ (8002914 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002706:	4313      	orrs	r3, r2
 8002708:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f003 0308 	and.w	r3, r3, #8
 8002714:	2b00      	cmp	r3, #0
 8002716:	d00a      	beq.n	800272e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002718:	4b7e      	ldr	r3, [pc, #504]	@ (8002914 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800271a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800271e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002726:	497b      	ldr	r1, [pc, #492]	@ (8002914 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002728:	4313      	orrs	r3, r2
 800272a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f003 0310 	and.w	r3, r3, #16
 8002736:	2b00      	cmp	r3, #0
 8002738:	d00a      	beq.n	8002750 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800273a:	4b76      	ldr	r3, [pc, #472]	@ (8002914 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800273c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002740:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002748:	4972      	ldr	r1, [pc, #456]	@ (8002914 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800274a:	4313      	orrs	r3, r2
 800274c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f003 0320 	and.w	r3, r3, #32
 8002758:	2b00      	cmp	r3, #0
 800275a:	d00a      	beq.n	8002772 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800275c:	4b6d      	ldr	r3, [pc, #436]	@ (8002914 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800275e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002762:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800276a:	496a      	ldr	r1, [pc, #424]	@ (8002914 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800276c:	4313      	orrs	r3, r2
 800276e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800277a:	2b00      	cmp	r3, #0
 800277c:	d00a      	beq.n	8002794 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800277e:	4b65      	ldr	r3, [pc, #404]	@ (8002914 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002780:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002784:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800278c:	4961      	ldr	r1, [pc, #388]	@ (8002914 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800278e:	4313      	orrs	r3, r2
 8002790:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800279c:	2b00      	cmp	r3, #0
 800279e:	d00a      	beq.n	80027b6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80027a0:	4b5c      	ldr	r3, [pc, #368]	@ (8002914 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027a6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80027ae:	4959      	ldr	r1, [pc, #356]	@ (8002914 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027b0:	4313      	orrs	r3, r2
 80027b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d00a      	beq.n	80027d8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80027c2:	4b54      	ldr	r3, [pc, #336]	@ (8002914 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027c8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80027d0:	4950      	ldr	r1, [pc, #320]	@ (8002914 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027d2:	4313      	orrs	r3, r2
 80027d4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d00a      	beq.n	80027fa <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80027e4:	4b4b      	ldr	r3, [pc, #300]	@ (8002914 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027ea:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027f2:	4948      	ldr	r1, [pc, #288]	@ (8002914 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027f4:	4313      	orrs	r3, r2
 80027f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002802:	2b00      	cmp	r3, #0
 8002804:	d00a      	beq.n	800281c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002806:	4b43      	ldr	r3, [pc, #268]	@ (8002914 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002808:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800280c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002814:	493f      	ldr	r1, [pc, #252]	@ (8002914 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002816:	4313      	orrs	r3, r2
 8002818:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002824:	2b00      	cmp	r3, #0
 8002826:	d028      	beq.n	800287a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002828:	4b3a      	ldr	r3, [pc, #232]	@ (8002914 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800282a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800282e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002836:	4937      	ldr	r1, [pc, #220]	@ (8002914 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002838:	4313      	orrs	r3, r2
 800283a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002842:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002846:	d106      	bne.n	8002856 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002848:	4b32      	ldr	r3, [pc, #200]	@ (8002914 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800284a:	68db      	ldr	r3, [r3, #12]
 800284c:	4a31      	ldr	r2, [pc, #196]	@ (8002914 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800284e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002852:	60d3      	str	r3, [r2, #12]
 8002854:	e011      	b.n	800287a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800285a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800285e:	d10c      	bne.n	800287a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	3304      	adds	r3, #4
 8002864:	2101      	movs	r1, #1
 8002866:	4618      	mov	r0, r3
 8002868:	f000 f8c8 	bl	80029fc <RCCEx_PLLSAI1_Config>
 800286c:	4603      	mov	r3, r0
 800286e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002870:	7cfb      	ldrb	r3, [r7, #19]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d001      	beq.n	800287a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002876:	7cfb      	ldrb	r3, [r7, #19]
 8002878:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002882:	2b00      	cmp	r3, #0
 8002884:	d028      	beq.n	80028d8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002886:	4b23      	ldr	r3, [pc, #140]	@ (8002914 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002888:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800288c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002894:	491f      	ldr	r1, [pc, #124]	@ (8002914 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002896:	4313      	orrs	r3, r2
 8002898:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028a0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80028a4:	d106      	bne.n	80028b4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80028a6:	4b1b      	ldr	r3, [pc, #108]	@ (8002914 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028a8:	68db      	ldr	r3, [r3, #12]
 80028aa:	4a1a      	ldr	r2, [pc, #104]	@ (8002914 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028ac:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80028b0:	60d3      	str	r3, [r2, #12]
 80028b2:	e011      	b.n	80028d8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028b8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80028bc:	d10c      	bne.n	80028d8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	3304      	adds	r3, #4
 80028c2:	2101      	movs	r1, #1
 80028c4:	4618      	mov	r0, r3
 80028c6:	f000 f899 	bl	80029fc <RCCEx_PLLSAI1_Config>
 80028ca:	4603      	mov	r3, r0
 80028cc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80028ce:	7cfb      	ldrb	r3, [r7, #19]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d001      	beq.n	80028d8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80028d4:	7cfb      	ldrb	r3, [r7, #19]
 80028d6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d02b      	beq.n	800293c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80028e4:	4b0b      	ldr	r3, [pc, #44]	@ (8002914 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028ea:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80028f2:	4908      	ldr	r1, [pc, #32]	@ (8002914 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028f4:	4313      	orrs	r3, r2
 80028f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80028fe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002902:	d109      	bne.n	8002918 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002904:	4b03      	ldr	r3, [pc, #12]	@ (8002914 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002906:	68db      	ldr	r3, [r3, #12]
 8002908:	4a02      	ldr	r2, [pc, #8]	@ (8002914 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800290a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800290e:	60d3      	str	r3, [r2, #12]
 8002910:	e014      	b.n	800293c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002912:	bf00      	nop
 8002914:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800291c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002920:	d10c      	bne.n	800293c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	3304      	adds	r3, #4
 8002926:	2101      	movs	r1, #1
 8002928:	4618      	mov	r0, r3
 800292a:	f000 f867 	bl	80029fc <RCCEx_PLLSAI1_Config>
 800292e:	4603      	mov	r3, r0
 8002930:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002932:	7cfb      	ldrb	r3, [r7, #19]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d001      	beq.n	800293c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002938:	7cfb      	ldrb	r3, [r7, #19]
 800293a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002944:	2b00      	cmp	r3, #0
 8002946:	d02f      	beq.n	80029a8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002948:	4b2b      	ldr	r3, [pc, #172]	@ (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800294a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800294e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002956:	4928      	ldr	r1, [pc, #160]	@ (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002958:	4313      	orrs	r3, r2
 800295a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002962:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002966:	d10d      	bne.n	8002984 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	3304      	adds	r3, #4
 800296c:	2102      	movs	r1, #2
 800296e:	4618      	mov	r0, r3
 8002970:	f000 f844 	bl	80029fc <RCCEx_PLLSAI1_Config>
 8002974:	4603      	mov	r3, r0
 8002976:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002978:	7cfb      	ldrb	r3, [r7, #19]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d014      	beq.n	80029a8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800297e:	7cfb      	ldrb	r3, [r7, #19]
 8002980:	74bb      	strb	r3, [r7, #18]
 8002982:	e011      	b.n	80029a8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002988:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800298c:	d10c      	bne.n	80029a8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	3320      	adds	r3, #32
 8002992:	2102      	movs	r1, #2
 8002994:	4618      	mov	r0, r3
 8002996:	f000 f925 	bl	8002be4 <RCCEx_PLLSAI2_Config>
 800299a:	4603      	mov	r3, r0
 800299c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800299e:	7cfb      	ldrb	r3, [r7, #19]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d001      	beq.n	80029a8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80029a4:	7cfb      	ldrb	r3, [r7, #19]
 80029a6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d00a      	beq.n	80029ca <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80029b4:	4b10      	ldr	r3, [pc, #64]	@ (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80029b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029ba:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80029c2:	490d      	ldr	r1, [pc, #52]	@ (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80029c4:	4313      	orrs	r3, r2
 80029c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d00b      	beq.n	80029ee <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80029d6:	4b08      	ldr	r3, [pc, #32]	@ (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80029d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029dc:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80029e6:	4904      	ldr	r1, [pc, #16]	@ (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80029e8:	4313      	orrs	r3, r2
 80029ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80029ee:	7cbb      	ldrb	r3, [r7, #18]
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	3718      	adds	r7, #24
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd80      	pop	{r7, pc}
 80029f8:	40021000 	.word	0x40021000

080029fc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b084      	sub	sp, #16
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
 8002a04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002a06:	2300      	movs	r3, #0
 8002a08:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002a0a:	4b75      	ldr	r3, [pc, #468]	@ (8002be0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a0c:	68db      	ldr	r3, [r3, #12]
 8002a0e:	f003 0303 	and.w	r3, r3, #3
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d018      	beq.n	8002a48 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002a16:	4b72      	ldr	r3, [pc, #456]	@ (8002be0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a18:	68db      	ldr	r3, [r3, #12]
 8002a1a:	f003 0203 	and.w	r2, r3, #3
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	429a      	cmp	r2, r3
 8002a24:	d10d      	bne.n	8002a42 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
       ||
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d009      	beq.n	8002a42 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002a2e:	4b6c      	ldr	r3, [pc, #432]	@ (8002be0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a30:	68db      	ldr	r3, [r3, #12]
 8002a32:	091b      	lsrs	r3, r3, #4
 8002a34:	f003 0307 	and.w	r3, r3, #7
 8002a38:	1c5a      	adds	r2, r3, #1
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	685b      	ldr	r3, [r3, #4]
       ||
 8002a3e:	429a      	cmp	r2, r3
 8002a40:	d047      	beq.n	8002ad2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002a42:	2301      	movs	r3, #1
 8002a44:	73fb      	strb	r3, [r7, #15]
 8002a46:	e044      	b.n	8002ad2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	2b03      	cmp	r3, #3
 8002a4e:	d018      	beq.n	8002a82 <RCCEx_PLLSAI1_Config+0x86>
 8002a50:	2b03      	cmp	r3, #3
 8002a52:	d825      	bhi.n	8002aa0 <RCCEx_PLLSAI1_Config+0xa4>
 8002a54:	2b01      	cmp	r3, #1
 8002a56:	d002      	beq.n	8002a5e <RCCEx_PLLSAI1_Config+0x62>
 8002a58:	2b02      	cmp	r3, #2
 8002a5a:	d009      	beq.n	8002a70 <RCCEx_PLLSAI1_Config+0x74>
 8002a5c:	e020      	b.n	8002aa0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002a5e:	4b60      	ldr	r3, [pc, #384]	@ (8002be0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f003 0302 	and.w	r3, r3, #2
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d11d      	bne.n	8002aa6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a6e:	e01a      	b.n	8002aa6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002a70:	4b5b      	ldr	r3, [pc, #364]	@ (8002be0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d116      	bne.n	8002aaa <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a80:	e013      	b.n	8002aaa <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002a82:	4b57      	ldr	r3, [pc, #348]	@ (8002be0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d10f      	bne.n	8002aae <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002a8e:	4b54      	ldr	r3, [pc, #336]	@ (8002be0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d109      	bne.n	8002aae <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002a9e:	e006      	b.n	8002aae <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	73fb      	strb	r3, [r7, #15]
      break;
 8002aa4:	e004      	b.n	8002ab0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002aa6:	bf00      	nop
 8002aa8:	e002      	b.n	8002ab0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002aaa:	bf00      	nop
 8002aac:	e000      	b.n	8002ab0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002aae:	bf00      	nop
    }

    if(status == HAL_OK)
 8002ab0:	7bfb      	ldrb	r3, [r7, #15]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d10d      	bne.n	8002ad2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002ab6:	4b4a      	ldr	r3, [pc, #296]	@ (8002be0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ab8:	68db      	ldr	r3, [r3, #12]
 8002aba:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6819      	ldr	r1, [r3, #0]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	3b01      	subs	r3, #1
 8002ac8:	011b      	lsls	r3, r3, #4
 8002aca:	430b      	orrs	r3, r1
 8002acc:	4944      	ldr	r1, [pc, #272]	@ (8002be0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002ad2:	7bfb      	ldrb	r3, [r7, #15]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d17d      	bne.n	8002bd4 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002ad8:	4b41      	ldr	r3, [pc, #260]	@ (8002be0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a40      	ldr	r2, [pc, #256]	@ (8002be0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ade:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002ae2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ae4:	f7fe fb5c 	bl	80011a0 <HAL_GetTick>
 8002ae8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002aea:	e009      	b.n	8002b00 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002aec:	f7fe fb58 	bl	80011a0 <HAL_GetTick>
 8002af0:	4602      	mov	r2, r0
 8002af2:	68bb      	ldr	r3, [r7, #8]
 8002af4:	1ad3      	subs	r3, r2, r3
 8002af6:	2b02      	cmp	r3, #2
 8002af8:	d902      	bls.n	8002b00 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002afa:	2303      	movs	r3, #3
 8002afc:	73fb      	strb	r3, [r7, #15]
        break;
 8002afe:	e005      	b.n	8002b0c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002b00:	4b37      	ldr	r3, [pc, #220]	@ (8002be0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d1ef      	bne.n	8002aec <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002b0c:	7bfb      	ldrb	r3, [r7, #15]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d160      	bne.n	8002bd4 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d111      	bne.n	8002b3c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002b18:	4b31      	ldr	r3, [pc, #196]	@ (8002be0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b1a:	691b      	ldr	r3, [r3, #16]
 8002b1c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002b20:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002b24:	687a      	ldr	r2, [r7, #4]
 8002b26:	6892      	ldr	r2, [r2, #8]
 8002b28:	0211      	lsls	r1, r2, #8
 8002b2a:	687a      	ldr	r2, [r7, #4]
 8002b2c:	68d2      	ldr	r2, [r2, #12]
 8002b2e:	0912      	lsrs	r2, r2, #4
 8002b30:	0452      	lsls	r2, r2, #17
 8002b32:	430a      	orrs	r2, r1
 8002b34:	492a      	ldr	r1, [pc, #168]	@ (8002be0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b36:	4313      	orrs	r3, r2
 8002b38:	610b      	str	r3, [r1, #16]
 8002b3a:	e027      	b.n	8002b8c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	2b01      	cmp	r3, #1
 8002b40:	d112      	bne.n	8002b68 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002b42:	4b27      	ldr	r3, [pc, #156]	@ (8002be0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b44:	691b      	ldr	r3, [r3, #16]
 8002b46:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8002b4a:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002b4e:	687a      	ldr	r2, [r7, #4]
 8002b50:	6892      	ldr	r2, [r2, #8]
 8002b52:	0211      	lsls	r1, r2, #8
 8002b54:	687a      	ldr	r2, [r7, #4]
 8002b56:	6912      	ldr	r2, [r2, #16]
 8002b58:	0852      	lsrs	r2, r2, #1
 8002b5a:	3a01      	subs	r2, #1
 8002b5c:	0552      	lsls	r2, r2, #21
 8002b5e:	430a      	orrs	r2, r1
 8002b60:	491f      	ldr	r1, [pc, #124]	@ (8002be0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b62:	4313      	orrs	r3, r2
 8002b64:	610b      	str	r3, [r1, #16]
 8002b66:	e011      	b.n	8002b8c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002b68:	4b1d      	ldr	r3, [pc, #116]	@ (8002be0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b6a:	691b      	ldr	r3, [r3, #16]
 8002b6c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002b70:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002b74:	687a      	ldr	r2, [r7, #4]
 8002b76:	6892      	ldr	r2, [r2, #8]
 8002b78:	0211      	lsls	r1, r2, #8
 8002b7a:	687a      	ldr	r2, [r7, #4]
 8002b7c:	6952      	ldr	r2, [r2, #20]
 8002b7e:	0852      	lsrs	r2, r2, #1
 8002b80:	3a01      	subs	r2, #1
 8002b82:	0652      	lsls	r2, r2, #25
 8002b84:	430a      	orrs	r2, r1
 8002b86:	4916      	ldr	r1, [pc, #88]	@ (8002be0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002b8c:	4b14      	ldr	r3, [pc, #80]	@ (8002be0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a13      	ldr	r2, [pc, #76]	@ (8002be0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b92:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002b96:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b98:	f7fe fb02 	bl	80011a0 <HAL_GetTick>
 8002b9c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002b9e:	e009      	b.n	8002bb4 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002ba0:	f7fe fafe 	bl	80011a0 <HAL_GetTick>
 8002ba4:	4602      	mov	r2, r0
 8002ba6:	68bb      	ldr	r3, [r7, #8]
 8002ba8:	1ad3      	subs	r3, r2, r3
 8002baa:	2b02      	cmp	r3, #2
 8002bac:	d902      	bls.n	8002bb4 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002bae:	2303      	movs	r3, #3
 8002bb0:	73fb      	strb	r3, [r7, #15]
          break;
 8002bb2:	e005      	b.n	8002bc0 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002bb4:	4b0a      	ldr	r3, [pc, #40]	@ (8002be0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d0ef      	beq.n	8002ba0 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002bc0:	7bfb      	ldrb	r3, [r7, #15]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d106      	bne.n	8002bd4 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002bc6:	4b06      	ldr	r3, [pc, #24]	@ (8002be0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bc8:	691a      	ldr	r2, [r3, #16]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	699b      	ldr	r3, [r3, #24]
 8002bce:	4904      	ldr	r1, [pc, #16]	@ (8002be0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002bd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	3710      	adds	r7, #16
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}
 8002bde:	bf00      	nop
 8002be0:	40021000 	.word	0x40021000

08002be4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b084      	sub	sp, #16
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
 8002bec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002bf2:	4b6a      	ldr	r3, [pc, #424]	@ (8002d9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bf4:	68db      	ldr	r3, [r3, #12]
 8002bf6:	f003 0303 	and.w	r3, r3, #3
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d018      	beq.n	8002c30 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002bfe:	4b67      	ldr	r3, [pc, #412]	@ (8002d9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c00:	68db      	ldr	r3, [r3, #12]
 8002c02:	f003 0203 	and.w	r2, r3, #3
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	429a      	cmp	r2, r3
 8002c0c:	d10d      	bne.n	8002c2a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
       ||
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d009      	beq.n	8002c2a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002c16:	4b61      	ldr	r3, [pc, #388]	@ (8002d9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c18:	68db      	ldr	r3, [r3, #12]
 8002c1a:	091b      	lsrs	r3, r3, #4
 8002c1c:	f003 0307 	and.w	r3, r3, #7
 8002c20:	1c5a      	adds	r2, r3, #1
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	685b      	ldr	r3, [r3, #4]
       ||
 8002c26:	429a      	cmp	r2, r3
 8002c28:	d047      	beq.n	8002cba <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	73fb      	strb	r3, [r7, #15]
 8002c2e:	e044      	b.n	8002cba <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	2b03      	cmp	r3, #3
 8002c36:	d018      	beq.n	8002c6a <RCCEx_PLLSAI2_Config+0x86>
 8002c38:	2b03      	cmp	r3, #3
 8002c3a:	d825      	bhi.n	8002c88 <RCCEx_PLLSAI2_Config+0xa4>
 8002c3c:	2b01      	cmp	r3, #1
 8002c3e:	d002      	beq.n	8002c46 <RCCEx_PLLSAI2_Config+0x62>
 8002c40:	2b02      	cmp	r3, #2
 8002c42:	d009      	beq.n	8002c58 <RCCEx_PLLSAI2_Config+0x74>
 8002c44:	e020      	b.n	8002c88 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002c46:	4b55      	ldr	r3, [pc, #340]	@ (8002d9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f003 0302 	and.w	r3, r3, #2
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d11d      	bne.n	8002c8e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002c52:	2301      	movs	r3, #1
 8002c54:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c56:	e01a      	b.n	8002c8e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002c58:	4b50      	ldr	r3, [pc, #320]	@ (8002d9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d116      	bne.n	8002c92 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002c64:	2301      	movs	r3, #1
 8002c66:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c68:	e013      	b.n	8002c92 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002c6a:	4b4c      	ldr	r3, [pc, #304]	@ (8002d9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d10f      	bne.n	8002c96 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002c76:	4b49      	ldr	r3, [pc, #292]	@ (8002d9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d109      	bne.n	8002c96 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
 8002c84:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002c86:	e006      	b.n	8002c96 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002c88:	2301      	movs	r3, #1
 8002c8a:	73fb      	strb	r3, [r7, #15]
      break;
 8002c8c:	e004      	b.n	8002c98 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002c8e:	bf00      	nop
 8002c90:	e002      	b.n	8002c98 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002c92:	bf00      	nop
 8002c94:	e000      	b.n	8002c98 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002c96:	bf00      	nop
    }

    if(status == HAL_OK)
 8002c98:	7bfb      	ldrb	r3, [r7, #15]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d10d      	bne.n	8002cba <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002c9e:	4b3f      	ldr	r3, [pc, #252]	@ (8002d9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ca0:	68db      	ldr	r3, [r3, #12]
 8002ca2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6819      	ldr	r1, [r3, #0]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	3b01      	subs	r3, #1
 8002cb0:	011b      	lsls	r3, r3, #4
 8002cb2:	430b      	orrs	r3, r1
 8002cb4:	4939      	ldr	r1, [pc, #228]	@ (8002d9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002cba:	7bfb      	ldrb	r3, [r7, #15]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d167      	bne.n	8002d90 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002cc0:	4b36      	ldr	r3, [pc, #216]	@ (8002d9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a35      	ldr	r2, [pc, #212]	@ (8002d9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cc6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002cca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ccc:	f7fe fa68 	bl	80011a0 <HAL_GetTick>
 8002cd0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002cd2:	e009      	b.n	8002ce8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002cd4:	f7fe fa64 	bl	80011a0 <HAL_GetTick>
 8002cd8:	4602      	mov	r2, r0
 8002cda:	68bb      	ldr	r3, [r7, #8]
 8002cdc:	1ad3      	subs	r3, r2, r3
 8002cde:	2b02      	cmp	r3, #2
 8002ce0:	d902      	bls.n	8002ce8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002ce2:	2303      	movs	r3, #3
 8002ce4:	73fb      	strb	r3, [r7, #15]
        break;
 8002ce6:	e005      	b.n	8002cf4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002ce8:	4b2c      	ldr	r3, [pc, #176]	@ (8002d9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d1ef      	bne.n	8002cd4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002cf4:	7bfb      	ldrb	r3, [r7, #15]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d14a      	bne.n	8002d90 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d111      	bne.n	8002d24 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002d00:	4b26      	ldr	r3, [pc, #152]	@ (8002d9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d02:	695b      	ldr	r3, [r3, #20]
 8002d04:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002d08:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002d0c:	687a      	ldr	r2, [r7, #4]
 8002d0e:	6892      	ldr	r2, [r2, #8]
 8002d10:	0211      	lsls	r1, r2, #8
 8002d12:	687a      	ldr	r2, [r7, #4]
 8002d14:	68d2      	ldr	r2, [r2, #12]
 8002d16:	0912      	lsrs	r2, r2, #4
 8002d18:	0452      	lsls	r2, r2, #17
 8002d1a:	430a      	orrs	r2, r1
 8002d1c:	491f      	ldr	r1, [pc, #124]	@ (8002d9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	614b      	str	r3, [r1, #20]
 8002d22:	e011      	b.n	8002d48 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002d24:	4b1d      	ldr	r3, [pc, #116]	@ (8002d9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d26:	695b      	ldr	r3, [r3, #20]
 8002d28:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002d2c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002d30:	687a      	ldr	r2, [r7, #4]
 8002d32:	6892      	ldr	r2, [r2, #8]
 8002d34:	0211      	lsls	r1, r2, #8
 8002d36:	687a      	ldr	r2, [r7, #4]
 8002d38:	6912      	ldr	r2, [r2, #16]
 8002d3a:	0852      	lsrs	r2, r2, #1
 8002d3c:	3a01      	subs	r2, #1
 8002d3e:	0652      	lsls	r2, r2, #25
 8002d40:	430a      	orrs	r2, r1
 8002d42:	4916      	ldr	r1, [pc, #88]	@ (8002d9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d44:	4313      	orrs	r3, r2
 8002d46:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002d48:	4b14      	ldr	r3, [pc, #80]	@ (8002d9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a13      	ldr	r2, [pc, #76]	@ (8002d9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d4e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d52:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d54:	f7fe fa24 	bl	80011a0 <HAL_GetTick>
 8002d58:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002d5a:	e009      	b.n	8002d70 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002d5c:	f7fe fa20 	bl	80011a0 <HAL_GetTick>
 8002d60:	4602      	mov	r2, r0
 8002d62:	68bb      	ldr	r3, [r7, #8]
 8002d64:	1ad3      	subs	r3, r2, r3
 8002d66:	2b02      	cmp	r3, #2
 8002d68:	d902      	bls.n	8002d70 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002d6a:	2303      	movs	r3, #3
 8002d6c:	73fb      	strb	r3, [r7, #15]
          break;
 8002d6e:	e005      	b.n	8002d7c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002d70:	4b0a      	ldr	r3, [pc, #40]	@ (8002d9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d0ef      	beq.n	8002d5c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002d7c:	7bfb      	ldrb	r3, [r7, #15]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d106      	bne.n	8002d90 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002d82:	4b06      	ldr	r3, [pc, #24]	@ (8002d9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d84:	695a      	ldr	r2, [r3, #20]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	695b      	ldr	r3, [r3, #20]
 8002d8a:	4904      	ldr	r1, [pc, #16]	@ (8002d9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002d90:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d92:	4618      	mov	r0, r3
 8002d94:	3710      	adds	r7, #16
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}
 8002d9a:	bf00      	nop
 8002d9c:	40021000 	.word	0x40021000

08002da0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b084      	sub	sp, #16
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d101      	bne.n	8002db2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002dae:	2301      	movs	r3, #1
 8002db0:	e095      	b.n	8002ede <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d108      	bne.n	8002dcc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002dc2:	d009      	beq.n	8002dd8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	61da      	str	r2, [r3, #28]
 8002dca:	e005      	b.n	8002dd8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2200      	movs	r2, #0
 8002dd0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002de4:	b2db      	uxtb	r3, r3
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d106      	bne.n	8002df8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2200      	movs	r2, #0
 8002dee:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002df2:	6878      	ldr	r0, [r7, #4]
 8002df4:	f7fd ff86 	bl	8000d04 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2202      	movs	r2, #2
 8002dfc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	681a      	ldr	r2, [r3, #0]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002e0e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	68db      	ldr	r3, [r3, #12]
 8002e14:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002e18:	d902      	bls.n	8002e20 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	60fb      	str	r3, [r7, #12]
 8002e1e:	e002      	b.n	8002e26 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002e20:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002e24:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	68db      	ldr	r3, [r3, #12]
 8002e2a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8002e2e:	d007      	beq.n	8002e40 <HAL_SPI_Init+0xa0>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	68db      	ldr	r3, [r3, #12]
 8002e34:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002e38:	d002      	beq.n	8002e40 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	689b      	ldr	r3, [r3, #8]
 8002e4c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002e50:	431a      	orrs	r2, r3
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	691b      	ldr	r3, [r3, #16]
 8002e56:	f003 0302 	and.w	r3, r3, #2
 8002e5a:	431a      	orrs	r2, r3
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	695b      	ldr	r3, [r3, #20]
 8002e60:	f003 0301 	and.w	r3, r3, #1
 8002e64:	431a      	orrs	r2, r3
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	699b      	ldr	r3, [r3, #24]
 8002e6a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002e6e:	431a      	orrs	r2, r3
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	69db      	ldr	r3, [r3, #28]
 8002e74:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002e78:	431a      	orrs	r2, r3
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6a1b      	ldr	r3, [r3, #32]
 8002e7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e82:	ea42 0103 	orr.w	r1, r2, r3
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e8a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	430a      	orrs	r2, r1
 8002e94:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	699b      	ldr	r3, [r3, #24]
 8002e9a:	0c1b      	lsrs	r3, r3, #16
 8002e9c:	f003 0204 	and.w	r2, r3, #4
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ea4:	f003 0310 	and.w	r3, r3, #16
 8002ea8:	431a      	orrs	r2, r3
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002eae:	f003 0308 	and.w	r3, r3, #8
 8002eb2:	431a      	orrs	r2, r3
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	68db      	ldr	r3, [r3, #12]
 8002eb8:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8002ebc:	ea42 0103 	orr.w	r1, r2, r3
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	430a      	orrs	r2, r1
 8002ecc:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2201      	movs	r2, #1
 8002ed8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8002edc:	2300      	movs	r3, #0
}
 8002ede:	4618      	mov	r0, r3
 8002ee0:	3710      	adds	r7, #16
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}

08002ee6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ee6:	b580      	push	{r7, lr}
 8002ee8:	b088      	sub	sp, #32
 8002eea:	af00      	add	r7, sp, #0
 8002eec:	60f8      	str	r0, [r7, #12]
 8002eee:	60b9      	str	r1, [r7, #8]
 8002ef0:	603b      	str	r3, [r7, #0]
 8002ef2:	4613      	mov	r3, r2
 8002ef4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002f00:	2b01      	cmp	r3, #1
 8002f02:	d101      	bne.n	8002f08 <HAL_SPI_Transmit+0x22>
 8002f04:	2302      	movs	r3, #2
 8002f06:	e15f      	b.n	80031c8 <HAL_SPI_Transmit+0x2e2>
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	2201      	movs	r2, #1
 8002f0c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002f10:	f7fe f946 	bl	80011a0 <HAL_GetTick>
 8002f14:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002f16:	88fb      	ldrh	r3, [r7, #6]
 8002f18:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002f20:	b2db      	uxtb	r3, r3
 8002f22:	2b01      	cmp	r3, #1
 8002f24:	d002      	beq.n	8002f2c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002f26:	2302      	movs	r3, #2
 8002f28:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002f2a:	e148      	b.n	80031be <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8002f2c:	68bb      	ldr	r3, [r7, #8]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d002      	beq.n	8002f38 <HAL_SPI_Transmit+0x52>
 8002f32:	88fb      	ldrh	r3, [r7, #6]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d102      	bne.n	8002f3e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002f3c:	e13f      	b.n	80031be <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	2203      	movs	r2, #3
 8002f42:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	2200      	movs	r2, #0
 8002f4a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	68ba      	ldr	r2, [r7, #8]
 8002f50:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	88fa      	ldrh	r2, [r7, #6]
 8002f56:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	88fa      	ldrh	r2, [r7, #6]
 8002f5c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	2200      	movs	r2, #0
 8002f62:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	2200      	movs	r2, #0
 8002f68:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	2200      	movs	r2, #0
 8002f78:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	689b      	ldr	r3, [r3, #8]
 8002f84:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002f88:	d10f      	bne.n	8002faa <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	681a      	ldr	r2, [r3, #0]
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002f98:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	681a      	ldr	r2, [r3, #0]
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002fa8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002fb4:	2b40      	cmp	r3, #64	@ 0x40
 8002fb6:	d007      	beq.n	8002fc8 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	681a      	ldr	r2, [r3, #0]
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002fc6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	68db      	ldr	r3, [r3, #12]
 8002fcc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002fd0:	d94f      	bls.n	8003072 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d002      	beq.n	8002fe0 <HAL_SPI_Transmit+0xfa>
 8002fda:	8afb      	ldrh	r3, [r7, #22]
 8002fdc:	2b01      	cmp	r3, #1
 8002fde:	d142      	bne.n	8003066 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fe4:	881a      	ldrh	r2, [r3, #0]
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ff0:	1c9a      	adds	r2, r3, #2
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002ffa:	b29b      	uxth	r3, r3
 8002ffc:	3b01      	subs	r3, #1
 8002ffe:	b29a      	uxth	r2, r3
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003004:	e02f      	b.n	8003066 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	689b      	ldr	r3, [r3, #8]
 800300c:	f003 0302 	and.w	r3, r3, #2
 8003010:	2b02      	cmp	r3, #2
 8003012:	d112      	bne.n	800303a <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003018:	881a      	ldrh	r2, [r3, #0]
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003024:	1c9a      	adds	r2, r3, #2
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800302e:	b29b      	uxth	r3, r3
 8003030:	3b01      	subs	r3, #1
 8003032:	b29a      	uxth	r2, r3
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003038:	e015      	b.n	8003066 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800303a:	f7fe f8b1 	bl	80011a0 <HAL_GetTick>
 800303e:	4602      	mov	r2, r0
 8003040:	69bb      	ldr	r3, [r7, #24]
 8003042:	1ad3      	subs	r3, r2, r3
 8003044:	683a      	ldr	r2, [r7, #0]
 8003046:	429a      	cmp	r2, r3
 8003048:	d803      	bhi.n	8003052 <HAL_SPI_Transmit+0x16c>
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003050:	d102      	bne.n	8003058 <HAL_SPI_Transmit+0x172>
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d106      	bne.n	8003066 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8003058:	2303      	movs	r3, #3
 800305a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	2201      	movs	r2, #1
 8003060:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8003064:	e0ab      	b.n	80031be <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800306a:	b29b      	uxth	r3, r3
 800306c:	2b00      	cmp	r3, #0
 800306e:	d1ca      	bne.n	8003006 <HAL_SPI_Transmit+0x120>
 8003070:	e080      	b.n	8003174 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d002      	beq.n	8003080 <HAL_SPI_Transmit+0x19a>
 800307a:	8afb      	ldrh	r3, [r7, #22]
 800307c:	2b01      	cmp	r3, #1
 800307e:	d174      	bne.n	800316a <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003084:	b29b      	uxth	r3, r3
 8003086:	2b01      	cmp	r3, #1
 8003088:	d912      	bls.n	80030b0 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800308e:	881a      	ldrh	r2, [r3, #0]
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800309a:	1c9a      	adds	r2, r3, #2
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80030a4:	b29b      	uxth	r3, r3
 80030a6:	3b02      	subs	r3, #2
 80030a8:	b29a      	uxth	r2, r3
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80030ae:	e05c      	b.n	800316a <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	330c      	adds	r3, #12
 80030ba:	7812      	ldrb	r2, [r2, #0]
 80030bc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030c2:	1c5a      	adds	r2, r3, #1
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80030cc:	b29b      	uxth	r3, r3
 80030ce:	3b01      	subs	r3, #1
 80030d0:	b29a      	uxth	r2, r3
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80030d6:	e048      	b.n	800316a <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	689b      	ldr	r3, [r3, #8]
 80030de:	f003 0302 	and.w	r3, r3, #2
 80030e2:	2b02      	cmp	r3, #2
 80030e4:	d12b      	bne.n	800313e <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80030ea:	b29b      	uxth	r3, r3
 80030ec:	2b01      	cmp	r3, #1
 80030ee:	d912      	bls.n	8003116 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030f4:	881a      	ldrh	r2, [r3, #0]
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003100:	1c9a      	adds	r2, r3, #2
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800310a:	b29b      	uxth	r3, r3
 800310c:	3b02      	subs	r3, #2
 800310e:	b29a      	uxth	r2, r3
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003114:	e029      	b.n	800316a <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	330c      	adds	r3, #12
 8003120:	7812      	ldrb	r2, [r2, #0]
 8003122:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003128:	1c5a      	adds	r2, r3, #1
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003132:	b29b      	uxth	r3, r3
 8003134:	3b01      	subs	r3, #1
 8003136:	b29a      	uxth	r2, r3
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800313c:	e015      	b.n	800316a <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800313e:	f7fe f82f 	bl	80011a0 <HAL_GetTick>
 8003142:	4602      	mov	r2, r0
 8003144:	69bb      	ldr	r3, [r7, #24]
 8003146:	1ad3      	subs	r3, r2, r3
 8003148:	683a      	ldr	r2, [r7, #0]
 800314a:	429a      	cmp	r2, r3
 800314c:	d803      	bhi.n	8003156 <HAL_SPI_Transmit+0x270>
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003154:	d102      	bne.n	800315c <HAL_SPI_Transmit+0x276>
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d106      	bne.n	800316a <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 800315c:	2303      	movs	r3, #3
 800315e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	2201      	movs	r2, #1
 8003164:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8003168:	e029      	b.n	80031be <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800316e:	b29b      	uxth	r3, r3
 8003170:	2b00      	cmp	r3, #0
 8003172:	d1b1      	bne.n	80030d8 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003174:	69ba      	ldr	r2, [r7, #24]
 8003176:	6839      	ldr	r1, [r7, #0]
 8003178:	68f8      	ldr	r0, [r7, #12]
 800317a:	f000 fcf9 	bl	8003b70 <SPI_EndRxTxTransaction>
 800317e:	4603      	mov	r3, r0
 8003180:	2b00      	cmp	r3, #0
 8003182:	d002      	beq.n	800318a <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	2220      	movs	r2, #32
 8003188:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	689b      	ldr	r3, [r3, #8]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d10a      	bne.n	80031a8 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003192:	2300      	movs	r3, #0
 8003194:	613b      	str	r3, [r7, #16]
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	68db      	ldr	r3, [r3, #12]
 800319c:	613b      	str	r3, [r7, #16]
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	689b      	ldr	r3, [r3, #8]
 80031a4:	613b      	str	r3, [r7, #16]
 80031a6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d002      	beq.n	80031b6 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 80031b0:	2301      	movs	r3, #1
 80031b2:	77fb      	strb	r3, [r7, #31]
 80031b4:	e003      	b.n	80031be <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	2201      	movs	r2, #1
 80031ba:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	2200      	movs	r2, #0
 80031c2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 80031c6:	7ffb      	ldrb	r3, [r7, #31]
}
 80031c8:	4618      	mov	r0, r3
 80031ca:	3720      	adds	r7, #32
 80031cc:	46bd      	mov	sp, r7
 80031ce:	bd80      	pop	{r7, pc}

080031d0 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b088      	sub	sp, #32
 80031d4:	af02      	add	r7, sp, #8
 80031d6:	60f8      	str	r0, [r7, #12]
 80031d8:	60b9      	str	r1, [r7, #8]
 80031da:	603b      	str	r3, [r7, #0]
 80031dc:	4613      	mov	r3, r2
 80031de:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80031e0:	2300      	movs	r3, #0
 80031e2:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80031ea:	b2db      	uxtb	r3, r3
 80031ec:	2b01      	cmp	r3, #1
 80031ee:	d002      	beq.n	80031f6 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 80031f0:	2302      	movs	r3, #2
 80031f2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80031f4:	e11a      	b.n	800342c <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80031fe:	d112      	bne.n	8003226 <HAL_SPI_Receive+0x56>
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	689b      	ldr	r3, [r3, #8]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d10e      	bne.n	8003226 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	2204      	movs	r2, #4
 800320c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003210:	88fa      	ldrh	r2, [r7, #6]
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	9300      	str	r3, [sp, #0]
 8003216:	4613      	mov	r3, r2
 8003218:	68ba      	ldr	r2, [r7, #8]
 800321a:	68b9      	ldr	r1, [r7, #8]
 800321c:	68f8      	ldr	r0, [r7, #12]
 800321e:	f000 f90e 	bl	800343e <HAL_SPI_TransmitReceive>
 8003222:	4603      	mov	r3, r0
 8003224:	e107      	b.n	8003436 <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800322c:	2b01      	cmp	r3, #1
 800322e:	d101      	bne.n	8003234 <HAL_SPI_Receive+0x64>
 8003230:	2302      	movs	r3, #2
 8003232:	e100      	b.n	8003436 <HAL_SPI_Receive+0x266>
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	2201      	movs	r2, #1
 8003238:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800323c:	f7fd ffb0 	bl	80011a0 <HAL_GetTick>
 8003240:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8003242:	68bb      	ldr	r3, [r7, #8]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d002      	beq.n	800324e <HAL_SPI_Receive+0x7e>
 8003248:	88fb      	ldrh	r3, [r7, #6]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d102      	bne.n	8003254 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800324e:	2301      	movs	r3, #1
 8003250:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003252:	e0eb      	b.n	800342c <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	2204      	movs	r2, #4
 8003258:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	2200      	movs	r2, #0
 8003260:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	68ba      	ldr	r2, [r7, #8]
 8003266:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	88fa      	ldrh	r2, [r7, #6]
 800326c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	88fa      	ldrh	r2, [r7, #6]
 8003274:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	2200      	movs	r2, #0
 800327c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	2200      	movs	r2, #0
 8003282:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	2200      	movs	r2, #0
 8003288:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	2200      	movs	r2, #0
 800328e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	2200      	movs	r2, #0
 8003294:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	68db      	ldr	r3, [r3, #12]
 800329a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800329e:	d908      	bls.n	80032b2 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	685a      	ldr	r2, [r3, #4]
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80032ae:	605a      	str	r2, [r3, #4]
 80032b0:	e007      	b.n	80032c2 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	685a      	ldr	r2, [r3, #4]
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80032c0:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	689b      	ldr	r3, [r3, #8]
 80032c6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80032ca:	d10f      	bne.n	80032ec <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	681a      	ldr	r2, [r3, #0]
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80032da:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	681a      	ldr	r2, [r3, #0]
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80032ea:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032f6:	2b40      	cmp	r3, #64	@ 0x40
 80032f8:	d007      	beq.n	800330a <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	681a      	ldr	r2, [r3, #0]
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003308:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	68db      	ldr	r3, [r3, #12]
 800330e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003312:	d86f      	bhi.n	80033f4 <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003314:	e034      	b.n	8003380 <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	689b      	ldr	r3, [r3, #8]
 800331c:	f003 0301 	and.w	r3, r3, #1
 8003320:	2b01      	cmp	r3, #1
 8003322:	d117      	bne.n	8003354 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f103 020c 	add.w	r2, r3, #12
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003330:	7812      	ldrb	r2, [r2, #0]
 8003332:	b2d2      	uxtb	r2, r2
 8003334:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800333a:	1c5a      	adds	r2, r3, #1
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003346:	b29b      	uxth	r3, r3
 8003348:	3b01      	subs	r3, #1
 800334a:	b29a      	uxth	r2, r3
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8003352:	e015      	b.n	8003380 <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003354:	f7fd ff24 	bl	80011a0 <HAL_GetTick>
 8003358:	4602      	mov	r2, r0
 800335a:	693b      	ldr	r3, [r7, #16]
 800335c:	1ad3      	subs	r3, r2, r3
 800335e:	683a      	ldr	r2, [r7, #0]
 8003360:	429a      	cmp	r2, r3
 8003362:	d803      	bhi.n	800336c <HAL_SPI_Receive+0x19c>
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800336a:	d102      	bne.n	8003372 <HAL_SPI_Receive+0x1a2>
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d106      	bne.n	8003380 <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 8003372:	2303      	movs	r3, #3
 8003374:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	2201      	movs	r2, #1
 800337a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 800337e:	e055      	b.n	800342c <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003386:	b29b      	uxth	r3, r3
 8003388:	2b00      	cmp	r3, #0
 800338a:	d1c4      	bne.n	8003316 <HAL_SPI_Receive+0x146>
 800338c:	e038      	b.n	8003400 <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	689b      	ldr	r3, [r3, #8]
 8003394:	f003 0301 	and.w	r3, r3, #1
 8003398:	2b01      	cmp	r3, #1
 800339a:	d115      	bne.n	80033c8 <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	68da      	ldr	r2, [r3, #12]
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033a6:	b292      	uxth	r2, r2
 80033a8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033ae:	1c9a      	adds	r2, r3, #2
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80033ba:	b29b      	uxth	r3, r3
 80033bc:	3b01      	subs	r3, #1
 80033be:	b29a      	uxth	r2, r3
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 80033c6:	e015      	b.n	80033f4 <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80033c8:	f7fd feea 	bl	80011a0 <HAL_GetTick>
 80033cc:	4602      	mov	r2, r0
 80033ce:	693b      	ldr	r3, [r7, #16]
 80033d0:	1ad3      	subs	r3, r2, r3
 80033d2:	683a      	ldr	r2, [r7, #0]
 80033d4:	429a      	cmp	r2, r3
 80033d6:	d803      	bhi.n	80033e0 <HAL_SPI_Receive+0x210>
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80033de:	d102      	bne.n	80033e6 <HAL_SPI_Receive+0x216>
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d106      	bne.n	80033f4 <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 80033e6:	2303      	movs	r3, #3
 80033e8:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	2201      	movs	r2, #1
 80033ee:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 80033f2:	e01b      	b.n	800342c <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80033fa:	b29b      	uxth	r3, r3
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d1c6      	bne.n	800338e <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003400:	693a      	ldr	r2, [r7, #16]
 8003402:	6839      	ldr	r1, [r7, #0]
 8003404:	68f8      	ldr	r0, [r7, #12]
 8003406:	f000 fb5b 	bl	8003ac0 <SPI_EndRxTransaction>
 800340a:	4603      	mov	r3, r0
 800340c:	2b00      	cmp	r3, #0
 800340e:	d002      	beq.n	8003416 <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	2220      	movs	r2, #32
 8003414:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800341a:	2b00      	cmp	r3, #0
 800341c:	d002      	beq.n	8003424 <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 800341e:	2301      	movs	r3, #1
 8003420:	75fb      	strb	r3, [r7, #23]
 8003422:	e003      	b.n	800342c <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	2201      	movs	r2, #1
 8003428:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	2200      	movs	r2, #0
 8003430:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8003434:	7dfb      	ldrb	r3, [r7, #23]
}
 8003436:	4618      	mov	r0, r3
 8003438:	3718      	adds	r7, #24
 800343a:	46bd      	mov	sp, r7
 800343c:	bd80      	pop	{r7, pc}

0800343e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800343e:	b580      	push	{r7, lr}
 8003440:	b08a      	sub	sp, #40	@ 0x28
 8003442:	af00      	add	r7, sp, #0
 8003444:	60f8      	str	r0, [r7, #12]
 8003446:	60b9      	str	r1, [r7, #8]
 8003448:	607a      	str	r2, [r7, #4]
 800344a:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800344c:	2301      	movs	r3, #1
 800344e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003450:	2300      	movs	r3, #0
 8003452:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800345c:	2b01      	cmp	r3, #1
 800345e:	d101      	bne.n	8003464 <HAL_SPI_TransmitReceive+0x26>
 8003460:	2302      	movs	r3, #2
 8003462:	e20a      	b.n	800387a <HAL_SPI_TransmitReceive+0x43c>
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	2201      	movs	r2, #1
 8003468:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800346c:	f7fd fe98 	bl	80011a0 <HAL_GetTick>
 8003470:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003478:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8003480:	887b      	ldrh	r3, [r7, #2]
 8003482:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8003484:	887b      	ldrh	r3, [r7, #2]
 8003486:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003488:	7efb      	ldrb	r3, [r7, #27]
 800348a:	2b01      	cmp	r3, #1
 800348c:	d00e      	beq.n	80034ac <HAL_SPI_TransmitReceive+0x6e>
 800348e:	697b      	ldr	r3, [r7, #20]
 8003490:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003494:	d106      	bne.n	80034a4 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	689b      	ldr	r3, [r3, #8]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d102      	bne.n	80034a4 <HAL_SPI_TransmitReceive+0x66>
 800349e:	7efb      	ldrb	r3, [r7, #27]
 80034a0:	2b04      	cmp	r3, #4
 80034a2:	d003      	beq.n	80034ac <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80034a4:	2302      	movs	r3, #2
 80034a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 80034aa:	e1e0      	b.n	800386e <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80034ac:	68bb      	ldr	r3, [r7, #8]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d005      	beq.n	80034be <HAL_SPI_TransmitReceive+0x80>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d002      	beq.n	80034be <HAL_SPI_TransmitReceive+0x80>
 80034b8:	887b      	ldrh	r3, [r7, #2]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d103      	bne.n	80034c6 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80034be:	2301      	movs	r3, #1
 80034c0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 80034c4:	e1d3      	b.n	800386e <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80034cc:	b2db      	uxtb	r3, r3
 80034ce:	2b04      	cmp	r3, #4
 80034d0:	d003      	beq.n	80034da <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	2205      	movs	r2, #5
 80034d6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	2200      	movs	r2, #0
 80034de:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	687a      	ldr	r2, [r7, #4]
 80034e4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	887a      	ldrh	r2, [r7, #2]
 80034ea:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	887a      	ldrh	r2, [r7, #2]
 80034f2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	68ba      	ldr	r2, [r7, #8]
 80034fa:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	887a      	ldrh	r2, [r7, #2]
 8003500:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	887a      	ldrh	r2, [r7, #2]
 8003506:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	2200      	movs	r2, #0
 800350c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	2200      	movs	r2, #0
 8003512:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	68db      	ldr	r3, [r3, #12]
 8003518:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800351c:	d802      	bhi.n	8003524 <HAL_SPI_TransmitReceive+0xe6>
 800351e:	8a3b      	ldrh	r3, [r7, #16]
 8003520:	2b01      	cmp	r3, #1
 8003522:	d908      	bls.n	8003536 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	685a      	ldr	r2, [r3, #4]
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003532:	605a      	str	r2, [r3, #4]
 8003534:	e007      	b.n	8003546 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	685a      	ldr	r2, [r3, #4]
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003544:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003550:	2b40      	cmp	r3, #64	@ 0x40
 8003552:	d007      	beq.n	8003564 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	681a      	ldr	r2, [r3, #0]
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003562:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	68db      	ldr	r3, [r3, #12]
 8003568:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800356c:	f240 8081 	bls.w	8003672 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d002      	beq.n	800357e <HAL_SPI_TransmitReceive+0x140>
 8003578:	8a7b      	ldrh	r3, [r7, #18]
 800357a:	2b01      	cmp	r3, #1
 800357c:	d16d      	bne.n	800365a <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003582:	881a      	ldrh	r2, [r3, #0]
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800358e:	1c9a      	adds	r2, r3, #2
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003598:	b29b      	uxth	r3, r3
 800359a:	3b01      	subs	r3, #1
 800359c:	b29a      	uxth	r2, r3
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80035a2:	e05a      	b.n	800365a <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	689b      	ldr	r3, [r3, #8]
 80035aa:	f003 0302 	and.w	r3, r3, #2
 80035ae:	2b02      	cmp	r3, #2
 80035b0:	d11b      	bne.n	80035ea <HAL_SPI_TransmitReceive+0x1ac>
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80035b6:	b29b      	uxth	r3, r3
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d016      	beq.n	80035ea <HAL_SPI_TransmitReceive+0x1ac>
 80035bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035be:	2b01      	cmp	r3, #1
 80035c0:	d113      	bne.n	80035ea <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035c6:	881a      	ldrh	r2, [r3, #0]
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035d2:	1c9a      	adds	r2, r3, #2
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80035dc:	b29b      	uxth	r3, r3
 80035de:	3b01      	subs	r3, #1
 80035e0:	b29a      	uxth	r2, r3
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80035e6:	2300      	movs	r3, #0
 80035e8:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	689b      	ldr	r3, [r3, #8]
 80035f0:	f003 0301 	and.w	r3, r3, #1
 80035f4:	2b01      	cmp	r3, #1
 80035f6:	d11c      	bne.n	8003632 <HAL_SPI_TransmitReceive+0x1f4>
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80035fe:	b29b      	uxth	r3, r3
 8003600:	2b00      	cmp	r3, #0
 8003602:	d016      	beq.n	8003632 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	68da      	ldr	r2, [r3, #12]
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800360e:	b292      	uxth	r2, r2
 8003610:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003616:	1c9a      	adds	r2, r3, #2
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003622:	b29b      	uxth	r3, r3
 8003624:	3b01      	subs	r3, #1
 8003626:	b29a      	uxth	r2, r3
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800362e:	2301      	movs	r3, #1
 8003630:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003632:	f7fd fdb5 	bl	80011a0 <HAL_GetTick>
 8003636:	4602      	mov	r2, r0
 8003638:	69fb      	ldr	r3, [r7, #28]
 800363a:	1ad3      	subs	r3, r2, r3
 800363c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800363e:	429a      	cmp	r2, r3
 8003640:	d80b      	bhi.n	800365a <HAL_SPI_TransmitReceive+0x21c>
 8003642:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003644:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003648:	d007      	beq.n	800365a <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 800364a:	2303      	movs	r3, #3
 800364c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	2201      	movs	r2, #1
 8003654:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8003658:	e109      	b.n	800386e <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800365e:	b29b      	uxth	r3, r3
 8003660:	2b00      	cmp	r3, #0
 8003662:	d19f      	bne.n	80035a4 <HAL_SPI_TransmitReceive+0x166>
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800366a:	b29b      	uxth	r3, r3
 800366c:	2b00      	cmp	r3, #0
 800366e:	d199      	bne.n	80035a4 <HAL_SPI_TransmitReceive+0x166>
 8003670:	e0e3      	b.n	800383a <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d003      	beq.n	8003682 <HAL_SPI_TransmitReceive+0x244>
 800367a:	8a7b      	ldrh	r3, [r7, #18]
 800367c:	2b01      	cmp	r3, #1
 800367e:	f040 80cf 	bne.w	8003820 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003686:	b29b      	uxth	r3, r3
 8003688:	2b01      	cmp	r3, #1
 800368a:	d912      	bls.n	80036b2 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003690:	881a      	ldrh	r2, [r3, #0]
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800369c:	1c9a      	adds	r2, r3, #2
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80036a6:	b29b      	uxth	r3, r3
 80036a8:	3b02      	subs	r3, #2
 80036aa:	b29a      	uxth	r2, r3
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80036b0:	e0b6      	b.n	8003820 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	330c      	adds	r3, #12
 80036bc:	7812      	ldrb	r2, [r2, #0]
 80036be:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036c4:	1c5a      	adds	r2, r3, #1
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80036ce:	b29b      	uxth	r3, r3
 80036d0:	3b01      	subs	r3, #1
 80036d2:	b29a      	uxth	r2, r3
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80036d8:	e0a2      	b.n	8003820 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	689b      	ldr	r3, [r3, #8]
 80036e0:	f003 0302 	and.w	r3, r3, #2
 80036e4:	2b02      	cmp	r3, #2
 80036e6:	d134      	bne.n	8003752 <HAL_SPI_TransmitReceive+0x314>
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80036ec:	b29b      	uxth	r3, r3
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d02f      	beq.n	8003752 <HAL_SPI_TransmitReceive+0x314>
 80036f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036f4:	2b01      	cmp	r3, #1
 80036f6:	d12c      	bne.n	8003752 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80036fc:	b29b      	uxth	r3, r3
 80036fe:	2b01      	cmp	r3, #1
 8003700:	d912      	bls.n	8003728 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003706:	881a      	ldrh	r2, [r3, #0]
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003712:	1c9a      	adds	r2, r3, #2
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800371c:	b29b      	uxth	r3, r3
 800371e:	3b02      	subs	r3, #2
 8003720:	b29a      	uxth	r2, r3
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003726:	e012      	b.n	800374e <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	330c      	adds	r3, #12
 8003732:	7812      	ldrb	r2, [r2, #0]
 8003734:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800373a:	1c5a      	adds	r2, r3, #1
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003744:	b29b      	uxth	r3, r3
 8003746:	3b01      	subs	r3, #1
 8003748:	b29a      	uxth	r2, r3
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800374e:	2300      	movs	r3, #0
 8003750:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	689b      	ldr	r3, [r3, #8]
 8003758:	f003 0301 	and.w	r3, r3, #1
 800375c:	2b01      	cmp	r3, #1
 800375e:	d148      	bne.n	80037f2 <HAL_SPI_TransmitReceive+0x3b4>
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003766:	b29b      	uxth	r3, r3
 8003768:	2b00      	cmp	r3, #0
 800376a:	d042      	beq.n	80037f2 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003772:	b29b      	uxth	r3, r3
 8003774:	2b01      	cmp	r3, #1
 8003776:	d923      	bls.n	80037c0 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	68da      	ldr	r2, [r3, #12]
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003782:	b292      	uxth	r2, r2
 8003784:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800378a:	1c9a      	adds	r2, r3, #2
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003796:	b29b      	uxth	r3, r3
 8003798:	3b02      	subs	r3, #2
 800379a:	b29a      	uxth	r2, r3
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80037a8:	b29b      	uxth	r3, r3
 80037aa:	2b01      	cmp	r3, #1
 80037ac:	d81f      	bhi.n	80037ee <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	685a      	ldr	r2, [r3, #4]
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80037bc:	605a      	str	r2, [r3, #4]
 80037be:	e016      	b.n	80037ee <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f103 020c 	add.w	r2, r3, #12
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037cc:	7812      	ldrb	r2, [r2, #0]
 80037ce:	b2d2      	uxtb	r2, r2
 80037d0:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037d6:	1c5a      	adds	r2, r3, #1
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80037e2:	b29b      	uxth	r3, r3
 80037e4:	3b01      	subs	r3, #1
 80037e6:	b29a      	uxth	r2, r3
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80037ee:	2301      	movs	r3, #1
 80037f0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80037f2:	f7fd fcd5 	bl	80011a0 <HAL_GetTick>
 80037f6:	4602      	mov	r2, r0
 80037f8:	69fb      	ldr	r3, [r7, #28]
 80037fa:	1ad3      	subs	r3, r2, r3
 80037fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80037fe:	429a      	cmp	r2, r3
 8003800:	d803      	bhi.n	800380a <HAL_SPI_TransmitReceive+0x3cc>
 8003802:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003804:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003808:	d102      	bne.n	8003810 <HAL_SPI_TransmitReceive+0x3d2>
 800380a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800380c:	2b00      	cmp	r3, #0
 800380e:	d107      	bne.n	8003820 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8003810:	2303      	movs	r3, #3
 8003812:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	2201      	movs	r2, #1
 800381a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 800381e:	e026      	b.n	800386e <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003824:	b29b      	uxth	r3, r3
 8003826:	2b00      	cmp	r3, #0
 8003828:	f47f af57 	bne.w	80036da <HAL_SPI_TransmitReceive+0x29c>
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003832:	b29b      	uxth	r3, r3
 8003834:	2b00      	cmp	r3, #0
 8003836:	f47f af50 	bne.w	80036da <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800383a:	69fa      	ldr	r2, [r7, #28]
 800383c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800383e:	68f8      	ldr	r0, [r7, #12]
 8003840:	f000 f996 	bl	8003b70 <SPI_EndRxTxTransaction>
 8003844:	4603      	mov	r3, r0
 8003846:	2b00      	cmp	r3, #0
 8003848:	d005      	beq.n	8003856 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 800384a:	2301      	movs	r3, #1
 800384c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	2220      	movs	r2, #32
 8003854:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800385a:	2b00      	cmp	r3, #0
 800385c:	d003      	beq.n	8003866 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 800385e:	2301      	movs	r3, #1
 8003860:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003864:	e003      	b.n	800386e <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	2201      	movs	r2, #1
 800386a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	2200      	movs	r2, #0
 8003872:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8003876:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 800387a:	4618      	mov	r0, r3
 800387c:	3728      	adds	r7, #40	@ 0x28
 800387e:	46bd      	mov	sp, r7
 8003880:	bd80      	pop	{r7, pc}
	...

08003884 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b088      	sub	sp, #32
 8003888:	af00      	add	r7, sp, #0
 800388a:	60f8      	str	r0, [r7, #12]
 800388c:	60b9      	str	r1, [r7, #8]
 800388e:	603b      	str	r3, [r7, #0]
 8003890:	4613      	mov	r3, r2
 8003892:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003894:	f7fd fc84 	bl	80011a0 <HAL_GetTick>
 8003898:	4602      	mov	r2, r0
 800389a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800389c:	1a9b      	subs	r3, r3, r2
 800389e:	683a      	ldr	r2, [r7, #0]
 80038a0:	4413      	add	r3, r2
 80038a2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80038a4:	f7fd fc7c 	bl	80011a0 <HAL_GetTick>
 80038a8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80038aa:	4b39      	ldr	r3, [pc, #228]	@ (8003990 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	015b      	lsls	r3, r3, #5
 80038b0:	0d1b      	lsrs	r3, r3, #20
 80038b2:	69fa      	ldr	r2, [r7, #28]
 80038b4:	fb02 f303 	mul.w	r3, r2, r3
 80038b8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80038ba:	e054      	b.n	8003966 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80038c2:	d050      	beq.n	8003966 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80038c4:	f7fd fc6c 	bl	80011a0 <HAL_GetTick>
 80038c8:	4602      	mov	r2, r0
 80038ca:	69bb      	ldr	r3, [r7, #24]
 80038cc:	1ad3      	subs	r3, r2, r3
 80038ce:	69fa      	ldr	r2, [r7, #28]
 80038d0:	429a      	cmp	r2, r3
 80038d2:	d902      	bls.n	80038da <SPI_WaitFlagStateUntilTimeout+0x56>
 80038d4:	69fb      	ldr	r3, [r7, #28]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d13d      	bne.n	8003956 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	685a      	ldr	r2, [r3, #4]
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80038e8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80038f2:	d111      	bne.n	8003918 <SPI_WaitFlagStateUntilTimeout+0x94>
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	689b      	ldr	r3, [r3, #8]
 80038f8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80038fc:	d004      	beq.n	8003908 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	689b      	ldr	r3, [r3, #8]
 8003902:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003906:	d107      	bne.n	8003918 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	681a      	ldr	r2, [r3, #0]
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003916:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800391c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003920:	d10f      	bne.n	8003942 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	681a      	ldr	r2, [r3, #0]
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003930:	601a      	str	r2, [r3, #0]
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	681a      	ldr	r2, [r3, #0]
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003940:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	2201      	movs	r2, #1
 8003946:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	2200      	movs	r2, #0
 800394e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003952:	2303      	movs	r3, #3
 8003954:	e017      	b.n	8003986 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003956:	697b      	ldr	r3, [r7, #20]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d101      	bne.n	8003960 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800395c:	2300      	movs	r3, #0
 800395e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003960:	697b      	ldr	r3, [r7, #20]
 8003962:	3b01      	subs	r3, #1
 8003964:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	689a      	ldr	r2, [r3, #8]
 800396c:	68bb      	ldr	r3, [r7, #8]
 800396e:	4013      	ands	r3, r2
 8003970:	68ba      	ldr	r2, [r7, #8]
 8003972:	429a      	cmp	r2, r3
 8003974:	bf0c      	ite	eq
 8003976:	2301      	moveq	r3, #1
 8003978:	2300      	movne	r3, #0
 800397a:	b2db      	uxtb	r3, r3
 800397c:	461a      	mov	r2, r3
 800397e:	79fb      	ldrb	r3, [r7, #7]
 8003980:	429a      	cmp	r2, r3
 8003982:	d19b      	bne.n	80038bc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003984:	2300      	movs	r3, #0
}
 8003986:	4618      	mov	r0, r3
 8003988:	3720      	adds	r7, #32
 800398a:	46bd      	mov	sp, r7
 800398c:	bd80      	pop	{r7, pc}
 800398e:	bf00      	nop
 8003990:	2000000c 	.word	0x2000000c

08003994 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b08a      	sub	sp, #40	@ 0x28
 8003998:	af00      	add	r7, sp, #0
 800399a:	60f8      	str	r0, [r7, #12]
 800399c:	60b9      	str	r1, [r7, #8]
 800399e:	607a      	str	r2, [r7, #4]
 80039a0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80039a2:	2300      	movs	r3, #0
 80039a4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80039a6:	f7fd fbfb 	bl	80011a0 <HAL_GetTick>
 80039aa:	4602      	mov	r2, r0
 80039ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039ae:	1a9b      	subs	r3, r3, r2
 80039b0:	683a      	ldr	r2, [r7, #0]
 80039b2:	4413      	add	r3, r2
 80039b4:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80039b6:	f7fd fbf3 	bl	80011a0 <HAL_GetTick>
 80039ba:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	330c      	adds	r3, #12
 80039c2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80039c4:	4b3d      	ldr	r3, [pc, #244]	@ (8003abc <SPI_WaitFifoStateUntilTimeout+0x128>)
 80039c6:	681a      	ldr	r2, [r3, #0]
 80039c8:	4613      	mov	r3, r2
 80039ca:	009b      	lsls	r3, r3, #2
 80039cc:	4413      	add	r3, r2
 80039ce:	00da      	lsls	r2, r3, #3
 80039d0:	1ad3      	subs	r3, r2, r3
 80039d2:	0d1b      	lsrs	r3, r3, #20
 80039d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039d6:	fb02 f303 	mul.w	r3, r2, r3
 80039da:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80039dc:	e060      	b.n	8003aa0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80039de:	68bb      	ldr	r3, [r7, #8]
 80039e0:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80039e4:	d107      	bne.n	80039f6 <SPI_WaitFifoStateUntilTimeout+0x62>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d104      	bne.n	80039f6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80039ec:	69fb      	ldr	r3, [r7, #28]
 80039ee:	781b      	ldrb	r3, [r3, #0]
 80039f0:	b2db      	uxtb	r3, r3
 80039f2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80039f4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80039fc:	d050      	beq.n	8003aa0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80039fe:	f7fd fbcf 	bl	80011a0 <HAL_GetTick>
 8003a02:	4602      	mov	r2, r0
 8003a04:	6a3b      	ldr	r3, [r7, #32]
 8003a06:	1ad3      	subs	r3, r2, r3
 8003a08:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a0a:	429a      	cmp	r2, r3
 8003a0c:	d902      	bls.n	8003a14 <SPI_WaitFifoStateUntilTimeout+0x80>
 8003a0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d13d      	bne.n	8003a90 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	685a      	ldr	r2, [r3, #4]
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003a22:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003a2c:	d111      	bne.n	8003a52 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	689b      	ldr	r3, [r3, #8]
 8003a32:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003a36:	d004      	beq.n	8003a42 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	689b      	ldr	r3, [r3, #8]
 8003a3c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a40:	d107      	bne.n	8003a52 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	681a      	ldr	r2, [r3, #0]
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003a50:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a56:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003a5a:	d10f      	bne.n	8003a7c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	681a      	ldr	r2, [r3, #0]
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003a6a:	601a      	str	r2, [r3, #0]
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	681a      	ldr	r2, [r3, #0]
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003a7a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	2201      	movs	r2, #1
 8003a80:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	2200      	movs	r2, #0
 8003a88:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003a8c:	2303      	movs	r3, #3
 8003a8e:	e010      	b.n	8003ab2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003a90:	69bb      	ldr	r3, [r7, #24]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d101      	bne.n	8003a9a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003a96:	2300      	movs	r3, #0
 8003a98:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8003a9a:	69bb      	ldr	r3, [r7, #24]
 8003a9c:	3b01      	subs	r3, #1
 8003a9e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	689a      	ldr	r2, [r3, #8]
 8003aa6:	68bb      	ldr	r3, [r7, #8]
 8003aa8:	4013      	ands	r3, r2
 8003aaa:	687a      	ldr	r2, [r7, #4]
 8003aac:	429a      	cmp	r2, r3
 8003aae:	d196      	bne.n	80039de <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003ab0:	2300      	movs	r3, #0
}
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	3728      	adds	r7, #40	@ 0x28
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bd80      	pop	{r7, pc}
 8003aba:	bf00      	nop
 8003abc:	2000000c 	.word	0x2000000c

08003ac0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b086      	sub	sp, #24
 8003ac4:	af02      	add	r7, sp, #8
 8003ac6:	60f8      	str	r0, [r7, #12]
 8003ac8:	60b9      	str	r1, [r7, #8]
 8003aca:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003ad4:	d111      	bne.n	8003afa <SPI_EndRxTransaction+0x3a>
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	689b      	ldr	r3, [r3, #8]
 8003ada:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003ade:	d004      	beq.n	8003aea <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	689b      	ldr	r3, [r3, #8]
 8003ae4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ae8:	d107      	bne.n	8003afa <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	681a      	ldr	r2, [r3, #0]
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003af8:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	9300      	str	r3, [sp, #0]
 8003afe:	68bb      	ldr	r3, [r7, #8]
 8003b00:	2200      	movs	r2, #0
 8003b02:	2180      	movs	r1, #128	@ 0x80
 8003b04:	68f8      	ldr	r0, [r7, #12]
 8003b06:	f7ff febd 	bl	8003884 <SPI_WaitFlagStateUntilTimeout>
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d007      	beq.n	8003b20 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b14:	f043 0220 	orr.w	r2, r3, #32
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003b1c:	2303      	movs	r3, #3
 8003b1e:	e023      	b.n	8003b68 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003b28:	d11d      	bne.n	8003b66 <SPI_EndRxTransaction+0xa6>
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	689b      	ldr	r3, [r3, #8]
 8003b2e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003b32:	d004      	beq.n	8003b3e <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	689b      	ldr	r3, [r3, #8]
 8003b38:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b3c:	d113      	bne.n	8003b66 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	9300      	str	r3, [sp, #0]
 8003b42:	68bb      	ldr	r3, [r7, #8]
 8003b44:	2200      	movs	r2, #0
 8003b46:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8003b4a:	68f8      	ldr	r0, [r7, #12]
 8003b4c:	f7ff ff22 	bl	8003994 <SPI_WaitFifoStateUntilTimeout>
 8003b50:	4603      	mov	r3, r0
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d007      	beq.n	8003b66 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b5a:	f043 0220 	orr.w	r2, r3, #32
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8003b62:	2303      	movs	r3, #3
 8003b64:	e000      	b.n	8003b68 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8003b66:	2300      	movs	r3, #0
}
 8003b68:	4618      	mov	r0, r3
 8003b6a:	3710      	adds	r7, #16
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	bd80      	pop	{r7, pc}

08003b70 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b086      	sub	sp, #24
 8003b74:	af02      	add	r7, sp, #8
 8003b76:	60f8      	str	r0, [r7, #12]
 8003b78:	60b9      	str	r1, [r7, #8]
 8003b7a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	9300      	str	r3, [sp, #0]
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	2200      	movs	r2, #0
 8003b84:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8003b88:	68f8      	ldr	r0, [r7, #12]
 8003b8a:	f7ff ff03 	bl	8003994 <SPI_WaitFifoStateUntilTimeout>
 8003b8e:	4603      	mov	r3, r0
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d007      	beq.n	8003ba4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b98:	f043 0220 	orr.w	r2, r3, #32
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003ba0:	2303      	movs	r3, #3
 8003ba2:	e027      	b.n	8003bf4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	9300      	str	r3, [sp, #0]
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	2200      	movs	r2, #0
 8003bac:	2180      	movs	r1, #128	@ 0x80
 8003bae:	68f8      	ldr	r0, [r7, #12]
 8003bb0:	f7ff fe68 	bl	8003884 <SPI_WaitFlagStateUntilTimeout>
 8003bb4:	4603      	mov	r3, r0
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d007      	beq.n	8003bca <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003bbe:	f043 0220 	orr.w	r2, r3, #32
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003bc6:	2303      	movs	r3, #3
 8003bc8:	e014      	b.n	8003bf4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	9300      	str	r3, [sp, #0]
 8003bce:	68bb      	ldr	r3, [r7, #8]
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8003bd6:	68f8      	ldr	r0, [r7, #12]
 8003bd8:	f7ff fedc 	bl	8003994 <SPI_WaitFifoStateUntilTimeout>
 8003bdc:	4603      	mov	r3, r0
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d007      	beq.n	8003bf2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003be6:	f043 0220 	orr.w	r2, r3, #32
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003bee:	2303      	movs	r3, #3
 8003bf0:	e000      	b.n	8003bf4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003bf2:	2300      	movs	r3, #0
}
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	3710      	adds	r7, #16
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	bd80      	pop	{r7, pc}

08003bfc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b082      	sub	sp, #8
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d101      	bne.n	8003c0e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	e049      	b.n	8003ca2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c14:	b2db      	uxtb	r3, r3
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d106      	bne.n	8003c28 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003c22:	6878      	ldr	r0, [r7, #4]
 8003c24:	f7fd f8b0 	bl	8000d88 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2202      	movs	r2, #2
 8003c2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681a      	ldr	r2, [r3, #0]
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	3304      	adds	r3, #4
 8003c38:	4619      	mov	r1, r3
 8003c3a:	4610      	mov	r0, r2
 8003c3c:	f000 f9d0 	bl	8003fe0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2201      	movs	r2, #1
 8003c44:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2201      	movs	r2, #1
 8003c4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2201      	movs	r2, #1
 8003c54:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2201      	movs	r2, #1
 8003c5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2201      	movs	r2, #1
 8003c64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2201      	movs	r2, #1
 8003c6c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2201      	movs	r2, #1
 8003c74:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2201      	movs	r2, #1
 8003c7c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2201      	movs	r2, #1
 8003c84:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2201      	movs	r2, #1
 8003c8c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2201      	movs	r2, #1
 8003c94:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2201      	movs	r2, #1
 8003c9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003ca0:	2300      	movs	r3, #0
}
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	3708      	adds	r7, #8
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bd80      	pop	{r7, pc}
	...

08003cac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003cac:	b480      	push	{r7}
 8003cae:	b085      	sub	sp, #20
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003cba:	b2db      	uxtb	r3, r3
 8003cbc:	2b01      	cmp	r3, #1
 8003cbe:	d001      	beq.n	8003cc4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	e04f      	b.n	8003d64 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2202      	movs	r2, #2
 8003cc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	68da      	ldr	r2, [r3, #12]
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f042 0201 	orr.w	r2, r2, #1
 8003cda:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a23      	ldr	r2, [pc, #140]	@ (8003d70 <HAL_TIM_Base_Start_IT+0xc4>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d01d      	beq.n	8003d22 <HAL_TIM_Base_Start_IT+0x76>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003cee:	d018      	beq.n	8003d22 <HAL_TIM_Base_Start_IT+0x76>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4a1f      	ldr	r2, [pc, #124]	@ (8003d74 <HAL_TIM_Base_Start_IT+0xc8>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d013      	beq.n	8003d22 <HAL_TIM_Base_Start_IT+0x76>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4a1e      	ldr	r2, [pc, #120]	@ (8003d78 <HAL_TIM_Base_Start_IT+0xcc>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d00e      	beq.n	8003d22 <HAL_TIM_Base_Start_IT+0x76>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	4a1c      	ldr	r2, [pc, #112]	@ (8003d7c <HAL_TIM_Base_Start_IT+0xd0>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d009      	beq.n	8003d22 <HAL_TIM_Base_Start_IT+0x76>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4a1b      	ldr	r2, [pc, #108]	@ (8003d80 <HAL_TIM_Base_Start_IT+0xd4>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d004      	beq.n	8003d22 <HAL_TIM_Base_Start_IT+0x76>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4a19      	ldr	r2, [pc, #100]	@ (8003d84 <HAL_TIM_Base_Start_IT+0xd8>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d115      	bne.n	8003d4e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	689a      	ldr	r2, [r3, #8]
 8003d28:	4b17      	ldr	r3, [pc, #92]	@ (8003d88 <HAL_TIM_Base_Start_IT+0xdc>)
 8003d2a:	4013      	ands	r3, r2
 8003d2c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	2b06      	cmp	r3, #6
 8003d32:	d015      	beq.n	8003d60 <HAL_TIM_Base_Start_IT+0xb4>
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d3a:	d011      	beq.n	8003d60 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	681a      	ldr	r2, [r3, #0]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f042 0201 	orr.w	r2, r2, #1
 8003d4a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d4c:	e008      	b.n	8003d60 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	681a      	ldr	r2, [r3, #0]
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f042 0201 	orr.w	r2, r2, #1
 8003d5c:	601a      	str	r2, [r3, #0]
 8003d5e:	e000      	b.n	8003d62 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d60:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003d62:	2300      	movs	r3, #0
}
 8003d64:	4618      	mov	r0, r3
 8003d66:	3714      	adds	r7, #20
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6e:	4770      	bx	lr
 8003d70:	40012c00 	.word	0x40012c00
 8003d74:	40000400 	.word	0x40000400
 8003d78:	40000800 	.word	0x40000800
 8003d7c:	40000c00 	.word	0x40000c00
 8003d80:	40013400 	.word	0x40013400
 8003d84:	40014000 	.word	0x40014000
 8003d88:	00010007 	.word	0x00010007

08003d8c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b084      	sub	sp, #16
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	68db      	ldr	r3, [r3, #12]
 8003d9a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	691b      	ldr	r3, [r3, #16]
 8003da2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003da4:	68bb      	ldr	r3, [r7, #8]
 8003da6:	f003 0302 	and.w	r3, r3, #2
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d020      	beq.n	8003df0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	f003 0302 	and.w	r3, r3, #2
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d01b      	beq.n	8003df0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f06f 0202 	mvn.w	r2, #2
 8003dc0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2201      	movs	r2, #1
 8003dc6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	699b      	ldr	r3, [r3, #24]
 8003dce:	f003 0303 	and.w	r3, r3, #3
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d003      	beq.n	8003dde <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003dd6:	6878      	ldr	r0, [r7, #4]
 8003dd8:	f000 f8e4 	bl	8003fa4 <HAL_TIM_IC_CaptureCallback>
 8003ddc:	e005      	b.n	8003dea <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003dde:	6878      	ldr	r0, [r7, #4]
 8003de0:	f000 f8d6 	bl	8003f90 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003de4:	6878      	ldr	r0, [r7, #4]
 8003de6:	f000 f8e7 	bl	8003fb8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2200      	movs	r2, #0
 8003dee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003df0:	68bb      	ldr	r3, [r7, #8]
 8003df2:	f003 0304 	and.w	r3, r3, #4
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d020      	beq.n	8003e3c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	f003 0304 	and.w	r3, r3, #4
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d01b      	beq.n	8003e3c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f06f 0204 	mvn.w	r2, #4
 8003e0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2202      	movs	r2, #2
 8003e12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	699b      	ldr	r3, [r3, #24]
 8003e1a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d003      	beq.n	8003e2a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e22:	6878      	ldr	r0, [r7, #4]
 8003e24:	f000 f8be 	bl	8003fa4 <HAL_TIM_IC_CaptureCallback>
 8003e28:	e005      	b.n	8003e36 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e2a:	6878      	ldr	r0, [r7, #4]
 8003e2c:	f000 f8b0 	bl	8003f90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e30:	6878      	ldr	r0, [r7, #4]
 8003e32:	f000 f8c1 	bl	8003fb8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2200      	movs	r2, #0
 8003e3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003e3c:	68bb      	ldr	r3, [r7, #8]
 8003e3e:	f003 0308 	and.w	r3, r3, #8
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d020      	beq.n	8003e88 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	f003 0308 	and.w	r3, r3, #8
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d01b      	beq.n	8003e88 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f06f 0208 	mvn.w	r2, #8
 8003e58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2204      	movs	r2, #4
 8003e5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	69db      	ldr	r3, [r3, #28]
 8003e66:	f003 0303 	and.w	r3, r3, #3
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d003      	beq.n	8003e76 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e6e:	6878      	ldr	r0, [r7, #4]
 8003e70:	f000 f898 	bl	8003fa4 <HAL_TIM_IC_CaptureCallback>
 8003e74:	e005      	b.n	8003e82 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e76:	6878      	ldr	r0, [r7, #4]
 8003e78:	f000 f88a 	bl	8003f90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e7c:	6878      	ldr	r0, [r7, #4]
 8003e7e:	f000 f89b 	bl	8003fb8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2200      	movs	r2, #0
 8003e86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003e88:	68bb      	ldr	r3, [r7, #8]
 8003e8a:	f003 0310 	and.w	r3, r3, #16
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d020      	beq.n	8003ed4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	f003 0310 	and.w	r3, r3, #16
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d01b      	beq.n	8003ed4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f06f 0210 	mvn.w	r2, #16
 8003ea4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2208      	movs	r2, #8
 8003eaa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	69db      	ldr	r3, [r3, #28]
 8003eb2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d003      	beq.n	8003ec2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003eba:	6878      	ldr	r0, [r7, #4]
 8003ebc:	f000 f872 	bl	8003fa4 <HAL_TIM_IC_CaptureCallback>
 8003ec0:	e005      	b.n	8003ece <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ec2:	6878      	ldr	r0, [r7, #4]
 8003ec4:	f000 f864 	bl	8003f90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ec8:	6878      	ldr	r0, [r7, #4]
 8003eca:	f000 f875 	bl	8003fb8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	f003 0301 	and.w	r3, r3, #1
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d00c      	beq.n	8003ef8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	f003 0301 	and.w	r3, r3, #1
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d007      	beq.n	8003ef8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f06f 0201 	mvn.w	r2, #1
 8003ef0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003ef2:	6878      	ldr	r0, [r7, #4]
 8003ef4:	f7fc fd1a 	bl	800092c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003ef8:	68bb      	ldr	r3, [r7, #8]
 8003efa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d00c      	beq.n	8003f1c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d007      	beq.n	8003f1c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003f14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003f16:	6878      	ldr	r0, [r7, #4]
 8003f18:	f000 f906 	bl	8004128 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d00c      	beq.n	8003f40 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d007      	beq.n	8003f40 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8003f38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003f3a:	6878      	ldr	r0, [r7, #4]
 8003f3c:	f000 f8fe 	bl	800413c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003f40:	68bb      	ldr	r3, [r7, #8]
 8003f42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d00c      	beq.n	8003f64 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d007      	beq.n	8003f64 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003f5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003f5e:	6878      	ldr	r0, [r7, #4]
 8003f60:	f000 f834 	bl	8003fcc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003f64:	68bb      	ldr	r3, [r7, #8]
 8003f66:	f003 0320 	and.w	r3, r3, #32
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d00c      	beq.n	8003f88 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	f003 0320 	and.w	r3, r3, #32
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d007      	beq.n	8003f88 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f06f 0220 	mvn.w	r2, #32
 8003f80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003f82:	6878      	ldr	r0, [r7, #4]
 8003f84:	f000 f8c6 	bl	8004114 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003f88:	bf00      	nop
 8003f8a:	3710      	adds	r7, #16
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	bd80      	pop	{r7, pc}

08003f90 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003f90:	b480      	push	{r7}
 8003f92:	b083      	sub	sp, #12
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003f98:	bf00      	nop
 8003f9a:	370c      	adds	r7, #12
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa2:	4770      	bx	lr

08003fa4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	b083      	sub	sp, #12
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003fac:	bf00      	nop
 8003fae:	370c      	adds	r7, #12
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb6:	4770      	bx	lr

08003fb8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003fb8:	b480      	push	{r7}
 8003fba:	b083      	sub	sp, #12
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003fc0:	bf00      	nop
 8003fc2:	370c      	adds	r7, #12
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fca:	4770      	bx	lr

08003fcc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003fcc:	b480      	push	{r7}
 8003fce:	b083      	sub	sp, #12
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003fd4:	bf00      	nop
 8003fd6:	370c      	adds	r7, #12
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fde:	4770      	bx	lr

08003fe0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	b085      	sub	sp, #20
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
 8003fe8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	4a40      	ldr	r2, [pc, #256]	@ (80040f4 <TIM_Base_SetConfig+0x114>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d013      	beq.n	8004020 <TIM_Base_SetConfig+0x40>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ffe:	d00f      	beq.n	8004020 <TIM_Base_SetConfig+0x40>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	4a3d      	ldr	r2, [pc, #244]	@ (80040f8 <TIM_Base_SetConfig+0x118>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d00b      	beq.n	8004020 <TIM_Base_SetConfig+0x40>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	4a3c      	ldr	r2, [pc, #240]	@ (80040fc <TIM_Base_SetConfig+0x11c>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d007      	beq.n	8004020 <TIM_Base_SetConfig+0x40>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	4a3b      	ldr	r2, [pc, #236]	@ (8004100 <TIM_Base_SetConfig+0x120>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d003      	beq.n	8004020 <TIM_Base_SetConfig+0x40>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	4a3a      	ldr	r2, [pc, #232]	@ (8004104 <TIM_Base_SetConfig+0x124>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d108      	bne.n	8004032 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004026:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	685b      	ldr	r3, [r3, #4]
 800402c:	68fa      	ldr	r2, [r7, #12]
 800402e:	4313      	orrs	r3, r2
 8004030:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	4a2f      	ldr	r2, [pc, #188]	@ (80040f4 <TIM_Base_SetConfig+0x114>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d01f      	beq.n	800407a <TIM_Base_SetConfig+0x9a>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004040:	d01b      	beq.n	800407a <TIM_Base_SetConfig+0x9a>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	4a2c      	ldr	r2, [pc, #176]	@ (80040f8 <TIM_Base_SetConfig+0x118>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d017      	beq.n	800407a <TIM_Base_SetConfig+0x9a>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	4a2b      	ldr	r2, [pc, #172]	@ (80040fc <TIM_Base_SetConfig+0x11c>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d013      	beq.n	800407a <TIM_Base_SetConfig+0x9a>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	4a2a      	ldr	r2, [pc, #168]	@ (8004100 <TIM_Base_SetConfig+0x120>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d00f      	beq.n	800407a <TIM_Base_SetConfig+0x9a>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	4a29      	ldr	r2, [pc, #164]	@ (8004104 <TIM_Base_SetConfig+0x124>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d00b      	beq.n	800407a <TIM_Base_SetConfig+0x9a>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	4a28      	ldr	r2, [pc, #160]	@ (8004108 <TIM_Base_SetConfig+0x128>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d007      	beq.n	800407a <TIM_Base_SetConfig+0x9a>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	4a27      	ldr	r2, [pc, #156]	@ (800410c <TIM_Base_SetConfig+0x12c>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d003      	beq.n	800407a <TIM_Base_SetConfig+0x9a>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	4a26      	ldr	r2, [pc, #152]	@ (8004110 <TIM_Base_SetConfig+0x130>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d108      	bne.n	800408c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004080:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	68db      	ldr	r3, [r3, #12]
 8004086:	68fa      	ldr	r2, [r7, #12]
 8004088:	4313      	orrs	r3, r2
 800408a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	695b      	ldr	r3, [r3, #20]
 8004096:	4313      	orrs	r3, r2
 8004098:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	68fa      	ldr	r2, [r7, #12]
 800409e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	689a      	ldr	r2, [r3, #8]
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	681a      	ldr	r2, [r3, #0]
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	4a10      	ldr	r2, [pc, #64]	@ (80040f4 <TIM_Base_SetConfig+0x114>)
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d00f      	beq.n	80040d8 <TIM_Base_SetConfig+0xf8>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	4a12      	ldr	r2, [pc, #72]	@ (8004104 <TIM_Base_SetConfig+0x124>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	d00b      	beq.n	80040d8 <TIM_Base_SetConfig+0xf8>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	4a11      	ldr	r2, [pc, #68]	@ (8004108 <TIM_Base_SetConfig+0x128>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d007      	beq.n	80040d8 <TIM_Base_SetConfig+0xf8>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	4a10      	ldr	r2, [pc, #64]	@ (800410c <TIM_Base_SetConfig+0x12c>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d003      	beq.n	80040d8 <TIM_Base_SetConfig+0xf8>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	4a0f      	ldr	r2, [pc, #60]	@ (8004110 <TIM_Base_SetConfig+0x130>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d103      	bne.n	80040e0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	691a      	ldr	r2, [r3, #16]
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2201      	movs	r2, #1
 80040e4:	615a      	str	r2, [r3, #20]
}
 80040e6:	bf00      	nop
 80040e8:	3714      	adds	r7, #20
 80040ea:	46bd      	mov	sp, r7
 80040ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f0:	4770      	bx	lr
 80040f2:	bf00      	nop
 80040f4:	40012c00 	.word	0x40012c00
 80040f8:	40000400 	.word	0x40000400
 80040fc:	40000800 	.word	0x40000800
 8004100:	40000c00 	.word	0x40000c00
 8004104:	40013400 	.word	0x40013400
 8004108:	40014000 	.word	0x40014000
 800410c:	40014400 	.word	0x40014400
 8004110:	40014800 	.word	0x40014800

08004114 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004114:	b480      	push	{r7}
 8004116:	b083      	sub	sp, #12
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800411c:	bf00      	nop
 800411e:	370c      	adds	r7, #12
 8004120:	46bd      	mov	sp, r7
 8004122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004126:	4770      	bx	lr

08004128 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004128:	b480      	push	{r7}
 800412a:	b083      	sub	sp, #12
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004130:	bf00      	nop
 8004132:	370c      	adds	r7, #12
 8004134:	46bd      	mov	sp, r7
 8004136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413a:	4770      	bx	lr

0800413c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800413c:	b480      	push	{r7}
 800413e:	b083      	sub	sp, #12
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004144:	bf00      	nop
 8004146:	370c      	adds	r7, #12
 8004148:	46bd      	mov	sp, r7
 800414a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414e:	4770      	bx	lr

08004150 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b082      	sub	sp, #8
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d101      	bne.n	8004162 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800415e:	2301      	movs	r3, #1
 8004160:	e040      	b.n	80041e4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004166:	2b00      	cmp	r3, #0
 8004168:	d106      	bne.n	8004178 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2200      	movs	r2, #0
 800416e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004172:	6878      	ldr	r0, [r7, #4]
 8004174:	f7fc fe2e 	bl	8000dd4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2224      	movs	r2, #36	@ 0x24
 800417c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	681a      	ldr	r2, [r3, #0]
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f022 0201 	bic.w	r2, r2, #1
 800418c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004192:	2b00      	cmp	r3, #0
 8004194:	d002      	beq.n	800419c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004196:	6878      	ldr	r0, [r7, #4]
 8004198:	f000 fb6a 	bl	8004870 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800419c:	6878      	ldr	r0, [r7, #4]
 800419e:	f000 f8af 	bl	8004300 <UART_SetConfig>
 80041a2:	4603      	mov	r3, r0
 80041a4:	2b01      	cmp	r3, #1
 80041a6:	d101      	bne.n	80041ac <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80041a8:	2301      	movs	r3, #1
 80041aa:	e01b      	b.n	80041e4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	685a      	ldr	r2, [r3, #4]
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80041ba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	689a      	ldr	r2, [r3, #8]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80041ca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	681a      	ldr	r2, [r3, #0]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f042 0201 	orr.w	r2, r2, #1
 80041da:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80041dc:	6878      	ldr	r0, [r7, #4]
 80041de:	f000 fbe9 	bl	80049b4 <UART_CheckIdleState>
 80041e2:	4603      	mov	r3, r0
}
 80041e4:	4618      	mov	r0, r3
 80041e6:	3708      	adds	r7, #8
 80041e8:	46bd      	mov	sp, r7
 80041ea:	bd80      	pop	{r7, pc}

080041ec <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b08a      	sub	sp, #40	@ 0x28
 80041f0:	af02      	add	r7, sp, #8
 80041f2:	60f8      	str	r0, [r7, #12]
 80041f4:	60b9      	str	r1, [r7, #8]
 80041f6:	603b      	str	r3, [r7, #0]
 80041f8:	4613      	mov	r3, r2
 80041fa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004200:	2b20      	cmp	r3, #32
 8004202:	d177      	bne.n	80042f4 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8004204:	68bb      	ldr	r3, [r7, #8]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d002      	beq.n	8004210 <HAL_UART_Transmit+0x24>
 800420a:	88fb      	ldrh	r3, [r7, #6]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d101      	bne.n	8004214 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004210:	2301      	movs	r3, #1
 8004212:	e070      	b.n	80042f6 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	2200      	movs	r2, #0
 8004218:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	2221      	movs	r2, #33	@ 0x21
 8004220:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004222:	f7fc ffbd 	bl	80011a0 <HAL_GetTick>
 8004226:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	88fa      	ldrh	r2, [r7, #6]
 800422c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	88fa      	ldrh	r2, [r7, #6]
 8004234:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	689b      	ldr	r3, [r3, #8]
 800423c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004240:	d108      	bne.n	8004254 <HAL_UART_Transmit+0x68>
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	691b      	ldr	r3, [r3, #16]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d104      	bne.n	8004254 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800424a:	2300      	movs	r3, #0
 800424c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800424e:	68bb      	ldr	r3, [r7, #8]
 8004250:	61bb      	str	r3, [r7, #24]
 8004252:	e003      	b.n	800425c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004254:	68bb      	ldr	r3, [r7, #8]
 8004256:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004258:	2300      	movs	r3, #0
 800425a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800425c:	e02f      	b.n	80042be <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	9300      	str	r3, [sp, #0]
 8004262:	697b      	ldr	r3, [r7, #20]
 8004264:	2200      	movs	r2, #0
 8004266:	2180      	movs	r1, #128	@ 0x80
 8004268:	68f8      	ldr	r0, [r7, #12]
 800426a:	f000 fc4b 	bl	8004b04 <UART_WaitOnFlagUntilTimeout>
 800426e:	4603      	mov	r3, r0
 8004270:	2b00      	cmp	r3, #0
 8004272:	d004      	beq.n	800427e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	2220      	movs	r2, #32
 8004278:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800427a:	2303      	movs	r3, #3
 800427c:	e03b      	b.n	80042f6 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800427e:	69fb      	ldr	r3, [r7, #28]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d10b      	bne.n	800429c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004284:	69bb      	ldr	r3, [r7, #24]
 8004286:	881a      	ldrh	r2, [r3, #0]
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004290:	b292      	uxth	r2, r2
 8004292:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004294:	69bb      	ldr	r3, [r7, #24]
 8004296:	3302      	adds	r3, #2
 8004298:	61bb      	str	r3, [r7, #24]
 800429a:	e007      	b.n	80042ac <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800429c:	69fb      	ldr	r3, [r7, #28]
 800429e:	781a      	ldrb	r2, [r3, #0]
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80042a6:	69fb      	ldr	r3, [r7, #28]
 80042a8:	3301      	adds	r3, #1
 80042aa:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80042b2:	b29b      	uxth	r3, r3
 80042b4:	3b01      	subs	r3, #1
 80042b6:	b29a      	uxth	r2, r3
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80042c4:	b29b      	uxth	r3, r3
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d1c9      	bne.n	800425e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	9300      	str	r3, [sp, #0]
 80042ce:	697b      	ldr	r3, [r7, #20]
 80042d0:	2200      	movs	r2, #0
 80042d2:	2140      	movs	r1, #64	@ 0x40
 80042d4:	68f8      	ldr	r0, [r7, #12]
 80042d6:	f000 fc15 	bl	8004b04 <UART_WaitOnFlagUntilTimeout>
 80042da:	4603      	mov	r3, r0
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d004      	beq.n	80042ea <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	2220      	movs	r2, #32
 80042e4:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80042e6:	2303      	movs	r3, #3
 80042e8:	e005      	b.n	80042f6 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	2220      	movs	r2, #32
 80042ee:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80042f0:	2300      	movs	r3, #0
 80042f2:	e000      	b.n	80042f6 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80042f4:	2302      	movs	r3, #2
  }
}
 80042f6:	4618      	mov	r0, r3
 80042f8:	3720      	adds	r7, #32
 80042fa:	46bd      	mov	sp, r7
 80042fc:	bd80      	pop	{r7, pc}
	...

08004300 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004300:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004304:	b08a      	sub	sp, #40	@ 0x28
 8004306:	af00      	add	r7, sp, #0
 8004308:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800430a:	2300      	movs	r3, #0
 800430c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	689a      	ldr	r2, [r3, #8]
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	691b      	ldr	r3, [r3, #16]
 8004318:	431a      	orrs	r2, r3
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	695b      	ldr	r3, [r3, #20]
 800431e:	431a      	orrs	r2, r3
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	69db      	ldr	r3, [r3, #28]
 8004324:	4313      	orrs	r3, r2
 8004326:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	681a      	ldr	r2, [r3, #0]
 800432e:	4ba4      	ldr	r3, [pc, #656]	@ (80045c0 <UART_SetConfig+0x2c0>)
 8004330:	4013      	ands	r3, r2
 8004332:	68fa      	ldr	r2, [r7, #12]
 8004334:	6812      	ldr	r2, [r2, #0]
 8004336:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004338:	430b      	orrs	r3, r1
 800433a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	685b      	ldr	r3, [r3, #4]
 8004342:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	68da      	ldr	r2, [r3, #12]
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	430a      	orrs	r2, r1
 8004350:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	699b      	ldr	r3, [r3, #24]
 8004356:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4a99      	ldr	r2, [pc, #612]	@ (80045c4 <UART_SetConfig+0x2c4>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d004      	beq.n	800436c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	6a1b      	ldr	r3, [r3, #32]
 8004366:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004368:	4313      	orrs	r3, r2
 800436a:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	689b      	ldr	r3, [r3, #8]
 8004372:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800437c:	430a      	orrs	r2, r1
 800437e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a90      	ldr	r2, [pc, #576]	@ (80045c8 <UART_SetConfig+0x2c8>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d126      	bne.n	80043d8 <UART_SetConfig+0xd8>
 800438a:	4b90      	ldr	r3, [pc, #576]	@ (80045cc <UART_SetConfig+0x2cc>)
 800438c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004390:	f003 0303 	and.w	r3, r3, #3
 8004394:	2b03      	cmp	r3, #3
 8004396:	d81b      	bhi.n	80043d0 <UART_SetConfig+0xd0>
 8004398:	a201      	add	r2, pc, #4	@ (adr r2, 80043a0 <UART_SetConfig+0xa0>)
 800439a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800439e:	bf00      	nop
 80043a0:	080043b1 	.word	0x080043b1
 80043a4:	080043c1 	.word	0x080043c1
 80043a8:	080043b9 	.word	0x080043b9
 80043ac:	080043c9 	.word	0x080043c9
 80043b0:	2301      	movs	r3, #1
 80043b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80043b6:	e116      	b.n	80045e6 <UART_SetConfig+0x2e6>
 80043b8:	2302      	movs	r3, #2
 80043ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80043be:	e112      	b.n	80045e6 <UART_SetConfig+0x2e6>
 80043c0:	2304      	movs	r3, #4
 80043c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80043c6:	e10e      	b.n	80045e6 <UART_SetConfig+0x2e6>
 80043c8:	2308      	movs	r3, #8
 80043ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80043ce:	e10a      	b.n	80045e6 <UART_SetConfig+0x2e6>
 80043d0:	2310      	movs	r3, #16
 80043d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80043d6:	e106      	b.n	80045e6 <UART_SetConfig+0x2e6>
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4a7c      	ldr	r2, [pc, #496]	@ (80045d0 <UART_SetConfig+0x2d0>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d138      	bne.n	8004454 <UART_SetConfig+0x154>
 80043e2:	4b7a      	ldr	r3, [pc, #488]	@ (80045cc <UART_SetConfig+0x2cc>)
 80043e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043e8:	f003 030c 	and.w	r3, r3, #12
 80043ec:	2b0c      	cmp	r3, #12
 80043ee:	d82d      	bhi.n	800444c <UART_SetConfig+0x14c>
 80043f0:	a201      	add	r2, pc, #4	@ (adr r2, 80043f8 <UART_SetConfig+0xf8>)
 80043f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043f6:	bf00      	nop
 80043f8:	0800442d 	.word	0x0800442d
 80043fc:	0800444d 	.word	0x0800444d
 8004400:	0800444d 	.word	0x0800444d
 8004404:	0800444d 	.word	0x0800444d
 8004408:	0800443d 	.word	0x0800443d
 800440c:	0800444d 	.word	0x0800444d
 8004410:	0800444d 	.word	0x0800444d
 8004414:	0800444d 	.word	0x0800444d
 8004418:	08004435 	.word	0x08004435
 800441c:	0800444d 	.word	0x0800444d
 8004420:	0800444d 	.word	0x0800444d
 8004424:	0800444d 	.word	0x0800444d
 8004428:	08004445 	.word	0x08004445
 800442c:	2300      	movs	r3, #0
 800442e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004432:	e0d8      	b.n	80045e6 <UART_SetConfig+0x2e6>
 8004434:	2302      	movs	r3, #2
 8004436:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800443a:	e0d4      	b.n	80045e6 <UART_SetConfig+0x2e6>
 800443c:	2304      	movs	r3, #4
 800443e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004442:	e0d0      	b.n	80045e6 <UART_SetConfig+0x2e6>
 8004444:	2308      	movs	r3, #8
 8004446:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800444a:	e0cc      	b.n	80045e6 <UART_SetConfig+0x2e6>
 800444c:	2310      	movs	r3, #16
 800444e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004452:	e0c8      	b.n	80045e6 <UART_SetConfig+0x2e6>
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4a5e      	ldr	r2, [pc, #376]	@ (80045d4 <UART_SetConfig+0x2d4>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d125      	bne.n	80044aa <UART_SetConfig+0x1aa>
 800445e:	4b5b      	ldr	r3, [pc, #364]	@ (80045cc <UART_SetConfig+0x2cc>)
 8004460:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004464:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004468:	2b30      	cmp	r3, #48	@ 0x30
 800446a:	d016      	beq.n	800449a <UART_SetConfig+0x19a>
 800446c:	2b30      	cmp	r3, #48	@ 0x30
 800446e:	d818      	bhi.n	80044a2 <UART_SetConfig+0x1a2>
 8004470:	2b20      	cmp	r3, #32
 8004472:	d00a      	beq.n	800448a <UART_SetConfig+0x18a>
 8004474:	2b20      	cmp	r3, #32
 8004476:	d814      	bhi.n	80044a2 <UART_SetConfig+0x1a2>
 8004478:	2b00      	cmp	r3, #0
 800447a:	d002      	beq.n	8004482 <UART_SetConfig+0x182>
 800447c:	2b10      	cmp	r3, #16
 800447e:	d008      	beq.n	8004492 <UART_SetConfig+0x192>
 8004480:	e00f      	b.n	80044a2 <UART_SetConfig+0x1a2>
 8004482:	2300      	movs	r3, #0
 8004484:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004488:	e0ad      	b.n	80045e6 <UART_SetConfig+0x2e6>
 800448a:	2302      	movs	r3, #2
 800448c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004490:	e0a9      	b.n	80045e6 <UART_SetConfig+0x2e6>
 8004492:	2304      	movs	r3, #4
 8004494:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004498:	e0a5      	b.n	80045e6 <UART_SetConfig+0x2e6>
 800449a:	2308      	movs	r3, #8
 800449c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80044a0:	e0a1      	b.n	80045e6 <UART_SetConfig+0x2e6>
 80044a2:	2310      	movs	r3, #16
 80044a4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80044a8:	e09d      	b.n	80045e6 <UART_SetConfig+0x2e6>
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a4a      	ldr	r2, [pc, #296]	@ (80045d8 <UART_SetConfig+0x2d8>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d125      	bne.n	8004500 <UART_SetConfig+0x200>
 80044b4:	4b45      	ldr	r3, [pc, #276]	@ (80045cc <UART_SetConfig+0x2cc>)
 80044b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044ba:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80044be:	2bc0      	cmp	r3, #192	@ 0xc0
 80044c0:	d016      	beq.n	80044f0 <UART_SetConfig+0x1f0>
 80044c2:	2bc0      	cmp	r3, #192	@ 0xc0
 80044c4:	d818      	bhi.n	80044f8 <UART_SetConfig+0x1f8>
 80044c6:	2b80      	cmp	r3, #128	@ 0x80
 80044c8:	d00a      	beq.n	80044e0 <UART_SetConfig+0x1e0>
 80044ca:	2b80      	cmp	r3, #128	@ 0x80
 80044cc:	d814      	bhi.n	80044f8 <UART_SetConfig+0x1f8>
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d002      	beq.n	80044d8 <UART_SetConfig+0x1d8>
 80044d2:	2b40      	cmp	r3, #64	@ 0x40
 80044d4:	d008      	beq.n	80044e8 <UART_SetConfig+0x1e8>
 80044d6:	e00f      	b.n	80044f8 <UART_SetConfig+0x1f8>
 80044d8:	2300      	movs	r3, #0
 80044da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80044de:	e082      	b.n	80045e6 <UART_SetConfig+0x2e6>
 80044e0:	2302      	movs	r3, #2
 80044e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80044e6:	e07e      	b.n	80045e6 <UART_SetConfig+0x2e6>
 80044e8:	2304      	movs	r3, #4
 80044ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80044ee:	e07a      	b.n	80045e6 <UART_SetConfig+0x2e6>
 80044f0:	2308      	movs	r3, #8
 80044f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80044f6:	e076      	b.n	80045e6 <UART_SetConfig+0x2e6>
 80044f8:	2310      	movs	r3, #16
 80044fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80044fe:	e072      	b.n	80045e6 <UART_SetConfig+0x2e6>
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4a35      	ldr	r2, [pc, #212]	@ (80045dc <UART_SetConfig+0x2dc>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d12a      	bne.n	8004560 <UART_SetConfig+0x260>
 800450a:	4b30      	ldr	r3, [pc, #192]	@ (80045cc <UART_SetConfig+0x2cc>)
 800450c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004510:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004514:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004518:	d01a      	beq.n	8004550 <UART_SetConfig+0x250>
 800451a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800451e:	d81b      	bhi.n	8004558 <UART_SetConfig+0x258>
 8004520:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004524:	d00c      	beq.n	8004540 <UART_SetConfig+0x240>
 8004526:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800452a:	d815      	bhi.n	8004558 <UART_SetConfig+0x258>
 800452c:	2b00      	cmp	r3, #0
 800452e:	d003      	beq.n	8004538 <UART_SetConfig+0x238>
 8004530:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004534:	d008      	beq.n	8004548 <UART_SetConfig+0x248>
 8004536:	e00f      	b.n	8004558 <UART_SetConfig+0x258>
 8004538:	2300      	movs	r3, #0
 800453a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800453e:	e052      	b.n	80045e6 <UART_SetConfig+0x2e6>
 8004540:	2302      	movs	r3, #2
 8004542:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004546:	e04e      	b.n	80045e6 <UART_SetConfig+0x2e6>
 8004548:	2304      	movs	r3, #4
 800454a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800454e:	e04a      	b.n	80045e6 <UART_SetConfig+0x2e6>
 8004550:	2308      	movs	r3, #8
 8004552:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004556:	e046      	b.n	80045e6 <UART_SetConfig+0x2e6>
 8004558:	2310      	movs	r3, #16
 800455a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800455e:	e042      	b.n	80045e6 <UART_SetConfig+0x2e6>
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4a17      	ldr	r2, [pc, #92]	@ (80045c4 <UART_SetConfig+0x2c4>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d13a      	bne.n	80045e0 <UART_SetConfig+0x2e0>
 800456a:	4b18      	ldr	r3, [pc, #96]	@ (80045cc <UART_SetConfig+0x2cc>)
 800456c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004570:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004574:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004578:	d01a      	beq.n	80045b0 <UART_SetConfig+0x2b0>
 800457a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800457e:	d81b      	bhi.n	80045b8 <UART_SetConfig+0x2b8>
 8004580:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004584:	d00c      	beq.n	80045a0 <UART_SetConfig+0x2a0>
 8004586:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800458a:	d815      	bhi.n	80045b8 <UART_SetConfig+0x2b8>
 800458c:	2b00      	cmp	r3, #0
 800458e:	d003      	beq.n	8004598 <UART_SetConfig+0x298>
 8004590:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004594:	d008      	beq.n	80045a8 <UART_SetConfig+0x2a8>
 8004596:	e00f      	b.n	80045b8 <UART_SetConfig+0x2b8>
 8004598:	2300      	movs	r3, #0
 800459a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800459e:	e022      	b.n	80045e6 <UART_SetConfig+0x2e6>
 80045a0:	2302      	movs	r3, #2
 80045a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80045a6:	e01e      	b.n	80045e6 <UART_SetConfig+0x2e6>
 80045a8:	2304      	movs	r3, #4
 80045aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80045ae:	e01a      	b.n	80045e6 <UART_SetConfig+0x2e6>
 80045b0:	2308      	movs	r3, #8
 80045b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80045b6:	e016      	b.n	80045e6 <UART_SetConfig+0x2e6>
 80045b8:	2310      	movs	r3, #16
 80045ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80045be:	e012      	b.n	80045e6 <UART_SetConfig+0x2e6>
 80045c0:	efff69f3 	.word	0xefff69f3
 80045c4:	40008000 	.word	0x40008000
 80045c8:	40013800 	.word	0x40013800
 80045cc:	40021000 	.word	0x40021000
 80045d0:	40004400 	.word	0x40004400
 80045d4:	40004800 	.word	0x40004800
 80045d8:	40004c00 	.word	0x40004c00
 80045dc:	40005000 	.word	0x40005000
 80045e0:	2310      	movs	r3, #16
 80045e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4a9f      	ldr	r2, [pc, #636]	@ (8004868 <UART_SetConfig+0x568>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d17a      	bne.n	80046e6 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80045f0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80045f4:	2b08      	cmp	r3, #8
 80045f6:	d824      	bhi.n	8004642 <UART_SetConfig+0x342>
 80045f8:	a201      	add	r2, pc, #4	@ (adr r2, 8004600 <UART_SetConfig+0x300>)
 80045fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045fe:	bf00      	nop
 8004600:	08004625 	.word	0x08004625
 8004604:	08004643 	.word	0x08004643
 8004608:	0800462d 	.word	0x0800462d
 800460c:	08004643 	.word	0x08004643
 8004610:	08004633 	.word	0x08004633
 8004614:	08004643 	.word	0x08004643
 8004618:	08004643 	.word	0x08004643
 800461c:	08004643 	.word	0x08004643
 8004620:	0800463b 	.word	0x0800463b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004624:	f7fd fe74 	bl	8002310 <HAL_RCC_GetPCLK1Freq>
 8004628:	61f8      	str	r0, [r7, #28]
        break;
 800462a:	e010      	b.n	800464e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800462c:	4b8f      	ldr	r3, [pc, #572]	@ (800486c <UART_SetConfig+0x56c>)
 800462e:	61fb      	str	r3, [r7, #28]
        break;
 8004630:	e00d      	b.n	800464e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004632:	f7fd fdd5 	bl	80021e0 <HAL_RCC_GetSysClockFreq>
 8004636:	61f8      	str	r0, [r7, #28]
        break;
 8004638:	e009      	b.n	800464e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800463a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800463e:	61fb      	str	r3, [r7, #28]
        break;
 8004640:	e005      	b.n	800464e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004642:	2300      	movs	r3, #0
 8004644:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004646:	2301      	movs	r3, #1
 8004648:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800464c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800464e:	69fb      	ldr	r3, [r7, #28]
 8004650:	2b00      	cmp	r3, #0
 8004652:	f000 80fb 	beq.w	800484c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	685a      	ldr	r2, [r3, #4]
 800465a:	4613      	mov	r3, r2
 800465c:	005b      	lsls	r3, r3, #1
 800465e:	4413      	add	r3, r2
 8004660:	69fa      	ldr	r2, [r7, #28]
 8004662:	429a      	cmp	r2, r3
 8004664:	d305      	bcc.n	8004672 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	685b      	ldr	r3, [r3, #4]
 800466a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800466c:	69fa      	ldr	r2, [r7, #28]
 800466e:	429a      	cmp	r2, r3
 8004670:	d903      	bls.n	800467a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004672:	2301      	movs	r3, #1
 8004674:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004678:	e0e8      	b.n	800484c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800467a:	69fb      	ldr	r3, [r7, #28]
 800467c:	2200      	movs	r2, #0
 800467e:	461c      	mov	r4, r3
 8004680:	4615      	mov	r5, r2
 8004682:	f04f 0200 	mov.w	r2, #0
 8004686:	f04f 0300 	mov.w	r3, #0
 800468a:	022b      	lsls	r3, r5, #8
 800468c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004690:	0222      	lsls	r2, r4, #8
 8004692:	68f9      	ldr	r1, [r7, #12]
 8004694:	6849      	ldr	r1, [r1, #4]
 8004696:	0849      	lsrs	r1, r1, #1
 8004698:	2000      	movs	r0, #0
 800469a:	4688      	mov	r8, r1
 800469c:	4681      	mov	r9, r0
 800469e:	eb12 0a08 	adds.w	sl, r2, r8
 80046a2:	eb43 0b09 	adc.w	fp, r3, r9
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	2200      	movs	r2, #0
 80046ac:	603b      	str	r3, [r7, #0]
 80046ae:	607a      	str	r2, [r7, #4]
 80046b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80046b4:	4650      	mov	r0, sl
 80046b6:	4659      	mov	r1, fp
 80046b8:	f7fb fdda 	bl	8000270 <__aeabi_uldivmod>
 80046bc:	4602      	mov	r2, r0
 80046be:	460b      	mov	r3, r1
 80046c0:	4613      	mov	r3, r2
 80046c2:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80046c4:	69bb      	ldr	r3, [r7, #24]
 80046c6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80046ca:	d308      	bcc.n	80046de <UART_SetConfig+0x3de>
 80046cc:	69bb      	ldr	r3, [r7, #24]
 80046ce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80046d2:	d204      	bcs.n	80046de <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	69ba      	ldr	r2, [r7, #24]
 80046da:	60da      	str	r2, [r3, #12]
 80046dc:	e0b6      	b.n	800484c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80046de:	2301      	movs	r3, #1
 80046e0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80046e4:	e0b2      	b.n	800484c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	69db      	ldr	r3, [r3, #28]
 80046ea:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80046ee:	d15e      	bne.n	80047ae <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80046f0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80046f4:	2b08      	cmp	r3, #8
 80046f6:	d828      	bhi.n	800474a <UART_SetConfig+0x44a>
 80046f8:	a201      	add	r2, pc, #4	@ (adr r2, 8004700 <UART_SetConfig+0x400>)
 80046fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046fe:	bf00      	nop
 8004700:	08004725 	.word	0x08004725
 8004704:	0800472d 	.word	0x0800472d
 8004708:	08004735 	.word	0x08004735
 800470c:	0800474b 	.word	0x0800474b
 8004710:	0800473b 	.word	0x0800473b
 8004714:	0800474b 	.word	0x0800474b
 8004718:	0800474b 	.word	0x0800474b
 800471c:	0800474b 	.word	0x0800474b
 8004720:	08004743 	.word	0x08004743
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004724:	f7fd fdf4 	bl	8002310 <HAL_RCC_GetPCLK1Freq>
 8004728:	61f8      	str	r0, [r7, #28]
        break;
 800472a:	e014      	b.n	8004756 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800472c:	f7fd fe06 	bl	800233c <HAL_RCC_GetPCLK2Freq>
 8004730:	61f8      	str	r0, [r7, #28]
        break;
 8004732:	e010      	b.n	8004756 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004734:	4b4d      	ldr	r3, [pc, #308]	@ (800486c <UART_SetConfig+0x56c>)
 8004736:	61fb      	str	r3, [r7, #28]
        break;
 8004738:	e00d      	b.n	8004756 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800473a:	f7fd fd51 	bl	80021e0 <HAL_RCC_GetSysClockFreq>
 800473e:	61f8      	str	r0, [r7, #28]
        break;
 8004740:	e009      	b.n	8004756 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004742:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004746:	61fb      	str	r3, [r7, #28]
        break;
 8004748:	e005      	b.n	8004756 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800474a:	2300      	movs	r3, #0
 800474c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800474e:	2301      	movs	r3, #1
 8004750:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004754:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004756:	69fb      	ldr	r3, [r7, #28]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d077      	beq.n	800484c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800475c:	69fb      	ldr	r3, [r7, #28]
 800475e:	005a      	lsls	r2, r3, #1
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	085b      	lsrs	r3, r3, #1
 8004766:	441a      	add	r2, r3
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	685b      	ldr	r3, [r3, #4]
 800476c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004770:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004772:	69bb      	ldr	r3, [r7, #24]
 8004774:	2b0f      	cmp	r3, #15
 8004776:	d916      	bls.n	80047a6 <UART_SetConfig+0x4a6>
 8004778:	69bb      	ldr	r3, [r7, #24]
 800477a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800477e:	d212      	bcs.n	80047a6 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004780:	69bb      	ldr	r3, [r7, #24]
 8004782:	b29b      	uxth	r3, r3
 8004784:	f023 030f 	bic.w	r3, r3, #15
 8004788:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800478a:	69bb      	ldr	r3, [r7, #24]
 800478c:	085b      	lsrs	r3, r3, #1
 800478e:	b29b      	uxth	r3, r3
 8004790:	f003 0307 	and.w	r3, r3, #7
 8004794:	b29a      	uxth	r2, r3
 8004796:	8afb      	ldrh	r3, [r7, #22]
 8004798:	4313      	orrs	r3, r2
 800479a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	8afa      	ldrh	r2, [r7, #22]
 80047a2:	60da      	str	r2, [r3, #12]
 80047a4:	e052      	b.n	800484c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80047a6:	2301      	movs	r3, #1
 80047a8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80047ac:	e04e      	b.n	800484c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80047ae:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80047b2:	2b08      	cmp	r3, #8
 80047b4:	d827      	bhi.n	8004806 <UART_SetConfig+0x506>
 80047b6:	a201      	add	r2, pc, #4	@ (adr r2, 80047bc <UART_SetConfig+0x4bc>)
 80047b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047bc:	080047e1 	.word	0x080047e1
 80047c0:	080047e9 	.word	0x080047e9
 80047c4:	080047f1 	.word	0x080047f1
 80047c8:	08004807 	.word	0x08004807
 80047cc:	080047f7 	.word	0x080047f7
 80047d0:	08004807 	.word	0x08004807
 80047d4:	08004807 	.word	0x08004807
 80047d8:	08004807 	.word	0x08004807
 80047dc:	080047ff 	.word	0x080047ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80047e0:	f7fd fd96 	bl	8002310 <HAL_RCC_GetPCLK1Freq>
 80047e4:	61f8      	str	r0, [r7, #28]
        break;
 80047e6:	e014      	b.n	8004812 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80047e8:	f7fd fda8 	bl	800233c <HAL_RCC_GetPCLK2Freq>
 80047ec:	61f8      	str	r0, [r7, #28]
        break;
 80047ee:	e010      	b.n	8004812 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80047f0:	4b1e      	ldr	r3, [pc, #120]	@ (800486c <UART_SetConfig+0x56c>)
 80047f2:	61fb      	str	r3, [r7, #28]
        break;
 80047f4:	e00d      	b.n	8004812 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80047f6:	f7fd fcf3 	bl	80021e0 <HAL_RCC_GetSysClockFreq>
 80047fa:	61f8      	str	r0, [r7, #28]
        break;
 80047fc:	e009      	b.n	8004812 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80047fe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004802:	61fb      	str	r3, [r7, #28]
        break;
 8004804:	e005      	b.n	8004812 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004806:	2300      	movs	r3, #0
 8004808:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800480a:	2301      	movs	r3, #1
 800480c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004810:	bf00      	nop
    }

    if (pclk != 0U)
 8004812:	69fb      	ldr	r3, [r7, #28]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d019      	beq.n	800484c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	685b      	ldr	r3, [r3, #4]
 800481c:	085a      	lsrs	r2, r3, #1
 800481e:	69fb      	ldr	r3, [r7, #28]
 8004820:	441a      	add	r2, r3
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	685b      	ldr	r3, [r3, #4]
 8004826:	fbb2 f3f3 	udiv	r3, r2, r3
 800482a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800482c:	69bb      	ldr	r3, [r7, #24]
 800482e:	2b0f      	cmp	r3, #15
 8004830:	d909      	bls.n	8004846 <UART_SetConfig+0x546>
 8004832:	69bb      	ldr	r3, [r7, #24]
 8004834:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004838:	d205      	bcs.n	8004846 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800483a:	69bb      	ldr	r3, [r7, #24]
 800483c:	b29a      	uxth	r2, r3
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	60da      	str	r2, [r3, #12]
 8004844:	e002      	b.n	800484c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004846:	2301      	movs	r3, #1
 8004848:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	2200      	movs	r2, #0
 8004850:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	2200      	movs	r2, #0
 8004856:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004858:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 800485c:	4618      	mov	r0, r3
 800485e:	3728      	adds	r7, #40	@ 0x28
 8004860:	46bd      	mov	sp, r7
 8004862:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004866:	bf00      	nop
 8004868:	40008000 	.word	0x40008000
 800486c:	00f42400 	.word	0x00f42400

08004870 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004870:	b480      	push	{r7}
 8004872:	b083      	sub	sp, #12
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800487c:	f003 0308 	and.w	r3, r3, #8
 8004880:	2b00      	cmp	r3, #0
 8004882:	d00a      	beq.n	800489a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	685b      	ldr	r3, [r3, #4]
 800488a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	430a      	orrs	r2, r1
 8004898:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800489e:	f003 0301 	and.w	r3, r3, #1
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d00a      	beq.n	80048bc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	685b      	ldr	r3, [r3, #4]
 80048ac:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	430a      	orrs	r2, r1
 80048ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048c0:	f003 0302 	and.w	r3, r3, #2
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d00a      	beq.n	80048de <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	685b      	ldr	r3, [r3, #4]
 80048ce:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	430a      	orrs	r2, r1
 80048dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048e2:	f003 0304 	and.w	r3, r3, #4
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d00a      	beq.n	8004900 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	685b      	ldr	r3, [r3, #4]
 80048f0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	430a      	orrs	r2, r1
 80048fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004904:	f003 0310 	and.w	r3, r3, #16
 8004908:	2b00      	cmp	r3, #0
 800490a:	d00a      	beq.n	8004922 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	689b      	ldr	r3, [r3, #8]
 8004912:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	430a      	orrs	r2, r1
 8004920:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004926:	f003 0320 	and.w	r3, r3, #32
 800492a:	2b00      	cmp	r3, #0
 800492c:	d00a      	beq.n	8004944 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	689b      	ldr	r3, [r3, #8]
 8004934:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	430a      	orrs	r2, r1
 8004942:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004948:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800494c:	2b00      	cmp	r3, #0
 800494e:	d01a      	beq.n	8004986 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	685b      	ldr	r3, [r3, #4]
 8004956:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	430a      	orrs	r2, r1
 8004964:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800496a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800496e:	d10a      	bne.n	8004986 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	685b      	ldr	r3, [r3, #4]
 8004976:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	430a      	orrs	r2, r1
 8004984:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800498a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800498e:	2b00      	cmp	r3, #0
 8004990:	d00a      	beq.n	80049a8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	685b      	ldr	r3, [r3, #4]
 8004998:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	430a      	orrs	r2, r1
 80049a6:	605a      	str	r2, [r3, #4]
  }
}
 80049a8:	bf00      	nop
 80049aa:	370c      	adds	r7, #12
 80049ac:	46bd      	mov	sp, r7
 80049ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b2:	4770      	bx	lr

080049b4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b098      	sub	sp, #96	@ 0x60
 80049b8:	af02      	add	r7, sp, #8
 80049ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2200      	movs	r2, #0
 80049c0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80049c4:	f7fc fbec 	bl	80011a0 <HAL_GetTick>
 80049c8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f003 0308 	and.w	r3, r3, #8
 80049d4:	2b08      	cmp	r3, #8
 80049d6:	d12e      	bne.n	8004a36 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80049d8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80049dc:	9300      	str	r3, [sp, #0]
 80049de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80049e0:	2200      	movs	r2, #0
 80049e2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80049e6:	6878      	ldr	r0, [r7, #4]
 80049e8:	f000 f88c 	bl	8004b04 <UART_WaitOnFlagUntilTimeout>
 80049ec:	4603      	mov	r3, r0
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d021      	beq.n	8004a36 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049fa:	e853 3f00 	ldrex	r3, [r3]
 80049fe:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004a00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a02:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004a06:	653b      	str	r3, [r7, #80]	@ 0x50
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	461a      	mov	r2, r3
 8004a0e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004a10:	647b      	str	r3, [r7, #68]	@ 0x44
 8004a12:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a14:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004a16:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004a18:	e841 2300 	strex	r3, r2, [r1]
 8004a1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004a1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d1e6      	bne.n	80049f2 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2220      	movs	r2, #32
 8004a28:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004a32:	2303      	movs	r3, #3
 8004a34:	e062      	b.n	8004afc <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f003 0304 	and.w	r3, r3, #4
 8004a40:	2b04      	cmp	r3, #4
 8004a42:	d149      	bne.n	8004ad8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004a44:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004a48:	9300      	str	r3, [sp, #0]
 8004a4a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004a52:	6878      	ldr	r0, [r7, #4]
 8004a54:	f000 f856 	bl	8004b04 <UART_WaitOnFlagUntilTimeout>
 8004a58:	4603      	mov	r3, r0
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d03c      	beq.n	8004ad8 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a66:	e853 3f00 	ldrex	r3, [r3]
 8004a6a:	623b      	str	r3, [r7, #32]
   return(result);
 8004a6c:	6a3b      	ldr	r3, [r7, #32]
 8004a6e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004a72:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	461a      	mov	r2, r3
 8004a7a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004a7c:	633b      	str	r3, [r7, #48]	@ 0x30
 8004a7e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a80:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004a82:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004a84:	e841 2300 	strex	r3, r2, [r1]
 8004a88:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004a8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d1e6      	bne.n	8004a5e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	3308      	adds	r3, #8
 8004a96:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a98:	693b      	ldr	r3, [r7, #16]
 8004a9a:	e853 3f00 	ldrex	r3, [r3]
 8004a9e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	f023 0301 	bic.w	r3, r3, #1
 8004aa6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	3308      	adds	r3, #8
 8004aae:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004ab0:	61fa      	str	r2, [r7, #28]
 8004ab2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ab4:	69b9      	ldr	r1, [r7, #24]
 8004ab6:	69fa      	ldr	r2, [r7, #28]
 8004ab8:	e841 2300 	strex	r3, r2, [r1]
 8004abc:	617b      	str	r3, [r7, #20]
   return(result);
 8004abe:	697b      	ldr	r3, [r7, #20]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d1e5      	bne.n	8004a90 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2220      	movs	r2, #32
 8004ac8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2200      	movs	r2, #0
 8004ad0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ad4:	2303      	movs	r3, #3
 8004ad6:	e011      	b.n	8004afc <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2220      	movs	r2, #32
 8004adc:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2220      	movs	r2, #32
 8004ae2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2200      	movs	r2, #0
 8004aea:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2200      	movs	r2, #0
 8004af0:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2200      	movs	r2, #0
 8004af6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004afa:	2300      	movs	r3, #0
}
 8004afc:	4618      	mov	r0, r3
 8004afe:	3758      	adds	r7, #88	@ 0x58
 8004b00:	46bd      	mov	sp, r7
 8004b02:	bd80      	pop	{r7, pc}

08004b04 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b084      	sub	sp, #16
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	60f8      	str	r0, [r7, #12]
 8004b0c:	60b9      	str	r1, [r7, #8]
 8004b0e:	603b      	str	r3, [r7, #0]
 8004b10:	4613      	mov	r3, r2
 8004b12:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b14:	e049      	b.n	8004baa <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b16:	69bb      	ldr	r3, [r7, #24]
 8004b18:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004b1c:	d045      	beq.n	8004baa <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b1e:	f7fc fb3f 	bl	80011a0 <HAL_GetTick>
 8004b22:	4602      	mov	r2, r0
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	1ad3      	subs	r3, r2, r3
 8004b28:	69ba      	ldr	r2, [r7, #24]
 8004b2a:	429a      	cmp	r2, r3
 8004b2c:	d302      	bcc.n	8004b34 <UART_WaitOnFlagUntilTimeout+0x30>
 8004b2e:	69bb      	ldr	r3, [r7, #24]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d101      	bne.n	8004b38 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004b34:	2303      	movs	r3, #3
 8004b36:	e048      	b.n	8004bca <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f003 0304 	and.w	r3, r3, #4
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d031      	beq.n	8004baa <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	69db      	ldr	r3, [r3, #28]
 8004b4c:	f003 0308 	and.w	r3, r3, #8
 8004b50:	2b08      	cmp	r3, #8
 8004b52:	d110      	bne.n	8004b76 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	2208      	movs	r2, #8
 8004b5a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004b5c:	68f8      	ldr	r0, [r7, #12]
 8004b5e:	f000 f838 	bl	8004bd2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	2208      	movs	r2, #8
 8004b66:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004b72:	2301      	movs	r3, #1
 8004b74:	e029      	b.n	8004bca <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	69db      	ldr	r3, [r3, #28]
 8004b7c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004b80:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004b84:	d111      	bne.n	8004baa <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004b8e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004b90:	68f8      	ldr	r0, [r7, #12]
 8004b92:	f000 f81e 	bl	8004bd2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	2220      	movs	r2, #32
 8004b9a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004ba6:	2303      	movs	r3, #3
 8004ba8:	e00f      	b.n	8004bca <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	69da      	ldr	r2, [r3, #28]
 8004bb0:	68bb      	ldr	r3, [r7, #8]
 8004bb2:	4013      	ands	r3, r2
 8004bb4:	68ba      	ldr	r2, [r7, #8]
 8004bb6:	429a      	cmp	r2, r3
 8004bb8:	bf0c      	ite	eq
 8004bba:	2301      	moveq	r3, #1
 8004bbc:	2300      	movne	r3, #0
 8004bbe:	b2db      	uxtb	r3, r3
 8004bc0:	461a      	mov	r2, r3
 8004bc2:	79fb      	ldrb	r3, [r7, #7]
 8004bc4:	429a      	cmp	r2, r3
 8004bc6:	d0a6      	beq.n	8004b16 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004bc8:	2300      	movs	r3, #0
}
 8004bca:	4618      	mov	r0, r3
 8004bcc:	3710      	adds	r7, #16
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	bd80      	pop	{r7, pc}

08004bd2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004bd2:	b480      	push	{r7}
 8004bd4:	b095      	sub	sp, #84	@ 0x54
 8004bd6:	af00      	add	r7, sp, #0
 8004bd8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004be0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004be2:	e853 3f00 	ldrex	r3, [r3]
 8004be6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004be8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bea:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004bee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	461a      	mov	r2, r3
 8004bf6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004bf8:	643b      	str	r3, [r7, #64]	@ 0x40
 8004bfa:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bfc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004bfe:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004c00:	e841 2300 	strex	r3, r2, [r1]
 8004c04:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004c06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d1e6      	bne.n	8004bda <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	3308      	adds	r3, #8
 8004c12:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c14:	6a3b      	ldr	r3, [r7, #32]
 8004c16:	e853 3f00 	ldrex	r3, [r3]
 8004c1a:	61fb      	str	r3, [r7, #28]
   return(result);
 8004c1c:	69fb      	ldr	r3, [r7, #28]
 8004c1e:	f023 0301 	bic.w	r3, r3, #1
 8004c22:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	3308      	adds	r3, #8
 8004c2a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004c2c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004c2e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c30:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004c32:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004c34:	e841 2300 	strex	r3, r2, [r1]
 8004c38:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004c3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d1e5      	bne.n	8004c0c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c44:	2b01      	cmp	r3, #1
 8004c46:	d118      	bne.n	8004c7a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	e853 3f00 	ldrex	r3, [r3]
 8004c54:	60bb      	str	r3, [r7, #8]
   return(result);
 8004c56:	68bb      	ldr	r3, [r7, #8]
 8004c58:	f023 0310 	bic.w	r3, r3, #16
 8004c5c:	647b      	str	r3, [r7, #68]	@ 0x44
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	461a      	mov	r2, r3
 8004c64:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004c66:	61bb      	str	r3, [r7, #24]
 8004c68:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c6a:	6979      	ldr	r1, [r7, #20]
 8004c6c:	69ba      	ldr	r2, [r7, #24]
 8004c6e:	e841 2300 	strex	r3, r2, [r1]
 8004c72:	613b      	str	r3, [r7, #16]
   return(result);
 8004c74:	693b      	ldr	r3, [r7, #16]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d1e6      	bne.n	8004c48 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2220      	movs	r2, #32
 8004c7e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2200      	movs	r2, #0
 8004c86:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004c8e:	bf00      	nop
 8004c90:	3754      	adds	r7, #84	@ 0x54
 8004c92:	46bd      	mov	sp, r7
 8004c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c98:	4770      	bx	lr
	...

08004c9c <WIZCHIP_READ>:

#if   (_WIZCHIP_ == 5500)
////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b084      	sub	sp, #16
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
   uint8_t ret;
   uint8_t spi_data[3];

   WIZCHIP_CRITICAL_ENTER();
 8004ca4:	4b22      	ldr	r3, [pc, #136]	@ (8004d30 <WIZCHIP_READ+0x94>)
 8004ca6:	68db      	ldr	r3, [r3, #12]
 8004ca8:	4798      	blx	r3
   WIZCHIP.CS._select();
 8004caa:	4b21      	ldr	r3, [pc, #132]	@ (8004d30 <WIZCHIP_READ+0x94>)
 8004cac:	695b      	ldr	r3, [r3, #20]
 8004cae:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8004cb0:	4b1f      	ldr	r3, [pc, #124]	@ (8004d30 <WIZCHIP_READ+0x94>)
 8004cb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d003      	beq.n	8004cc0 <WIZCHIP_READ+0x24>
 8004cb8:	4b1d      	ldr	r3, [pc, #116]	@ (8004d30 <WIZCHIP_READ+0x94>)
 8004cba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d114      	bne.n	8004cea <WIZCHIP_READ+0x4e>
   {
	   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8004cc0:	4b1b      	ldr	r3, [pc, #108]	@ (8004d30 <WIZCHIP_READ+0x94>)
 8004cc2:	6a1b      	ldr	r3, [r3, #32]
 8004cc4:	687a      	ldr	r2, [r7, #4]
 8004cc6:	0c12      	lsrs	r2, r2, #16
 8004cc8:	b2d2      	uxtb	r2, r2
 8004cca:	4610      	mov	r0, r2
 8004ccc:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8004cce:	4b18      	ldr	r3, [pc, #96]	@ (8004d30 <WIZCHIP_READ+0x94>)
 8004cd0:	6a1b      	ldr	r3, [r3, #32]
 8004cd2:	687a      	ldr	r2, [r7, #4]
 8004cd4:	0a12      	lsrs	r2, r2, #8
 8004cd6:	b2d2      	uxtb	r2, r2
 8004cd8:	4610      	mov	r0, r2
 8004cda:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8004cdc:	4b14      	ldr	r3, [pc, #80]	@ (8004d30 <WIZCHIP_READ+0x94>)
 8004cde:	6a1b      	ldr	r3, [r3, #32]
 8004ce0:	687a      	ldr	r2, [r7, #4]
 8004ce2:	b2d2      	uxtb	r2, r2
 8004ce4:	4610      	mov	r0, r2
 8004ce6:	4798      	blx	r3
 8004ce8:	e011      	b.n	8004d0e <WIZCHIP_READ+0x72>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	0c1b      	lsrs	r3, r3, #16
 8004cee:	b2db      	uxtb	r3, r3
 8004cf0:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	0a1b      	lsrs	r3, r3, #8
 8004cf6:	b2db      	uxtb	r3, r3
 8004cf8:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	b2db      	uxtb	r3, r3
 8004cfe:	73bb      	strb	r3, [r7, #14]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8004d00:	4b0b      	ldr	r3, [pc, #44]	@ (8004d30 <WIZCHIP_READ+0x94>)
 8004d02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d04:	f107 020c 	add.w	r2, r7, #12
 8004d08:	2103      	movs	r1, #3
 8004d0a:	4610      	mov	r0, r2
 8004d0c:	4798      	blx	r3
   }
   ret = WIZCHIP.IF.SPI._read_byte();
 8004d0e:	4b08      	ldr	r3, [pc, #32]	@ (8004d30 <WIZCHIP_READ+0x94>)
 8004d10:	69db      	ldr	r3, [r3, #28]
 8004d12:	4798      	blx	r3
 8004d14:	4603      	mov	r3, r0
 8004d16:	73fb      	strb	r3, [r7, #15]

   WIZCHIP.CS._deselect();
 8004d18:	4b05      	ldr	r3, [pc, #20]	@ (8004d30 <WIZCHIP_READ+0x94>)
 8004d1a:	699b      	ldr	r3, [r3, #24]
 8004d1c:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8004d1e:	4b04      	ldr	r3, [pc, #16]	@ (8004d30 <WIZCHIP_READ+0x94>)
 8004d20:	691b      	ldr	r3, [r3, #16]
 8004d22:	4798      	blx	r3
   return ret;
 8004d24:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d26:	4618      	mov	r0, r3
 8004d28:	3710      	adds	r7, #16
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	bd80      	pop	{r7, pc}
 8004d2e:	bf00      	nop
 8004d30:	20000018 	.word	0x20000018

08004d34 <WIZCHIP_WRITE>:

void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b084      	sub	sp, #16
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
 8004d3c:	460b      	mov	r3, r1
 8004d3e:	70fb      	strb	r3, [r7, #3]
   uint8_t spi_data[4];

   WIZCHIP_CRITICAL_ENTER();
 8004d40:	4b22      	ldr	r3, [pc, #136]	@ (8004dcc <WIZCHIP_WRITE+0x98>)
 8004d42:	68db      	ldr	r3, [r3, #12]
 8004d44:	4798      	blx	r3
   WIZCHIP.CS._select();
 8004d46:	4b21      	ldr	r3, [pc, #132]	@ (8004dcc <WIZCHIP_WRITE+0x98>)
 8004d48:	695b      	ldr	r3, [r3, #20]
 8004d4a:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	f043 0304 	orr.w	r3, r3, #4
 8004d52:	607b      	str	r3, [r7, #4]

   //if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8004d54:	4b1d      	ldr	r3, [pc, #116]	@ (8004dcc <WIZCHIP_WRITE+0x98>)
 8004d56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d119      	bne.n	8004d90 <WIZCHIP_WRITE+0x5c>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8004d5c:	4b1b      	ldr	r3, [pc, #108]	@ (8004dcc <WIZCHIP_WRITE+0x98>)
 8004d5e:	6a1b      	ldr	r3, [r3, #32]
 8004d60:	687a      	ldr	r2, [r7, #4]
 8004d62:	0c12      	lsrs	r2, r2, #16
 8004d64:	b2d2      	uxtb	r2, r2
 8004d66:	4610      	mov	r0, r2
 8004d68:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8004d6a:	4b18      	ldr	r3, [pc, #96]	@ (8004dcc <WIZCHIP_WRITE+0x98>)
 8004d6c:	6a1b      	ldr	r3, [r3, #32]
 8004d6e:	687a      	ldr	r2, [r7, #4]
 8004d70:	0a12      	lsrs	r2, r2, #8
 8004d72:	b2d2      	uxtb	r2, r2
 8004d74:	4610      	mov	r0, r2
 8004d76:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8004d78:	4b14      	ldr	r3, [pc, #80]	@ (8004dcc <WIZCHIP_WRITE+0x98>)
 8004d7a:	6a1b      	ldr	r3, [r3, #32]
 8004d7c:	687a      	ldr	r2, [r7, #4]
 8004d7e:	b2d2      	uxtb	r2, r2
 8004d80:	4610      	mov	r0, r2
 8004d82:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte(wb);
 8004d84:	4b11      	ldr	r3, [pc, #68]	@ (8004dcc <WIZCHIP_WRITE+0x98>)
 8004d86:	6a1b      	ldr	r3, [r3, #32]
 8004d88:	78fa      	ldrb	r2, [r7, #3]
 8004d8a:	4610      	mov	r0, r2
 8004d8c:	4798      	blx	r3
 8004d8e:	e013      	b.n	8004db8 <WIZCHIP_WRITE+0x84>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	0c1b      	lsrs	r3, r3, #16
 8004d94:	b2db      	uxtb	r3, r3
 8004d96:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	0a1b      	lsrs	r3, r3, #8
 8004d9c:	b2db      	uxtb	r3, r3
 8004d9e:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	b2db      	uxtb	r3, r3
 8004da4:	73bb      	strb	r3, [r7, #14]
		spi_data[3] = wb;
 8004da6:	78fb      	ldrb	r3, [r7, #3]
 8004da8:	73fb      	strb	r3, [r7, #15]
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
 8004daa:	4b08      	ldr	r3, [pc, #32]	@ (8004dcc <WIZCHIP_WRITE+0x98>)
 8004dac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dae:	f107 020c 	add.w	r2, r7, #12
 8004db2:	2104      	movs	r1, #4
 8004db4:	4610      	mov	r0, r2
 8004db6:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8004db8:	4b04      	ldr	r3, [pc, #16]	@ (8004dcc <WIZCHIP_WRITE+0x98>)
 8004dba:	699b      	ldr	r3, [r3, #24]
 8004dbc:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8004dbe:	4b03      	ldr	r3, [pc, #12]	@ (8004dcc <WIZCHIP_WRITE+0x98>)
 8004dc0:	691b      	ldr	r3, [r3, #16]
 8004dc2:	4798      	blx	r3
}
 8004dc4:	bf00      	nop
 8004dc6:	3710      	adds	r7, #16
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	bd80      	pop	{r7, pc}
 8004dcc:	20000018 	.word	0x20000018

08004dd0 <WIZCHIP_READ_BUF>:
         
void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8004dd0:	b590      	push	{r4, r7, lr}
 8004dd2:	b087      	sub	sp, #28
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	60f8      	str	r0, [r7, #12]
 8004dd8:	60b9      	str	r1, [r7, #8]
 8004dda:	4613      	mov	r3, r2
 8004ddc:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 8004dde:	4b2b      	ldr	r3, [pc, #172]	@ (8004e8c <WIZCHIP_READ_BUF+0xbc>)
 8004de0:	68db      	ldr	r3, [r3, #12]
 8004de2:	4798      	blx	r3
   WIZCHIP.CS._select();
 8004de4:	4b29      	ldr	r3, [pc, #164]	@ (8004e8c <WIZCHIP_READ_BUF+0xbc>)
 8004de6:	695b      	ldr	r3, [r3, #20]
 8004de8:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8004dea:	4b28      	ldr	r3, [pc, #160]	@ (8004e8c <WIZCHIP_READ_BUF+0xbc>)
 8004dec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d003      	beq.n	8004dfa <WIZCHIP_READ_BUF+0x2a>
 8004df2:	4b26      	ldr	r3, [pc, #152]	@ (8004e8c <WIZCHIP_READ_BUF+0xbc>)
 8004df4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d126      	bne.n	8004e48 <WIZCHIP_READ_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8004dfa:	4b24      	ldr	r3, [pc, #144]	@ (8004e8c <WIZCHIP_READ_BUF+0xbc>)
 8004dfc:	6a1b      	ldr	r3, [r3, #32]
 8004dfe:	68fa      	ldr	r2, [r7, #12]
 8004e00:	0c12      	lsrs	r2, r2, #16
 8004e02:	b2d2      	uxtb	r2, r2
 8004e04:	4610      	mov	r0, r2
 8004e06:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8004e08:	4b20      	ldr	r3, [pc, #128]	@ (8004e8c <WIZCHIP_READ_BUF+0xbc>)
 8004e0a:	6a1b      	ldr	r3, [r3, #32]
 8004e0c:	68fa      	ldr	r2, [r7, #12]
 8004e0e:	0a12      	lsrs	r2, r2, #8
 8004e10:	b2d2      	uxtb	r2, r2
 8004e12:	4610      	mov	r0, r2
 8004e14:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8004e16:	4b1d      	ldr	r3, [pc, #116]	@ (8004e8c <WIZCHIP_READ_BUF+0xbc>)
 8004e18:	6a1b      	ldr	r3, [r3, #32]
 8004e1a:	68fa      	ldr	r2, [r7, #12]
 8004e1c:	b2d2      	uxtb	r2, r2
 8004e1e:	4610      	mov	r0, r2
 8004e20:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8004e22:	2300      	movs	r3, #0
 8004e24:	82fb      	strh	r3, [r7, #22]
 8004e26:	e00a      	b.n	8004e3e <WIZCHIP_READ_BUF+0x6e>
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
 8004e28:	4b18      	ldr	r3, [pc, #96]	@ (8004e8c <WIZCHIP_READ_BUF+0xbc>)
 8004e2a:	69db      	ldr	r3, [r3, #28]
 8004e2c:	8afa      	ldrh	r2, [r7, #22]
 8004e2e:	68b9      	ldr	r1, [r7, #8]
 8004e30:	188c      	adds	r4, r1, r2
 8004e32:	4798      	blx	r3
 8004e34:	4603      	mov	r3, r0
 8004e36:	7023      	strb	r3, [r4, #0]
		for(i = 0; i < len; i++)
 8004e38:	8afb      	ldrh	r3, [r7, #22]
 8004e3a:	3301      	adds	r3, #1
 8004e3c:	82fb      	strh	r3, [r7, #22]
 8004e3e:	8afa      	ldrh	r2, [r7, #22]
 8004e40:	88fb      	ldrh	r3, [r7, #6]
 8004e42:	429a      	cmp	r2, r3
 8004e44:	d3f0      	bcc.n	8004e28 <WIZCHIP_READ_BUF+0x58>
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8004e46:	e017      	b.n	8004e78 <WIZCHIP_READ_BUF+0xa8>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	0c1b      	lsrs	r3, r3, #16
 8004e4c:	b2db      	uxtb	r3, r3
 8004e4e:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	0a1b      	lsrs	r3, r3, #8
 8004e54:	b2db      	uxtb	r3, r3
 8004e56:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	b2db      	uxtb	r3, r3
 8004e5c:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8004e5e:	4b0b      	ldr	r3, [pc, #44]	@ (8004e8c <WIZCHIP_READ_BUF+0xbc>)
 8004e60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e62:	f107 0210 	add.w	r2, r7, #16
 8004e66:	2103      	movs	r1, #3
 8004e68:	4610      	mov	r0, r2
 8004e6a:	4798      	blx	r3
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
 8004e6c:	4b07      	ldr	r3, [pc, #28]	@ (8004e8c <WIZCHIP_READ_BUF+0xbc>)
 8004e6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e70:	88fa      	ldrh	r2, [r7, #6]
 8004e72:	4611      	mov	r1, r2
 8004e74:	68b8      	ldr	r0, [r7, #8]
 8004e76:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8004e78:	4b04      	ldr	r3, [pc, #16]	@ (8004e8c <WIZCHIP_READ_BUF+0xbc>)
 8004e7a:	699b      	ldr	r3, [r3, #24]
 8004e7c:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8004e7e:	4b03      	ldr	r3, [pc, #12]	@ (8004e8c <WIZCHIP_READ_BUF+0xbc>)
 8004e80:	691b      	ldr	r3, [r3, #16]
 8004e82:	4798      	blx	r3
}
 8004e84:	bf00      	nop
 8004e86:	371c      	adds	r7, #28
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	bd90      	pop	{r4, r7, pc}
 8004e8c:	20000018 	.word	0x20000018

08004e90 <WIZCHIP_WRITE_BUF>:

void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b086      	sub	sp, #24
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	60f8      	str	r0, [r7, #12]
 8004e98:	60b9      	str	r1, [r7, #8]
 8004e9a:	4613      	mov	r3, r2
 8004e9c:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 8004e9e:	4b2b      	ldr	r3, [pc, #172]	@ (8004f4c <WIZCHIP_WRITE_BUF+0xbc>)
 8004ea0:	68db      	ldr	r3, [r3, #12]
 8004ea2:	4798      	blx	r3
   WIZCHIP.CS._select();
 8004ea4:	4b29      	ldr	r3, [pc, #164]	@ (8004f4c <WIZCHIP_WRITE_BUF+0xbc>)
 8004ea6:	695b      	ldr	r3, [r3, #20]
 8004ea8:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	f043 0304 	orr.w	r3, r3, #4
 8004eb0:	60fb      	str	r3, [r7, #12]

   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8004eb2:	4b26      	ldr	r3, [pc, #152]	@ (8004f4c <WIZCHIP_WRITE_BUF+0xbc>)
 8004eb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d126      	bne.n	8004f08 <WIZCHIP_WRITE_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8004eba:	4b24      	ldr	r3, [pc, #144]	@ (8004f4c <WIZCHIP_WRITE_BUF+0xbc>)
 8004ebc:	6a1b      	ldr	r3, [r3, #32]
 8004ebe:	68fa      	ldr	r2, [r7, #12]
 8004ec0:	0c12      	lsrs	r2, r2, #16
 8004ec2:	b2d2      	uxtb	r2, r2
 8004ec4:	4610      	mov	r0, r2
 8004ec6:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8004ec8:	4b20      	ldr	r3, [pc, #128]	@ (8004f4c <WIZCHIP_WRITE_BUF+0xbc>)
 8004eca:	6a1b      	ldr	r3, [r3, #32]
 8004ecc:	68fa      	ldr	r2, [r7, #12]
 8004ece:	0a12      	lsrs	r2, r2, #8
 8004ed0:	b2d2      	uxtb	r2, r2
 8004ed2:	4610      	mov	r0, r2
 8004ed4:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8004ed6:	4b1d      	ldr	r3, [pc, #116]	@ (8004f4c <WIZCHIP_WRITE_BUF+0xbc>)
 8004ed8:	6a1b      	ldr	r3, [r3, #32]
 8004eda:	68fa      	ldr	r2, [r7, #12]
 8004edc:	b2d2      	uxtb	r2, r2
 8004ede:	4610      	mov	r0, r2
 8004ee0:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	82fb      	strh	r3, [r7, #22]
 8004ee6:	e00a      	b.n	8004efe <WIZCHIP_WRITE_BUF+0x6e>
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
 8004ee8:	4b18      	ldr	r3, [pc, #96]	@ (8004f4c <WIZCHIP_WRITE_BUF+0xbc>)
 8004eea:	6a1b      	ldr	r3, [r3, #32]
 8004eec:	8afa      	ldrh	r2, [r7, #22]
 8004eee:	68b9      	ldr	r1, [r7, #8]
 8004ef0:	440a      	add	r2, r1
 8004ef2:	7812      	ldrb	r2, [r2, #0]
 8004ef4:	4610      	mov	r0, r2
 8004ef6:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8004ef8:	8afb      	ldrh	r3, [r7, #22]
 8004efa:	3301      	adds	r3, #1
 8004efc:	82fb      	strh	r3, [r7, #22]
 8004efe:	8afa      	ldrh	r2, [r7, #22]
 8004f00:	88fb      	ldrh	r3, [r7, #6]
 8004f02:	429a      	cmp	r2, r3
 8004f04:	d3f0      	bcc.n	8004ee8 <WIZCHIP_WRITE_BUF+0x58>
 8004f06:	e017      	b.n	8004f38 <WIZCHIP_WRITE_BUF+0xa8>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	0c1b      	lsrs	r3, r3, #16
 8004f0c:	b2db      	uxtb	r3, r3
 8004f0e:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	0a1b      	lsrs	r3, r3, #8
 8004f14:	b2db      	uxtb	r3, r3
 8004f16:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	b2db      	uxtb	r3, r3
 8004f1c:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8004f1e:	4b0b      	ldr	r3, [pc, #44]	@ (8004f4c <WIZCHIP_WRITE_BUF+0xbc>)
 8004f20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f22:	f107 0210 	add.w	r2, r7, #16
 8004f26:	2103      	movs	r1, #3
 8004f28:	4610      	mov	r0, r2
 8004f2a:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
 8004f2c:	4b07      	ldr	r3, [pc, #28]	@ (8004f4c <WIZCHIP_WRITE_BUF+0xbc>)
 8004f2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f30:	88fa      	ldrh	r2, [r7, #6]
 8004f32:	4611      	mov	r1, r2
 8004f34:	68b8      	ldr	r0, [r7, #8]
 8004f36:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8004f38:	4b04      	ldr	r3, [pc, #16]	@ (8004f4c <WIZCHIP_WRITE_BUF+0xbc>)
 8004f3a:	699b      	ldr	r3, [r3, #24]
 8004f3c:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8004f3e:	4b03      	ldr	r3, [pc, #12]	@ (8004f4c <WIZCHIP_WRITE_BUF+0xbc>)
 8004f40:	691b      	ldr	r3, [r3, #16]
 8004f42:	4798      	blx	r3
}
 8004f44:	bf00      	nop
 8004f46:	3718      	adds	r7, #24
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	bd80      	pop	{r7, pc}
 8004f4c:	20000018 	.word	0x20000018

08004f50 <getSn_TX_FSR>:


uint16_t getSn_TX_FSR(uint8_t sn)
{
 8004f50:	b590      	push	{r4, r7, lr}
 8004f52:	b085      	sub	sp, #20
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	4603      	mov	r3, r0
 8004f58:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	81fb      	strh	r3, [r7, #14]
 8004f5e:	2300      	movs	r3, #0
 8004f60:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
 8004f62:	79fb      	ldrb	r3, [r7, #7]
 8004f64:	009b      	lsls	r3, r3, #2
 8004f66:	3301      	adds	r3, #1
 8004f68:	00db      	lsls	r3, r3, #3
 8004f6a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8004f6e:	4618      	mov	r0, r3
 8004f70:	f7ff fe94 	bl	8004c9c <WIZCHIP_READ>
 8004f74:	4603      	mov	r3, r0
 8004f76:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8004f78:	89bb      	ldrh	r3, [r7, #12]
 8004f7a:	021b      	lsls	r3, r3, #8
 8004f7c:	b29c      	uxth	r4, r3
 8004f7e:	79fb      	ldrb	r3, [r7, #7]
 8004f80:	009b      	lsls	r3, r3, #2
 8004f82:	3301      	adds	r3, #1
 8004f84:	00db      	lsls	r3, r3, #3
 8004f86:	f503 5304 	add.w	r3, r3, #8448	@ 0x2100
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	f7ff fe86 	bl	8004c9c <WIZCHIP_READ>
 8004f90:	4603      	mov	r3, r0
 8004f92:	4423      	add	r3, r4
 8004f94:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 8004f96:	89bb      	ldrh	r3, [r7, #12]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d019      	beq.n	8004fd0 <getSn_TX_FSR+0x80>
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
 8004f9c:	79fb      	ldrb	r3, [r7, #7]
 8004f9e:	009b      	lsls	r3, r3, #2
 8004fa0:	3301      	adds	r3, #1
 8004fa2:	00db      	lsls	r3, r3, #3
 8004fa4:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8004fa8:	4618      	mov	r0, r3
 8004faa:	f7ff fe77 	bl	8004c9c <WIZCHIP_READ>
 8004fae:	4603      	mov	r3, r0
 8004fb0:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8004fb2:	89fb      	ldrh	r3, [r7, #14]
 8004fb4:	021b      	lsls	r3, r3, #8
 8004fb6:	b29c      	uxth	r4, r3
 8004fb8:	79fb      	ldrb	r3, [r7, #7]
 8004fba:	009b      	lsls	r3, r3, #2
 8004fbc:	3301      	adds	r3, #1
 8004fbe:	00db      	lsls	r3, r3, #3
 8004fc0:	f503 5304 	add.w	r3, r3, #8448	@ 0x2100
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	f7ff fe69 	bl	8004c9c <WIZCHIP_READ>
 8004fca:	4603      	mov	r3, r0
 8004fcc:	4423      	add	r3, r4
 8004fce:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 8004fd0:	89fa      	ldrh	r2, [r7, #14]
 8004fd2:	89bb      	ldrh	r3, [r7, #12]
 8004fd4:	429a      	cmp	r2, r3
 8004fd6:	d1c4      	bne.n	8004f62 <getSn_TX_FSR+0x12>
   return val;
 8004fd8:	89fb      	ldrh	r3, [r7, #14]
}
 8004fda:	4618      	mov	r0, r3
 8004fdc:	3714      	adds	r7, #20
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bd90      	pop	{r4, r7, pc}

08004fe2 <getSn_RX_RSR>:


uint16_t getSn_RX_RSR(uint8_t sn)
{
 8004fe2:	b590      	push	{r4, r7, lr}
 8004fe4:	b085      	sub	sp, #20
 8004fe6:	af00      	add	r7, sp, #0
 8004fe8:	4603      	mov	r3, r0
 8004fea:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 8004fec:	2300      	movs	r3, #0
 8004fee:	81fb      	strh	r3, [r7, #14]
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
 8004ff4:	79fb      	ldrb	r3, [r7, #7]
 8004ff6:	009b      	lsls	r3, r3, #2
 8004ff8:	3301      	adds	r3, #1
 8004ffa:	00db      	lsls	r3, r3, #3
 8004ffc:	f503 5318 	add.w	r3, r3, #9728	@ 0x2600
 8005000:	4618      	mov	r0, r3
 8005002:	f7ff fe4b 	bl	8004c9c <WIZCHIP_READ>
 8005006:	4603      	mov	r3, r0
 8005008:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 800500a:	89bb      	ldrh	r3, [r7, #12]
 800500c:	021b      	lsls	r3, r3, #8
 800500e:	b29c      	uxth	r4, r3
 8005010:	79fb      	ldrb	r3, [r7, #7]
 8005012:	009b      	lsls	r3, r3, #2
 8005014:	3301      	adds	r3, #1
 8005016:	00db      	lsls	r3, r3, #3
 8005018:	f503 531c 	add.w	r3, r3, #9984	@ 0x2700
 800501c:	4618      	mov	r0, r3
 800501e:	f7ff fe3d 	bl	8004c9c <WIZCHIP_READ>
 8005022:	4603      	mov	r3, r0
 8005024:	4423      	add	r3, r4
 8005026:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 8005028:	89bb      	ldrh	r3, [r7, #12]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d019      	beq.n	8005062 <getSn_RX_RSR+0x80>
      {
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
 800502e:	79fb      	ldrb	r3, [r7, #7]
 8005030:	009b      	lsls	r3, r3, #2
 8005032:	3301      	adds	r3, #1
 8005034:	00db      	lsls	r3, r3, #3
 8005036:	f503 5318 	add.w	r3, r3, #9728	@ 0x2600
 800503a:	4618      	mov	r0, r3
 800503c:	f7ff fe2e 	bl	8004c9c <WIZCHIP_READ>
 8005040:	4603      	mov	r3, r0
 8005042:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 8005044:	89fb      	ldrh	r3, [r7, #14]
 8005046:	021b      	lsls	r3, r3, #8
 8005048:	b29c      	uxth	r4, r3
 800504a:	79fb      	ldrb	r3, [r7, #7]
 800504c:	009b      	lsls	r3, r3, #2
 800504e:	3301      	adds	r3, #1
 8005050:	00db      	lsls	r3, r3, #3
 8005052:	f503 531c 	add.w	r3, r3, #9984	@ 0x2700
 8005056:	4618      	mov	r0, r3
 8005058:	f7ff fe20 	bl	8004c9c <WIZCHIP_READ>
 800505c:	4603      	mov	r3, r0
 800505e:	4423      	add	r3, r4
 8005060:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 8005062:	89fa      	ldrh	r2, [r7, #14]
 8005064:	89bb      	ldrh	r3, [r7, #12]
 8005066:	429a      	cmp	r2, r3
 8005068:	d1c4      	bne.n	8004ff4 <getSn_RX_RSR+0x12>
   return val;
 800506a:	89fb      	ldrh	r3, [r7, #14]
}
 800506c:	4618      	mov	r0, r3
 800506e:	3714      	adds	r7, #20
 8005070:	46bd      	mov	sp, r7
 8005072:	bd90      	pop	{r4, r7, pc}

08005074 <wiz_send_data>:

void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8005074:	b590      	push	{r4, r7, lr}
 8005076:	b085      	sub	sp, #20
 8005078:	af00      	add	r7, sp, #0
 800507a:	4603      	mov	r3, r0
 800507c:	6039      	str	r1, [r7, #0]
 800507e:	71fb      	strb	r3, [r7, #7]
 8005080:	4613      	mov	r3, r2
 8005082:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8005084:	2300      	movs	r3, #0
 8005086:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 8005088:	2300      	movs	r3, #0
 800508a:	60bb      	str	r3, [r7, #8]

   if(len == 0)  return;
 800508c:	88bb      	ldrh	r3, [r7, #4]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d046      	beq.n	8005120 <wiz_send_data+0xac>
   ptr = getSn_TX_WR(sn);
 8005092:	79fb      	ldrb	r3, [r7, #7]
 8005094:	009b      	lsls	r3, r3, #2
 8005096:	3301      	adds	r3, #1
 8005098:	00db      	lsls	r3, r3, #3
 800509a:	f503 5310 	add.w	r3, r3, #9216	@ 0x2400
 800509e:	4618      	mov	r0, r3
 80050a0:	f7ff fdfc 	bl	8004c9c <WIZCHIP_READ>
 80050a4:	4603      	mov	r3, r0
 80050a6:	021b      	lsls	r3, r3, #8
 80050a8:	b29c      	uxth	r4, r3
 80050aa:	79fb      	ldrb	r3, [r7, #7]
 80050ac:	009b      	lsls	r3, r3, #2
 80050ae:	3301      	adds	r3, #1
 80050b0:	00db      	lsls	r3, r3, #3
 80050b2:	f503 5314 	add.w	r3, r3, #9472	@ 0x2500
 80050b6:	4618      	mov	r0, r3
 80050b8:	f7ff fdf0 	bl	8004c9c <WIZCHIP_READ>
 80050bc:	4603      	mov	r3, r0
 80050be:	4423      	add	r3, r4
 80050c0:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = (ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
 80050c2:	89fb      	ldrh	r3, [r7, #14]
 80050c4:	021b      	lsls	r3, r3, #8
 80050c6:	79fa      	ldrb	r2, [r7, #7]
 80050c8:	0092      	lsls	r2, r2, #2
 80050ca:	3202      	adds	r2, #2
 80050cc:	00d2      	lsls	r2, r2, #3
 80050ce:	4413      	add	r3, r2
 80050d0:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
 80050d2:	88bb      	ldrh	r3, [r7, #4]
 80050d4:	461a      	mov	r2, r3
 80050d6:	6839      	ldr	r1, [r7, #0]
 80050d8:	68b8      	ldr	r0, [r7, #8]
 80050da:	f7ff fed9 	bl	8004e90 <WIZCHIP_WRITE_BUF>
   
   ptr += len;
 80050de:	89fa      	ldrh	r2, [r7, #14]
 80050e0:	88bb      	ldrh	r3, [r7, #4]
 80050e2:	4413      	add	r3, r2
 80050e4:	81fb      	strh	r3, [r7, #14]
   setSn_TX_WR(sn,ptr);
 80050e6:	79fb      	ldrb	r3, [r7, #7]
 80050e8:	009b      	lsls	r3, r3, #2
 80050ea:	3301      	adds	r3, #1
 80050ec:	00db      	lsls	r3, r3, #3
 80050ee:	f503 5310 	add.w	r3, r3, #9216	@ 0x2400
 80050f2:	461a      	mov	r2, r3
 80050f4:	89fb      	ldrh	r3, [r7, #14]
 80050f6:	0a1b      	lsrs	r3, r3, #8
 80050f8:	b29b      	uxth	r3, r3
 80050fa:	b2db      	uxtb	r3, r3
 80050fc:	4619      	mov	r1, r3
 80050fe:	4610      	mov	r0, r2
 8005100:	f7ff fe18 	bl	8004d34 <WIZCHIP_WRITE>
 8005104:	79fb      	ldrb	r3, [r7, #7]
 8005106:	009b      	lsls	r3, r3, #2
 8005108:	3301      	adds	r3, #1
 800510a:	00db      	lsls	r3, r3, #3
 800510c:	f503 5314 	add.w	r3, r3, #9472	@ 0x2500
 8005110:	461a      	mov	r2, r3
 8005112:	89fb      	ldrh	r3, [r7, #14]
 8005114:	b2db      	uxtb	r3, r3
 8005116:	4619      	mov	r1, r3
 8005118:	4610      	mov	r0, r2
 800511a:	f7ff fe0b 	bl	8004d34 <WIZCHIP_WRITE>
 800511e:	e000      	b.n	8005122 <wiz_send_data+0xae>
   if(len == 0)  return;
 8005120:	bf00      	nop
}
 8005122:	3714      	adds	r7, #20
 8005124:	46bd      	mov	sp, r7
 8005126:	bd90      	pop	{r4, r7, pc}

08005128 <wiz_recv_data>:

void wiz_recv_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8005128:	b590      	push	{r4, r7, lr}
 800512a:	b085      	sub	sp, #20
 800512c:	af00      	add	r7, sp, #0
 800512e:	4603      	mov	r3, r0
 8005130:	6039      	str	r1, [r7, #0]
 8005132:	71fb      	strb	r3, [r7, #7]
 8005134:	4613      	mov	r3, r2
 8005136:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8005138:	2300      	movs	r3, #0
 800513a:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 800513c:	2300      	movs	r3, #0
 800513e:	60bb      	str	r3, [r7, #8]
   
   if(len == 0) return;
 8005140:	88bb      	ldrh	r3, [r7, #4]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d046      	beq.n	80051d4 <wiz_recv_data+0xac>
   ptr = getSn_RX_RD(sn);
 8005146:	79fb      	ldrb	r3, [r7, #7]
 8005148:	009b      	lsls	r3, r3, #2
 800514a:	3301      	adds	r3, #1
 800514c:	00db      	lsls	r3, r3, #3
 800514e:	f503 5320 	add.w	r3, r3, #10240	@ 0x2800
 8005152:	4618      	mov	r0, r3
 8005154:	f7ff fda2 	bl	8004c9c <WIZCHIP_READ>
 8005158:	4603      	mov	r3, r0
 800515a:	021b      	lsls	r3, r3, #8
 800515c:	b29c      	uxth	r4, r3
 800515e:	79fb      	ldrb	r3, [r7, #7]
 8005160:	009b      	lsls	r3, r3, #2
 8005162:	3301      	adds	r3, #1
 8005164:	00db      	lsls	r3, r3, #3
 8005166:	f503 5324 	add.w	r3, r3, #10496	@ 0x2900
 800516a:	4618      	mov	r0, r3
 800516c:	f7ff fd96 	bl	8004c9c <WIZCHIP_READ>
 8005170:	4603      	mov	r3, r0
 8005172:	4423      	add	r3, r4
 8005174:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = ((ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
 8005176:	89fb      	ldrh	r3, [r7, #14]
 8005178:	021b      	lsls	r3, r3, #8
 800517a:	79fa      	ldrb	r2, [r7, #7]
 800517c:	0092      	lsls	r2, r2, #2
 800517e:	3203      	adds	r2, #3
 8005180:	00d2      	lsls	r2, r2, #3
 8005182:	4413      	add	r3, r2
 8005184:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_READ_BUF(addrsel, wizdata, len);
 8005186:	88bb      	ldrh	r3, [r7, #4]
 8005188:	461a      	mov	r2, r3
 800518a:	6839      	ldr	r1, [r7, #0]
 800518c:	68b8      	ldr	r0, [r7, #8]
 800518e:	f7ff fe1f 	bl	8004dd0 <WIZCHIP_READ_BUF>
   ptr += len;
 8005192:	89fa      	ldrh	r2, [r7, #14]
 8005194:	88bb      	ldrh	r3, [r7, #4]
 8005196:	4413      	add	r3, r2
 8005198:	81fb      	strh	r3, [r7, #14]
   
   setSn_RX_RD(sn,ptr);
 800519a:	79fb      	ldrb	r3, [r7, #7]
 800519c:	009b      	lsls	r3, r3, #2
 800519e:	3301      	adds	r3, #1
 80051a0:	00db      	lsls	r3, r3, #3
 80051a2:	f503 5320 	add.w	r3, r3, #10240	@ 0x2800
 80051a6:	461a      	mov	r2, r3
 80051a8:	89fb      	ldrh	r3, [r7, #14]
 80051aa:	0a1b      	lsrs	r3, r3, #8
 80051ac:	b29b      	uxth	r3, r3
 80051ae:	b2db      	uxtb	r3, r3
 80051b0:	4619      	mov	r1, r3
 80051b2:	4610      	mov	r0, r2
 80051b4:	f7ff fdbe 	bl	8004d34 <WIZCHIP_WRITE>
 80051b8:	79fb      	ldrb	r3, [r7, #7]
 80051ba:	009b      	lsls	r3, r3, #2
 80051bc:	3301      	adds	r3, #1
 80051be:	00db      	lsls	r3, r3, #3
 80051c0:	f503 5324 	add.w	r3, r3, #10496	@ 0x2900
 80051c4:	461a      	mov	r2, r3
 80051c6:	89fb      	ldrh	r3, [r7, #14]
 80051c8:	b2db      	uxtb	r3, r3
 80051ca:	4619      	mov	r1, r3
 80051cc:	4610      	mov	r0, r2
 80051ce:	f7ff fdb1 	bl	8004d34 <WIZCHIP_WRITE>
 80051d2:	e000      	b.n	80051d6 <wiz_recv_data+0xae>
   if(len == 0) return;
 80051d4:	bf00      	nop
}
 80051d6:	3714      	adds	r7, #20
 80051d8:	46bd      	mov	sp, r7
 80051da:	bd90      	pop	{r4, r7, pc}

080051dc <socket>:
   }while(0);              \



int8_t socket(uint8_t sn, uint8_t protocol, uint16_t port, uint8_t flag)
{
 80051dc:	b590      	push	{r4, r7, lr}
 80051de:	b085      	sub	sp, #20
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	4604      	mov	r4, r0
 80051e4:	4608      	mov	r0, r1
 80051e6:	4611      	mov	r1, r2
 80051e8:	461a      	mov	r2, r3
 80051ea:	4623      	mov	r3, r4
 80051ec:	71fb      	strb	r3, [r7, #7]
 80051ee:	4603      	mov	r3, r0
 80051f0:	71bb      	strb	r3, [r7, #6]
 80051f2:	460b      	mov	r3, r1
 80051f4:	80bb      	strh	r3, [r7, #4]
 80051f6:	4613      	mov	r3, r2
 80051f8:	70fb      	strb	r3, [r7, #3]
	CHECK_SOCKNUM();
 80051fa:	79fb      	ldrb	r3, [r7, #7]
 80051fc:	2b08      	cmp	r3, #8
 80051fe:	d902      	bls.n	8005206 <socket+0x2a>
 8005200:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005204:	e0f0      	b.n	80053e8 <socket+0x20c>
	switch(protocol)
 8005206:	79bb      	ldrb	r3, [r7, #6]
 8005208:	2b01      	cmp	r3, #1
 800520a:	d005      	beq.n	8005218 <socket+0x3c>
 800520c:	2b00      	cmp	r3, #0
 800520e:	dd11      	ble.n	8005234 <socket+0x58>
 8005210:	3b02      	subs	r3, #2
 8005212:	2b02      	cmp	r3, #2
 8005214:	d80e      	bhi.n	8005234 <socket+0x58>
	    break;
         }
      case Sn_MR_UDP :
      case Sn_MR_MACRAW :
	  case Sn_MR_IPRAW :
         break;
 8005216:	e011      	b.n	800523c <socket+0x60>
            getSIPR((uint8_t*)&taddr);
 8005218:	f107 030c 	add.w	r3, r7, #12
 800521c:	2204      	movs	r2, #4
 800521e:	4619      	mov	r1, r3
 8005220:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 8005224:	f7ff fdd4 	bl	8004dd0 <WIZCHIP_READ_BUF>
            if(taddr == 0) return SOCKERR_SOCKINIT;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d105      	bne.n	800523a <socket+0x5e>
 800522e:	f06f 0302 	mvn.w	r3, #2
 8005232:	e0d9      	b.n	80053e8 <socket+0x20c>
   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_PPPoE :
         break;
   #endif
      default :
         return SOCKERR_SOCKMODE;
 8005234:	f06f 0304 	mvn.w	r3, #4
 8005238:	e0d6      	b.n	80053e8 <socket+0x20c>
	    break;
 800523a:	bf00      	nop
	}
	//M20150601 : For SF_TCP_ALIGN & W5300
	//if((flag & 0x06) != 0) return SOCKERR_SOCKFLAG;
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 800523c:	78fb      	ldrb	r3, [r7, #3]
 800523e:	f003 0304 	and.w	r3, r3, #4
 8005242:	2b00      	cmp	r3, #0
 8005244:	d002      	beq.n	800524c <socket+0x70>
 8005246:	f06f 0305 	mvn.w	r3, #5
 800524a:	e0cd      	b.n	80053e8 <socket+0x20c>
#if _WIZCHIP_ == 5200
   if(flag & 0x10) return SOCKERR_SOCKFLAG;
#endif
	   
	if(flag != 0)
 800524c:	78fb      	ldrb	r3, [r7, #3]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d028      	beq.n	80052a4 <socket+0xc8>
	{
   	switch(protocol)
 8005252:	79bb      	ldrb	r3, [r7, #6]
 8005254:	2b01      	cmp	r3, #1
 8005256:	d002      	beq.n	800525e <socket+0x82>
 8005258:	2b02      	cmp	r3, #2
 800525a:	d008      	beq.n	800526e <socket+0x92>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
      	      }
   	      #endif
   	      break;
   	   default:
   	      break;
 800525c:	e022      	b.n	80052a4 <socket+0xc8>
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK))==0) return SOCKERR_SOCKFLAG;
 800525e:	78fb      	ldrb	r3, [r7, #3]
 8005260:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 8005264:	2b00      	cmp	r3, #0
 8005266:	d11a      	bne.n	800529e <socket+0xc2>
 8005268:	f06f 0305 	mvn.w	r3, #5
 800526c:	e0bc      	b.n	80053e8 <socket+0x20c>
   	      if(flag & SF_IGMP_VER2)
 800526e:	78fb      	ldrb	r3, [r7, #3]
 8005270:	f003 0320 	and.w	r3, r3, #32
 8005274:	2b00      	cmp	r3, #0
 8005276:	d006      	beq.n	8005286 <socket+0xaa>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 8005278:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800527c:	2b00      	cmp	r3, #0
 800527e:	db02      	blt.n	8005286 <socket+0xaa>
 8005280:	f06f 0305 	mvn.w	r3, #5
 8005284:	e0b0      	b.n	80053e8 <socket+0x20c>
      	      if(flag & SF_UNI_BLOCK)
 8005286:	78fb      	ldrb	r3, [r7, #3]
 8005288:	f003 0310 	and.w	r3, r3, #16
 800528c:	2b00      	cmp	r3, #0
 800528e:	d008      	beq.n	80052a2 <socket+0xc6>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
 8005290:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005294:	2b00      	cmp	r3, #0
 8005296:	db04      	blt.n	80052a2 <socket+0xc6>
 8005298:	f06f 0305 	mvn.w	r3, #5
 800529c:	e0a4      	b.n	80053e8 <socket+0x20c>
   	      break;
 800529e:	bf00      	nop
 80052a0:	e000      	b.n	80052a4 <socket+0xc8>
   	      break;
 80052a2:	bf00      	nop
   	}
   }
	close(sn);
 80052a4:	79fb      	ldrb	r3, [r7, #7]
 80052a6:	4618      	mov	r0, r3
 80052a8:	f000 f8ac 	bl	8005404 <close>
	//M20150601
	#if _WIZCHIP_ == 5300
	   setSn_MR(sn, ((uint16_t)(protocol | (flag & 0xF0))) | (((uint16_t)(flag & 0x02)) << 7) );
    #else
	   setSn_MR(sn, (protocol | (flag & 0xF0)));
 80052ac:	79fb      	ldrb	r3, [r7, #7]
 80052ae:	009b      	lsls	r3, r3, #2
 80052b0:	3301      	adds	r3, #1
 80052b2:	00db      	lsls	r3, r3, #3
 80052b4:	4618      	mov	r0, r3
 80052b6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80052ba:	f023 030f 	bic.w	r3, r3, #15
 80052be:	b25a      	sxtb	r2, r3
 80052c0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80052c4:	4313      	orrs	r3, r2
 80052c6:	b25b      	sxtb	r3, r3
 80052c8:	b2db      	uxtb	r3, r3
 80052ca:	4619      	mov	r1, r3
 80052cc:	f7ff fd32 	bl	8004d34 <WIZCHIP_WRITE>
    #endif
	if(!port)
 80052d0:	88bb      	ldrh	r3, [r7, #4]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d110      	bne.n	80052f8 <socket+0x11c>
	{
	   port = sock_any_port++;
 80052d6:	4b46      	ldr	r3, [pc, #280]	@ (80053f0 <socket+0x214>)
 80052d8:	881b      	ldrh	r3, [r3, #0]
 80052da:	1c5a      	adds	r2, r3, #1
 80052dc:	b291      	uxth	r1, r2
 80052de:	4a44      	ldr	r2, [pc, #272]	@ (80053f0 <socket+0x214>)
 80052e0:	8011      	strh	r1, [r2, #0]
 80052e2:	80bb      	strh	r3, [r7, #4]
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 80052e4:	4b42      	ldr	r3, [pc, #264]	@ (80053f0 <socket+0x214>)
 80052e6:	881b      	ldrh	r3, [r3, #0]
 80052e8:	f64f 72f0 	movw	r2, #65520	@ 0xfff0
 80052ec:	4293      	cmp	r3, r2
 80052ee:	d103      	bne.n	80052f8 <socket+0x11c>
 80052f0:	4b3f      	ldr	r3, [pc, #252]	@ (80053f0 <socket+0x214>)
 80052f2:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 80052f6:	801a      	strh	r2, [r3, #0]
	}
   setSn_PORT(sn,port);	
 80052f8:	79fb      	ldrb	r3, [r7, #7]
 80052fa:	009b      	lsls	r3, r3, #2
 80052fc:	3301      	adds	r3, #1
 80052fe:	00db      	lsls	r3, r3, #3
 8005300:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005304:	461a      	mov	r2, r3
 8005306:	88bb      	ldrh	r3, [r7, #4]
 8005308:	0a1b      	lsrs	r3, r3, #8
 800530a:	b29b      	uxth	r3, r3
 800530c:	b2db      	uxtb	r3, r3
 800530e:	4619      	mov	r1, r3
 8005310:	4610      	mov	r0, r2
 8005312:	f7ff fd0f 	bl	8004d34 <WIZCHIP_WRITE>
 8005316:	79fb      	ldrb	r3, [r7, #7]
 8005318:	009b      	lsls	r3, r3, #2
 800531a:	3301      	adds	r3, #1
 800531c:	00db      	lsls	r3, r3, #3
 800531e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005322:	461a      	mov	r2, r3
 8005324:	88bb      	ldrh	r3, [r7, #4]
 8005326:	b2db      	uxtb	r3, r3
 8005328:	4619      	mov	r1, r3
 800532a:	4610      	mov	r0, r2
 800532c:	f7ff fd02 	bl	8004d34 <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 8005330:	79fb      	ldrb	r3, [r7, #7]
 8005332:	009b      	lsls	r3, r3, #2
 8005334:	3301      	adds	r3, #1
 8005336:	00db      	lsls	r3, r3, #3
 8005338:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800533c:	2101      	movs	r1, #1
 800533e:	4618      	mov	r0, r3
 8005340:	f7ff fcf8 	bl	8004d34 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8005344:	bf00      	nop
 8005346:	79fb      	ldrb	r3, [r7, #7]
 8005348:	009b      	lsls	r3, r3, #2
 800534a:	3301      	adds	r3, #1
 800534c:	00db      	lsls	r3, r3, #3
 800534e:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8005352:	4618      	mov	r0, r3
 8005354:	f7ff fca2 	bl	8004c9c <WIZCHIP_READ>
 8005358:	4603      	mov	r3, r0
 800535a:	2b00      	cmp	r3, #0
 800535c:	d1f3      	bne.n	8005346 <socket+0x16a>
   //A20150401 : For release the previous sock_io_mode
   sock_io_mode &= ~(1 <<sn);
 800535e:	79fb      	ldrb	r3, [r7, #7]
 8005360:	2201      	movs	r2, #1
 8005362:	fa02 f303 	lsl.w	r3, r2, r3
 8005366:	b21b      	sxth	r3, r3
 8005368:	43db      	mvns	r3, r3
 800536a:	b21a      	sxth	r2, r3
 800536c:	4b21      	ldr	r3, [pc, #132]	@ (80053f4 <socket+0x218>)
 800536e:	881b      	ldrh	r3, [r3, #0]
 8005370:	b21b      	sxth	r3, r3
 8005372:	4013      	ands	r3, r2
 8005374:	b21b      	sxth	r3, r3
 8005376:	b29a      	uxth	r2, r3
 8005378:	4b1e      	ldr	r3, [pc, #120]	@ (80053f4 <socket+0x218>)
 800537a:	801a      	strh	r2, [r3, #0]
   //
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 800537c:	78fb      	ldrb	r3, [r7, #3]
 800537e:	f003 0201 	and.w	r2, r3, #1
 8005382:	79fb      	ldrb	r3, [r7, #7]
 8005384:	fa02 f303 	lsl.w	r3, r2, r3
 8005388:	b21a      	sxth	r2, r3
 800538a:	4b1a      	ldr	r3, [pc, #104]	@ (80053f4 <socket+0x218>)
 800538c:	881b      	ldrh	r3, [r3, #0]
 800538e:	b21b      	sxth	r3, r3
 8005390:	4313      	orrs	r3, r2
 8005392:	b21b      	sxth	r3, r3
 8005394:	b29a      	uxth	r2, r3
 8005396:	4b17      	ldr	r3, [pc, #92]	@ (80053f4 <socket+0x218>)
 8005398:	801a      	strh	r2, [r3, #0]
   sock_is_sending &= ~(1<<sn);
 800539a:	79fb      	ldrb	r3, [r7, #7]
 800539c:	2201      	movs	r2, #1
 800539e:	fa02 f303 	lsl.w	r3, r2, r3
 80053a2:	b21b      	sxth	r3, r3
 80053a4:	43db      	mvns	r3, r3
 80053a6:	b21a      	sxth	r2, r3
 80053a8:	4b13      	ldr	r3, [pc, #76]	@ (80053f8 <socket+0x21c>)
 80053aa:	881b      	ldrh	r3, [r3, #0]
 80053ac:	b21b      	sxth	r3, r3
 80053ae:	4013      	ands	r3, r2
 80053b0:	b21b      	sxth	r3, r3
 80053b2:	b29a      	uxth	r2, r3
 80053b4:	4b10      	ldr	r3, [pc, #64]	@ (80053f8 <socket+0x21c>)
 80053b6:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 80053b8:	79fb      	ldrb	r3, [r7, #7]
 80053ba:	4a10      	ldr	r2, [pc, #64]	@ (80053fc <socket+0x220>)
 80053bc:	2100      	movs	r1, #0
 80053be:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   //M20150601 : repalce 0 with PACK_COMPLETED
   //sock_pack_info[sn] = 0;
   sock_pack_info[sn] = PACK_COMPLETED;
 80053c2:	79fb      	ldrb	r3, [r7, #7]
 80053c4:	4a0e      	ldr	r2, [pc, #56]	@ (8005400 <socket+0x224>)
 80053c6:	2100      	movs	r1, #0
 80053c8:	54d1      	strb	r1, [r2, r3]
   //
   while(getSn_SR(sn) == SOCK_CLOSED);
 80053ca:	bf00      	nop
 80053cc:	79fb      	ldrb	r3, [r7, #7]
 80053ce:	009b      	lsls	r3, r3, #2
 80053d0:	3301      	adds	r3, #1
 80053d2:	00db      	lsls	r3, r3, #3
 80053d4:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 80053d8:	4618      	mov	r0, r3
 80053da:	f7ff fc5f 	bl	8004c9c <WIZCHIP_READ>
 80053de:	4603      	mov	r3, r0
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d0f3      	beq.n	80053cc <socket+0x1f0>
   return (int8_t)sn;
 80053e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
}	   
 80053e8:	4618      	mov	r0, r3
 80053ea:	3714      	adds	r7, #20
 80053ec:	46bd      	mov	sp, r7
 80053ee:	bd90      	pop	{r4, r7, pc}
 80053f0:	20000016 	.word	0x20000016
 80053f4:	200009fc 	.word	0x200009fc
 80053f8:	200009fe 	.word	0x200009fe
 80053fc:	20000a00 	.word	0x20000a00
 8005400:	20000a10 	.word	0x20000a10

08005404 <close>:

int8_t close(uint8_t sn)
{
 8005404:	b580      	push	{r7, lr}
 8005406:	b082      	sub	sp, #8
 8005408:	af00      	add	r7, sp, #0
 800540a:	4603      	mov	r3, r0
 800540c:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 800540e:	79fb      	ldrb	r3, [r7, #7]
 8005410:	2b08      	cmp	r3, #8
 8005412:	d902      	bls.n	800541a <close+0x16>
 8005414:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005418:	e055      	b.n	80054c6 <close+0xc2>
      while(getSn_CR(sn) != 0);
      while(getSn_SR(sn) != SOCK_UDP);
      sendto(sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
   };   
#endif 
	setSn_CR(sn,Sn_CR_CLOSE);
 800541a:	79fb      	ldrb	r3, [r7, #7]
 800541c:	009b      	lsls	r3, r3, #2
 800541e:	3301      	adds	r3, #1
 8005420:	00db      	lsls	r3, r3, #3
 8005422:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8005426:	2110      	movs	r1, #16
 8005428:	4618      	mov	r0, r3
 800542a:	f7ff fc83 	bl	8004d34 <WIZCHIP_WRITE>
   /* wait to process the command... */
	while( getSn_CR(sn) );
 800542e:	bf00      	nop
 8005430:	79fb      	ldrb	r3, [r7, #7]
 8005432:	009b      	lsls	r3, r3, #2
 8005434:	3301      	adds	r3, #1
 8005436:	00db      	lsls	r3, r3, #3
 8005438:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800543c:	4618      	mov	r0, r3
 800543e:	f7ff fc2d 	bl	8004c9c <WIZCHIP_READ>
 8005442:	4603      	mov	r3, r0
 8005444:	2b00      	cmp	r3, #0
 8005446:	d1f3      	bne.n	8005430 <close+0x2c>
	/* clear all interrupt of the socket. */
	setSn_IR(sn, 0xFF);
 8005448:	79fb      	ldrb	r3, [r7, #7]
 800544a:	009b      	lsls	r3, r3, #2
 800544c:	3301      	adds	r3, #1
 800544e:	00db      	lsls	r3, r3, #3
 8005450:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8005454:	211f      	movs	r1, #31
 8005456:	4618      	mov	r0, r3
 8005458:	f7ff fc6c 	bl	8004d34 <WIZCHIP_WRITE>
	//A20150401 : Release the sock_io_mode of socket n.
	sock_io_mode &= ~(1<<sn);
 800545c:	79fb      	ldrb	r3, [r7, #7]
 800545e:	2201      	movs	r2, #1
 8005460:	fa02 f303 	lsl.w	r3, r2, r3
 8005464:	b21b      	sxth	r3, r3
 8005466:	43db      	mvns	r3, r3
 8005468:	b21a      	sxth	r2, r3
 800546a:	4b19      	ldr	r3, [pc, #100]	@ (80054d0 <close+0xcc>)
 800546c:	881b      	ldrh	r3, [r3, #0]
 800546e:	b21b      	sxth	r3, r3
 8005470:	4013      	ands	r3, r2
 8005472:	b21b      	sxth	r3, r3
 8005474:	b29a      	uxth	r2, r3
 8005476:	4b16      	ldr	r3, [pc, #88]	@ (80054d0 <close+0xcc>)
 8005478:	801a      	strh	r2, [r3, #0]
	//
	sock_is_sending &= ~(1<<sn);
 800547a:	79fb      	ldrb	r3, [r7, #7]
 800547c:	2201      	movs	r2, #1
 800547e:	fa02 f303 	lsl.w	r3, r2, r3
 8005482:	b21b      	sxth	r3, r3
 8005484:	43db      	mvns	r3, r3
 8005486:	b21a      	sxth	r2, r3
 8005488:	4b12      	ldr	r3, [pc, #72]	@ (80054d4 <close+0xd0>)
 800548a:	881b      	ldrh	r3, [r3, #0]
 800548c:	b21b      	sxth	r3, r3
 800548e:	4013      	ands	r3, r2
 8005490:	b21b      	sxth	r3, r3
 8005492:	b29a      	uxth	r2, r3
 8005494:	4b0f      	ldr	r3, [pc, #60]	@ (80054d4 <close+0xd0>)
 8005496:	801a      	strh	r2, [r3, #0]
	sock_remained_size[sn] = 0;
 8005498:	79fb      	ldrb	r3, [r7, #7]
 800549a:	4a0f      	ldr	r2, [pc, #60]	@ (80054d8 <close+0xd4>)
 800549c:	2100      	movs	r1, #0
 800549e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	sock_pack_info[sn] = 0;
 80054a2:	79fb      	ldrb	r3, [r7, #7]
 80054a4:	4a0d      	ldr	r2, [pc, #52]	@ (80054dc <close+0xd8>)
 80054a6:	2100      	movs	r1, #0
 80054a8:	54d1      	strb	r1, [r2, r3]
	while(getSn_SR(sn) != SOCK_CLOSED);
 80054aa:	bf00      	nop
 80054ac:	79fb      	ldrb	r3, [r7, #7]
 80054ae:	009b      	lsls	r3, r3, #2
 80054b0:	3301      	adds	r3, #1
 80054b2:	00db      	lsls	r3, r3, #3
 80054b4:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 80054b8:	4618      	mov	r0, r3
 80054ba:	f7ff fbef 	bl	8004c9c <WIZCHIP_READ>
 80054be:	4603      	mov	r3, r0
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d1f3      	bne.n	80054ac <close+0xa8>
	return SOCK_OK;
 80054c4:	2301      	movs	r3, #1
}
 80054c6:	4618      	mov	r0, r3
 80054c8:	3708      	adds	r7, #8
 80054ca:	46bd      	mov	sp, r7
 80054cc:	bd80      	pop	{r7, pc}
 80054ce:	bf00      	nop
 80054d0:	200009fc 	.word	0x200009fc
 80054d4:	200009fe 	.word	0x200009fe
 80054d8:	20000a00 	.word	0x20000a00
 80054dc:	20000a10 	.word	0x20000a10

080054e0 <connect>:
   return SOCK_OK;
}


int8_t connect(uint8_t sn, uint8_t * addr, uint16_t port)
{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b084      	sub	sp, #16
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	4603      	mov	r3, r0
 80054e8:	6039      	str	r1, [r7, #0]
 80054ea:	71fb      	strb	r3, [r7, #7]
 80054ec:	4613      	mov	r3, r2
 80054ee:	80bb      	strh	r3, [r7, #4]
   CHECK_SOCKNUM();
 80054f0:	79fb      	ldrb	r3, [r7, #7]
 80054f2:	2b08      	cmp	r3, #8
 80054f4:	d902      	bls.n	80054fc <connect+0x1c>
 80054f6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80054fa:	e0c6      	b.n	800568a <connect+0x1aa>
   CHECK_SOCKMODE(Sn_MR_TCP);
 80054fc:	79fb      	ldrb	r3, [r7, #7]
 80054fe:	009b      	lsls	r3, r3, #2
 8005500:	3301      	adds	r3, #1
 8005502:	00db      	lsls	r3, r3, #3
 8005504:	4618      	mov	r0, r3
 8005506:	f7ff fbc9 	bl	8004c9c <WIZCHIP_READ>
 800550a:	4603      	mov	r3, r0
 800550c:	f003 030f 	and.w	r3, r3, #15
 8005510:	2b01      	cmp	r3, #1
 8005512:	d002      	beq.n	800551a <connect+0x3a>
 8005514:	f06f 0304 	mvn.w	r3, #4
 8005518:	e0b7      	b.n	800568a <connect+0x1aa>
   CHECK_SOCKINIT();
 800551a:	79fb      	ldrb	r3, [r7, #7]
 800551c:	009b      	lsls	r3, r3, #2
 800551e:	3301      	adds	r3, #1
 8005520:	00db      	lsls	r3, r3, #3
 8005522:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8005526:	4618      	mov	r0, r3
 8005528:	f7ff fbb8 	bl	8004c9c <WIZCHIP_READ>
 800552c:	4603      	mov	r3, r0
 800552e:	2b13      	cmp	r3, #19
 8005530:	d002      	beq.n	8005538 <connect+0x58>
 8005532:	f06f 0302 	mvn.w	r3, #2
 8005536:	e0a8      	b.n	800568a <connect+0x1aa>
   //M20140501 : For avoiding fatal error on memory align mismatched
   //if( *((uint32_t*)addr) == 0xFFFFFFFF || *((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   {
      uint32_t taddr;
      taddr = ((uint32_t)addr[0] & 0x000000FF);
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	781b      	ldrb	r3, [r3, #0]
 800553c:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	021b      	lsls	r3, r3, #8
 8005542:	683a      	ldr	r2, [r7, #0]
 8005544:	3201      	adds	r2, #1
 8005546:	7812      	ldrb	r2, [r2, #0]
 8005548:	4413      	add	r3, r2
 800554a:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	021b      	lsls	r3, r3, #8
 8005550:	683a      	ldr	r2, [r7, #0]
 8005552:	3202      	adds	r2, #2
 8005554:	7812      	ldrb	r2, [r2, #0]
 8005556:	4413      	add	r3, r2
 8005558:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	021b      	lsls	r3, r3, #8
 800555e:	683a      	ldr	r2, [r7, #0]
 8005560:	3203      	adds	r2, #3
 8005562:	7812      	ldrb	r2, [r2, #0]
 8005564:	4413      	add	r3, r2
 8005566:	60fb      	str	r3, [r7, #12]
      if( taddr == 0xFFFFFFFF || taddr == 0) return SOCKERR_IPINVALID;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800556e:	d002      	beq.n	8005576 <connect+0x96>
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d102      	bne.n	800557c <connect+0x9c>
 8005576:	f06f 030b 	mvn.w	r3, #11
 800557a:	e086      	b.n	800568a <connect+0x1aa>
   }
   //
	
	if(port == 0) return SOCKERR_PORTZERO;
 800557c:	88bb      	ldrh	r3, [r7, #4]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d102      	bne.n	8005588 <connect+0xa8>
 8005582:	f06f 030a 	mvn.w	r3, #10
 8005586:	e080      	b.n	800568a <connect+0x1aa>
	setSn_DIPR(sn,addr);
 8005588:	79fb      	ldrb	r3, [r7, #7]
 800558a:	009b      	lsls	r3, r3, #2
 800558c:	3301      	adds	r3, #1
 800558e:	00db      	lsls	r3, r3, #3
 8005590:	f503 6340 	add.w	r3, r3, #3072	@ 0xc00
 8005594:	2204      	movs	r2, #4
 8005596:	6839      	ldr	r1, [r7, #0]
 8005598:	4618      	mov	r0, r3
 800559a:	f7ff fc79 	bl	8004e90 <WIZCHIP_WRITE_BUF>
	setSn_DPORT(sn,port);
 800559e:	79fb      	ldrb	r3, [r7, #7]
 80055a0:	009b      	lsls	r3, r3, #2
 80055a2:	3301      	adds	r3, #1
 80055a4:	00db      	lsls	r3, r3, #3
 80055a6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80055aa:	461a      	mov	r2, r3
 80055ac:	88bb      	ldrh	r3, [r7, #4]
 80055ae:	0a1b      	lsrs	r3, r3, #8
 80055b0:	b29b      	uxth	r3, r3
 80055b2:	b2db      	uxtb	r3, r3
 80055b4:	4619      	mov	r1, r3
 80055b6:	4610      	mov	r0, r2
 80055b8:	f7ff fbbc 	bl	8004d34 <WIZCHIP_WRITE>
 80055bc:	79fb      	ldrb	r3, [r7, #7]
 80055be:	009b      	lsls	r3, r3, #2
 80055c0:	3301      	adds	r3, #1
 80055c2:	00db      	lsls	r3, r3, #3
 80055c4:	f503 5388 	add.w	r3, r3, #4352	@ 0x1100
 80055c8:	461a      	mov	r2, r3
 80055ca:	88bb      	ldrh	r3, [r7, #4]
 80055cc:	b2db      	uxtb	r3, r3
 80055ce:	4619      	mov	r1, r3
 80055d0:	4610      	mov	r0, r2
 80055d2:	f7ff fbaf 	bl	8004d34 <WIZCHIP_WRITE>
	setSn_CR(sn,Sn_CR_CONNECT);
 80055d6:	79fb      	ldrb	r3, [r7, #7]
 80055d8:	009b      	lsls	r3, r3, #2
 80055da:	3301      	adds	r3, #1
 80055dc:	00db      	lsls	r3, r3, #3
 80055de:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80055e2:	2104      	movs	r1, #4
 80055e4:	4618      	mov	r0, r3
 80055e6:	f7ff fba5 	bl	8004d34 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 80055ea:	bf00      	nop
 80055ec:	79fb      	ldrb	r3, [r7, #7]
 80055ee:	009b      	lsls	r3, r3, #2
 80055f0:	3301      	adds	r3, #1
 80055f2:	00db      	lsls	r3, r3, #3
 80055f4:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80055f8:	4618      	mov	r0, r3
 80055fa:	f7ff fb4f 	bl	8004c9c <WIZCHIP_READ>
 80055fe:	4603      	mov	r3, r0
 8005600:	2b00      	cmp	r3, #0
 8005602:	d1f3      	bne.n	80055ec <connect+0x10c>
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 8005604:	4b23      	ldr	r3, [pc, #140]	@ (8005694 <connect+0x1b4>)
 8005606:	881b      	ldrh	r3, [r3, #0]
 8005608:	461a      	mov	r2, r3
 800560a:	79fb      	ldrb	r3, [r7, #7]
 800560c:	fa42 f303 	asr.w	r3, r2, r3
 8005610:	f003 0301 	and.w	r3, r3, #1
 8005614:	2b00      	cmp	r3, #0
 8005616:	d02b      	beq.n	8005670 <connect+0x190>
 8005618:	2300      	movs	r3, #0
 800561a:	e036      	b.n	800568a <connect+0x1aa>
   while(getSn_SR(sn) != SOCK_ESTABLISHED)
   {
		if (getSn_IR(sn) & Sn_IR_TIMEOUT)
 800561c:	79fb      	ldrb	r3, [r7, #7]
 800561e:	009b      	lsls	r3, r3, #2
 8005620:	3301      	adds	r3, #1
 8005622:	00db      	lsls	r3, r3, #3
 8005624:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8005628:	4618      	mov	r0, r3
 800562a:	f7ff fb37 	bl	8004c9c <WIZCHIP_READ>
 800562e:	4603      	mov	r3, r0
 8005630:	f003 0308 	and.w	r3, r3, #8
 8005634:	2b00      	cmp	r3, #0
 8005636:	d00c      	beq.n	8005652 <connect+0x172>
		{
			setSn_IR(sn, Sn_IR_TIMEOUT);
 8005638:	79fb      	ldrb	r3, [r7, #7]
 800563a:	009b      	lsls	r3, r3, #2
 800563c:	3301      	adds	r3, #1
 800563e:	00db      	lsls	r3, r3, #3
 8005640:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8005644:	2108      	movs	r1, #8
 8005646:	4618      	mov	r0, r3
 8005648:	f7ff fb74 	bl	8004d34 <WIZCHIP_WRITE>
            return SOCKERR_TIMEOUT;
 800564c:	f06f 030c 	mvn.w	r3, #12
 8005650:	e01b      	b.n	800568a <connect+0x1aa>
		}

		if (getSn_SR(sn) == SOCK_CLOSED)
 8005652:	79fb      	ldrb	r3, [r7, #7]
 8005654:	009b      	lsls	r3, r3, #2
 8005656:	3301      	adds	r3, #1
 8005658:	00db      	lsls	r3, r3, #3
 800565a:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 800565e:	4618      	mov	r0, r3
 8005660:	f7ff fb1c 	bl	8004c9c <WIZCHIP_READ>
 8005664:	4603      	mov	r3, r0
 8005666:	2b00      	cmp	r3, #0
 8005668:	d102      	bne.n	8005670 <connect+0x190>
		{
			return SOCKERR_SOCKCLOSED;
 800566a:	f06f 0303 	mvn.w	r3, #3
 800566e:	e00c      	b.n	800568a <connect+0x1aa>
   while(getSn_SR(sn) != SOCK_ESTABLISHED)
 8005670:	79fb      	ldrb	r3, [r7, #7]
 8005672:	009b      	lsls	r3, r3, #2
 8005674:	3301      	adds	r3, #1
 8005676:	00db      	lsls	r3, r3, #3
 8005678:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 800567c:	4618      	mov	r0, r3
 800567e:	f7ff fb0d 	bl	8004c9c <WIZCHIP_READ>
 8005682:	4603      	mov	r3, r0
 8005684:	2b17      	cmp	r3, #23
 8005686:	d1c9      	bne.n	800561c <connect+0x13c>
		}
	}
   
   return SOCK_OK;
 8005688:	2301      	movs	r3, #1
}
 800568a:	4618      	mov	r0, r3
 800568c:	3710      	adds	r7, #16
 800568e:	46bd      	mov	sp, r7
 8005690:	bd80      	pop	{r7, pc}
 8005692:	bf00      	nop
 8005694:	200009fc 	.word	0x200009fc

08005698 <disconnect>:

int8_t disconnect(uint8_t sn)
{
 8005698:	b580      	push	{r7, lr}
 800569a:	b082      	sub	sp, #8
 800569c:	af00      	add	r7, sp, #0
 800569e:	4603      	mov	r3, r0
 80056a0:	71fb      	strb	r3, [r7, #7]
   CHECK_SOCKNUM();
 80056a2:	79fb      	ldrb	r3, [r7, #7]
 80056a4:	2b08      	cmp	r3, #8
 80056a6:	d902      	bls.n	80056ae <disconnect+0x16>
 80056a8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80056ac:	e062      	b.n	8005774 <disconnect+0xdc>
   CHECK_SOCKMODE(Sn_MR_TCP);
 80056ae:	79fb      	ldrb	r3, [r7, #7]
 80056b0:	009b      	lsls	r3, r3, #2
 80056b2:	3301      	adds	r3, #1
 80056b4:	00db      	lsls	r3, r3, #3
 80056b6:	4618      	mov	r0, r3
 80056b8:	f7ff faf0 	bl	8004c9c <WIZCHIP_READ>
 80056bc:	4603      	mov	r3, r0
 80056be:	f003 030f 	and.w	r3, r3, #15
 80056c2:	2b01      	cmp	r3, #1
 80056c4:	d002      	beq.n	80056cc <disconnect+0x34>
 80056c6:	f06f 0304 	mvn.w	r3, #4
 80056ca:	e053      	b.n	8005774 <disconnect+0xdc>
	setSn_CR(sn,Sn_CR_DISCON);
 80056cc:	79fb      	ldrb	r3, [r7, #7]
 80056ce:	009b      	lsls	r3, r3, #2
 80056d0:	3301      	adds	r3, #1
 80056d2:	00db      	lsls	r3, r3, #3
 80056d4:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80056d8:	2108      	movs	r1, #8
 80056da:	4618      	mov	r0, r3
 80056dc:	f7ff fb2a 	bl	8004d34 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 80056e0:	bf00      	nop
 80056e2:	79fb      	ldrb	r3, [r7, #7]
 80056e4:	009b      	lsls	r3, r3, #2
 80056e6:	3301      	adds	r3, #1
 80056e8:	00db      	lsls	r3, r3, #3
 80056ea:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80056ee:	4618      	mov	r0, r3
 80056f0:	f7ff fad4 	bl	8004c9c <WIZCHIP_READ>
 80056f4:	4603      	mov	r3, r0
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d1f3      	bne.n	80056e2 <disconnect+0x4a>
	sock_is_sending &= ~(1<<sn);
 80056fa:	79fb      	ldrb	r3, [r7, #7]
 80056fc:	2201      	movs	r2, #1
 80056fe:	fa02 f303 	lsl.w	r3, r2, r3
 8005702:	b21b      	sxth	r3, r3
 8005704:	43db      	mvns	r3, r3
 8005706:	b21a      	sxth	r2, r3
 8005708:	4b1c      	ldr	r3, [pc, #112]	@ (800577c <disconnect+0xe4>)
 800570a:	881b      	ldrh	r3, [r3, #0]
 800570c:	b21b      	sxth	r3, r3
 800570e:	4013      	ands	r3, r2
 8005710:	b21b      	sxth	r3, r3
 8005712:	b29a      	uxth	r2, r3
 8005714:	4b19      	ldr	r3, [pc, #100]	@ (800577c <disconnect+0xe4>)
 8005716:	801a      	strh	r2, [r3, #0]
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 8005718:	4b19      	ldr	r3, [pc, #100]	@ (8005780 <disconnect+0xe8>)
 800571a:	881b      	ldrh	r3, [r3, #0]
 800571c:	461a      	mov	r2, r3
 800571e:	79fb      	ldrb	r3, [r7, #7]
 8005720:	fa42 f303 	asr.w	r3, r2, r3
 8005724:	f003 0301 	and.w	r3, r3, #1
 8005728:	2b00      	cmp	r3, #0
 800572a:	d016      	beq.n	800575a <disconnect+0xc2>
 800572c:	2300      	movs	r3, #0
 800572e:	e021      	b.n	8005774 <disconnect+0xdc>
	while(getSn_SR(sn) != SOCK_CLOSED)
	{
	   if(getSn_IR(sn) & Sn_IR_TIMEOUT)
 8005730:	79fb      	ldrb	r3, [r7, #7]
 8005732:	009b      	lsls	r3, r3, #2
 8005734:	3301      	adds	r3, #1
 8005736:	00db      	lsls	r3, r3, #3
 8005738:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800573c:	4618      	mov	r0, r3
 800573e:	f7ff faad 	bl	8004c9c <WIZCHIP_READ>
 8005742:	4603      	mov	r3, r0
 8005744:	f003 0308 	and.w	r3, r3, #8
 8005748:	2b00      	cmp	r3, #0
 800574a:	d006      	beq.n	800575a <disconnect+0xc2>
	   {
	      close(sn);
 800574c:	79fb      	ldrb	r3, [r7, #7]
 800574e:	4618      	mov	r0, r3
 8005750:	f7ff fe58 	bl	8005404 <close>
	      return SOCKERR_TIMEOUT;
 8005754:	f06f 030c 	mvn.w	r3, #12
 8005758:	e00c      	b.n	8005774 <disconnect+0xdc>
	while(getSn_SR(sn) != SOCK_CLOSED)
 800575a:	79fb      	ldrb	r3, [r7, #7]
 800575c:	009b      	lsls	r3, r3, #2
 800575e:	3301      	adds	r3, #1
 8005760:	00db      	lsls	r3, r3, #3
 8005762:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8005766:	4618      	mov	r0, r3
 8005768:	f7ff fa98 	bl	8004c9c <WIZCHIP_READ>
 800576c:	4603      	mov	r3, r0
 800576e:	2b00      	cmp	r3, #0
 8005770:	d1de      	bne.n	8005730 <disconnect+0x98>
	   }
	}
	return SOCK_OK;
 8005772:	2301      	movs	r3, #1
}
 8005774:	4618      	mov	r0, r3
 8005776:	3708      	adds	r7, #8
 8005778:	46bd      	mov	sp, r7
 800577a:	bd80      	pop	{r7, pc}
 800577c:	200009fe 	.word	0x200009fe
 8005780:	200009fc 	.word	0x200009fc

08005784 <send>:

int32_t send(uint8_t sn, uint8_t * buf, uint16_t len)
{
 8005784:	b580      	push	{r7, lr}
 8005786:	b084      	sub	sp, #16
 8005788:	af00      	add	r7, sp, #0
 800578a:	4603      	mov	r3, r0
 800578c:	6039      	str	r1, [r7, #0]
 800578e:	71fb      	strb	r3, [r7, #7]
 8005790:	4613      	mov	r3, r2
 8005792:	80bb      	strh	r3, [r7, #4]
   uint8_t tmp=0;
 8005794:	2300      	movs	r3, #0
 8005796:	73fb      	strb	r3, [r7, #15]
   uint16_t freesize=0;
 8005798:	2300      	movs	r3, #0
 800579a:	81bb      	strh	r3, [r7, #12]
   
   CHECK_SOCKNUM();
 800579c:	79fb      	ldrb	r3, [r7, #7]
 800579e:	2b08      	cmp	r3, #8
 80057a0:	d902      	bls.n	80057a8 <send+0x24>
 80057a2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80057a6:	e0dd      	b.n	8005964 <send+0x1e0>
   CHECK_SOCKMODE(Sn_MR_TCP);
 80057a8:	79fb      	ldrb	r3, [r7, #7]
 80057aa:	009b      	lsls	r3, r3, #2
 80057ac:	3301      	adds	r3, #1
 80057ae:	00db      	lsls	r3, r3, #3
 80057b0:	4618      	mov	r0, r3
 80057b2:	f7ff fa73 	bl	8004c9c <WIZCHIP_READ>
 80057b6:	4603      	mov	r3, r0
 80057b8:	f003 030f 	and.w	r3, r3, #15
 80057bc:	2b01      	cmp	r3, #1
 80057be:	d002      	beq.n	80057c6 <send+0x42>
 80057c0:	f06f 0304 	mvn.w	r3, #4
 80057c4:	e0ce      	b.n	8005964 <send+0x1e0>
   CHECK_SOCKDATA();
 80057c6:	88bb      	ldrh	r3, [r7, #4]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d102      	bne.n	80057d2 <send+0x4e>
 80057cc:	f06f 030d 	mvn.w	r3, #13
 80057d0:	e0c8      	b.n	8005964 <send+0x1e0>
   tmp = getSn_SR(sn);
 80057d2:	79fb      	ldrb	r3, [r7, #7]
 80057d4:	009b      	lsls	r3, r3, #2
 80057d6:	3301      	adds	r3, #1
 80057d8:	00db      	lsls	r3, r3, #3
 80057da:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 80057de:	4618      	mov	r0, r3
 80057e0:	f7ff fa5c 	bl	8004c9c <WIZCHIP_READ>
 80057e4:	4603      	mov	r3, r0
 80057e6:	73fb      	strb	r3, [r7, #15]
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
 80057e8:	7bfb      	ldrb	r3, [r7, #15]
 80057ea:	2b17      	cmp	r3, #23
 80057ec:	d005      	beq.n	80057fa <send+0x76>
 80057ee:	7bfb      	ldrb	r3, [r7, #15]
 80057f0:	2b1c      	cmp	r3, #28
 80057f2:	d002      	beq.n	80057fa <send+0x76>
 80057f4:	f06f 0306 	mvn.w	r3, #6
 80057f8:	e0b4      	b.n	8005964 <send+0x1e0>
   if( sock_is_sending & (1<<sn) )
 80057fa:	4b5c      	ldr	r3, [pc, #368]	@ (800596c <send+0x1e8>)
 80057fc:	881b      	ldrh	r3, [r3, #0]
 80057fe:	461a      	mov	r2, r3
 8005800:	79fb      	ldrb	r3, [r7, #7]
 8005802:	fa42 f303 	asr.w	r3, r2, r3
 8005806:	f003 0301 	and.w	r3, r3, #1
 800580a:	2b00      	cmp	r3, #0
 800580c:	d039      	beq.n	8005882 <send+0xfe>
   {
      tmp = getSn_IR(sn);
 800580e:	79fb      	ldrb	r3, [r7, #7]
 8005810:	009b      	lsls	r3, r3, #2
 8005812:	3301      	adds	r3, #1
 8005814:	00db      	lsls	r3, r3, #3
 8005816:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800581a:	4618      	mov	r0, r3
 800581c:	f7ff fa3e 	bl	8004c9c <WIZCHIP_READ>
 8005820:	4603      	mov	r3, r0
 8005822:	f003 031f 	and.w	r3, r3, #31
 8005826:	73fb      	strb	r3, [r7, #15]
      if(tmp & Sn_IR_SENDOK)
 8005828:	7bfb      	ldrb	r3, [r7, #15]
 800582a:	f003 0310 	and.w	r3, r3, #16
 800582e:	2b00      	cmp	r3, #0
 8005830:	d019      	beq.n	8005866 <send+0xe2>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 8005832:	79fb      	ldrb	r3, [r7, #7]
 8005834:	009b      	lsls	r3, r3, #2
 8005836:	3301      	adds	r3, #1
 8005838:	00db      	lsls	r3, r3, #3
 800583a:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800583e:	2110      	movs	r1, #16
 8005840:	4618      	mov	r0, r3
 8005842:	f7ff fa77 	bl	8004d34 <WIZCHIP_WRITE>
               setSn_CR(sn,Sn_CR_SEND);
               while(getSn_CR(sn));
               return SOCK_BUSY;
            }
         #endif
         sock_is_sending &= ~(1<<sn);         
 8005846:	79fb      	ldrb	r3, [r7, #7]
 8005848:	2201      	movs	r2, #1
 800584a:	fa02 f303 	lsl.w	r3, r2, r3
 800584e:	b21b      	sxth	r3, r3
 8005850:	43db      	mvns	r3, r3
 8005852:	b21a      	sxth	r2, r3
 8005854:	4b45      	ldr	r3, [pc, #276]	@ (800596c <send+0x1e8>)
 8005856:	881b      	ldrh	r3, [r3, #0]
 8005858:	b21b      	sxth	r3, r3
 800585a:	4013      	ands	r3, r2
 800585c:	b21b      	sxth	r3, r3
 800585e:	b29a      	uxth	r2, r3
 8005860:	4b42      	ldr	r3, [pc, #264]	@ (800596c <send+0x1e8>)
 8005862:	801a      	strh	r2, [r3, #0]
 8005864:	e00d      	b.n	8005882 <send+0xfe>
      }
      else if(tmp & Sn_IR_TIMEOUT)
 8005866:	7bfb      	ldrb	r3, [r7, #15]
 8005868:	f003 0308 	and.w	r3, r3, #8
 800586c:	2b00      	cmp	r3, #0
 800586e:	d006      	beq.n	800587e <send+0xfa>
      {
         close(sn);
 8005870:	79fb      	ldrb	r3, [r7, #7]
 8005872:	4618      	mov	r0, r3
 8005874:	f7ff fdc6 	bl	8005404 <close>
         return SOCKERR_TIMEOUT;
 8005878:	f06f 030c 	mvn.w	r3, #12
 800587c:	e072      	b.n	8005964 <send+0x1e0>
      }
      else return SOCK_BUSY;
 800587e:	2300      	movs	r3, #0
 8005880:	e070      	b.n	8005964 <send+0x1e0>
   }
   freesize = getSn_TxMAX(sn);
 8005882:	79fb      	ldrb	r3, [r7, #7]
 8005884:	009b      	lsls	r3, r3, #2
 8005886:	3301      	adds	r3, #1
 8005888:	00db      	lsls	r3, r3, #3
 800588a:	f503 53f8 	add.w	r3, r3, #7936	@ 0x1f00
 800588e:	4618      	mov	r0, r3
 8005890:	f7ff fa04 	bl	8004c9c <WIZCHIP_READ>
 8005894:	4603      	mov	r3, r0
 8005896:	029b      	lsls	r3, r3, #10
 8005898:	81bb      	strh	r3, [r7, #12]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 800589a:	88ba      	ldrh	r2, [r7, #4]
 800589c:	89bb      	ldrh	r3, [r7, #12]
 800589e:	429a      	cmp	r2, r3
 80058a0:	d901      	bls.n	80058a6 <send+0x122>
 80058a2:	89bb      	ldrh	r3, [r7, #12]
 80058a4:	80bb      	strh	r3, [r7, #4]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 80058a6:	79fb      	ldrb	r3, [r7, #7]
 80058a8:	4618      	mov	r0, r3
 80058aa:	f7ff fb51 	bl	8004f50 <getSn_TX_FSR>
 80058ae:	4603      	mov	r3, r0
 80058b0:	81bb      	strh	r3, [r7, #12]
      tmp = getSn_SR(sn);
 80058b2:	79fb      	ldrb	r3, [r7, #7]
 80058b4:	009b      	lsls	r3, r3, #2
 80058b6:	3301      	adds	r3, #1
 80058b8:	00db      	lsls	r3, r3, #3
 80058ba:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 80058be:	4618      	mov	r0, r3
 80058c0:	f7ff f9ec 	bl	8004c9c <WIZCHIP_READ>
 80058c4:	4603      	mov	r3, r0
 80058c6:	73fb      	strb	r3, [r7, #15]
      if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
 80058c8:	7bfb      	ldrb	r3, [r7, #15]
 80058ca:	2b17      	cmp	r3, #23
 80058cc:	d009      	beq.n	80058e2 <send+0x15e>
 80058ce:	7bfb      	ldrb	r3, [r7, #15]
 80058d0:	2b1c      	cmp	r3, #28
 80058d2:	d006      	beq.n	80058e2 <send+0x15e>
      {
         close(sn);
 80058d4:	79fb      	ldrb	r3, [r7, #7]
 80058d6:	4618      	mov	r0, r3
 80058d8:	f7ff fd94 	bl	8005404 <close>
         return SOCKERR_SOCKSTATUS;
 80058dc:	f06f 0306 	mvn.w	r3, #6
 80058e0:	e040      	b.n	8005964 <send+0x1e0>
      }
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 80058e2:	4b23      	ldr	r3, [pc, #140]	@ (8005970 <send+0x1ec>)
 80058e4:	881b      	ldrh	r3, [r3, #0]
 80058e6:	461a      	mov	r2, r3
 80058e8:	79fb      	ldrb	r3, [r7, #7]
 80058ea:	fa42 f303 	asr.w	r3, r2, r3
 80058ee:	f003 0301 	and.w	r3, r3, #1
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d005      	beq.n	8005902 <send+0x17e>
 80058f6:	88ba      	ldrh	r2, [r7, #4]
 80058f8:	89bb      	ldrh	r3, [r7, #12]
 80058fa:	429a      	cmp	r2, r3
 80058fc:	d901      	bls.n	8005902 <send+0x17e>
 80058fe:	2300      	movs	r3, #0
 8005900:	e030      	b.n	8005964 <send+0x1e0>
      if(len <= freesize) break;
 8005902:	88ba      	ldrh	r2, [r7, #4]
 8005904:	89bb      	ldrh	r3, [r7, #12]
 8005906:	429a      	cmp	r2, r3
 8005908:	d900      	bls.n	800590c <send+0x188>
      freesize = getSn_TX_FSR(sn);
 800590a:	e7cc      	b.n	80058a6 <send+0x122>
      if(len <= freesize) break;
 800590c:	bf00      	nop
   }
   wiz_send_data(sn, buf, len);
 800590e:	88ba      	ldrh	r2, [r7, #4]
 8005910:	79fb      	ldrb	r3, [r7, #7]
 8005912:	6839      	ldr	r1, [r7, #0]
 8005914:	4618      	mov	r0, r3
 8005916:	f7ff fbad 	bl	8005074 <wiz_send_data>

   #if _WIZCHIP_ == 5300
      setSn_TX_WRSR(sn,len);
   #endif
   
   setSn_CR(sn,Sn_CR_SEND);
 800591a:	79fb      	ldrb	r3, [r7, #7]
 800591c:	009b      	lsls	r3, r3, #2
 800591e:	3301      	adds	r3, #1
 8005920:	00db      	lsls	r3, r3, #3
 8005922:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8005926:	2120      	movs	r1, #32
 8005928:	4618      	mov	r0, r3
 800592a:	f7ff fa03 	bl	8004d34 <WIZCHIP_WRITE>
   /* wait to process the command... */
   while(getSn_CR(sn));
 800592e:	bf00      	nop
 8005930:	79fb      	ldrb	r3, [r7, #7]
 8005932:	009b      	lsls	r3, r3, #2
 8005934:	3301      	adds	r3, #1
 8005936:	00db      	lsls	r3, r3, #3
 8005938:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800593c:	4618      	mov	r0, r3
 800593e:	f7ff f9ad 	bl	8004c9c <WIZCHIP_READ>
 8005942:	4603      	mov	r3, r0
 8005944:	2b00      	cmp	r3, #0
 8005946:	d1f3      	bne.n	8005930 <send+0x1ac>
   sock_is_sending |= (1 << sn);
 8005948:	79fb      	ldrb	r3, [r7, #7]
 800594a:	2201      	movs	r2, #1
 800594c:	fa02 f303 	lsl.w	r3, r2, r3
 8005950:	b21a      	sxth	r2, r3
 8005952:	4b06      	ldr	r3, [pc, #24]	@ (800596c <send+0x1e8>)
 8005954:	881b      	ldrh	r3, [r3, #0]
 8005956:	b21b      	sxth	r3, r3
 8005958:	4313      	orrs	r3, r2
 800595a:	b21b      	sxth	r3, r3
 800595c:	b29a      	uxth	r2, r3
 800595e:	4b03      	ldr	r3, [pc, #12]	@ (800596c <send+0x1e8>)
 8005960:	801a      	strh	r2, [r3, #0]
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 8005962:	88bb      	ldrh	r3, [r7, #4]
}
 8005964:	4618      	mov	r0, r3
 8005966:	3710      	adds	r7, #16
 8005968:	46bd      	mov	sp, r7
 800596a:	bd80      	pop	{r7, pc}
 800596c:	200009fe 	.word	0x200009fe
 8005970:	200009fc 	.word	0x200009fc

08005974 <recv>:


int32_t recv(uint8_t sn, uint8_t * buf, uint16_t len)
{
 8005974:	b590      	push	{r4, r7, lr}
 8005976:	b085      	sub	sp, #20
 8005978:	af00      	add	r7, sp, #0
 800597a:	4603      	mov	r3, r0
 800597c:	6039      	str	r1, [r7, #0]
 800597e:	71fb      	strb	r3, [r7, #7]
 8005980:	4613      	mov	r3, r2
 8005982:	80bb      	strh	r3, [r7, #4]
   uint8_t  tmp = 0;
 8005984:	2300      	movs	r3, #0
 8005986:	73fb      	strb	r3, [r7, #15]
   uint16_t recvsize = 0;
 8005988:	2300      	movs	r3, #0
 800598a:	81bb      	strh	r3, [r7, #12]
#if   _WIZCHIP_ == 5300
   uint8_t head[2];
   uint16_t mr;
#endif
//
   CHECK_SOCKNUM();
 800598c:	79fb      	ldrb	r3, [r7, #7]
 800598e:	2b08      	cmp	r3, #8
 8005990:	d902      	bls.n	8005998 <recv+0x24>
 8005992:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005996:	e09b      	b.n	8005ad0 <recv+0x15c>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8005998:	79fb      	ldrb	r3, [r7, #7]
 800599a:	009b      	lsls	r3, r3, #2
 800599c:	3301      	adds	r3, #1
 800599e:	00db      	lsls	r3, r3, #3
 80059a0:	4618      	mov	r0, r3
 80059a2:	f7ff f97b 	bl	8004c9c <WIZCHIP_READ>
 80059a6:	4603      	mov	r3, r0
 80059a8:	f003 030f 	and.w	r3, r3, #15
 80059ac:	2b01      	cmp	r3, #1
 80059ae:	d002      	beq.n	80059b6 <recv+0x42>
 80059b0:	f06f 0304 	mvn.w	r3, #4
 80059b4:	e08c      	b.n	8005ad0 <recv+0x15c>
   CHECK_SOCKDATA();
 80059b6:	88bb      	ldrh	r3, [r7, #4]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d102      	bne.n	80059c2 <recv+0x4e>
 80059bc:	f06f 030d 	mvn.w	r3, #13
 80059c0:	e086      	b.n	8005ad0 <recv+0x15c>
   
   recvsize = getSn_RxMAX(sn);
 80059c2:	79fb      	ldrb	r3, [r7, #7]
 80059c4:	009b      	lsls	r3, r3, #2
 80059c6:	3301      	adds	r3, #1
 80059c8:	00db      	lsls	r3, r3, #3
 80059ca:	f503 53f0 	add.w	r3, r3, #7680	@ 0x1e00
 80059ce:	4618      	mov	r0, r3
 80059d0:	f7ff f964 	bl	8004c9c <WIZCHIP_READ>
 80059d4:	4603      	mov	r3, r0
 80059d6:	029b      	lsls	r3, r3, #10
 80059d8:	81bb      	strh	r3, [r7, #12]
   if(recvsize < len) len = recvsize;
 80059da:	89ba      	ldrh	r2, [r7, #12]
 80059dc:	88bb      	ldrh	r3, [r7, #4]
 80059de:	429a      	cmp	r2, r3
 80059e0:	d201      	bcs.n	80059e6 <recv+0x72>
 80059e2:	89bb      	ldrh	r3, [r7, #12]
 80059e4:	80bb      	strh	r3, [r7, #4]
   {
#endif
//
      while(1)
      {
         recvsize = getSn_RX_RSR(sn);
 80059e6:	79fb      	ldrb	r3, [r7, #7]
 80059e8:	4618      	mov	r0, r3
 80059ea:	f7ff fafa 	bl	8004fe2 <getSn_RX_RSR>
 80059ee:	4603      	mov	r3, r0
 80059f0:	81bb      	strh	r3, [r7, #12]
         tmp = getSn_SR(sn);
 80059f2:	79fb      	ldrb	r3, [r7, #7]
 80059f4:	009b      	lsls	r3, r3, #2
 80059f6:	3301      	adds	r3, #1
 80059f8:	00db      	lsls	r3, r3, #3
 80059fa:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 80059fe:	4618      	mov	r0, r3
 8005a00:	f7ff f94c 	bl	8004c9c <WIZCHIP_READ>
 8005a04:	4603      	mov	r3, r0
 8005a06:	73fb      	strb	r3, [r7, #15]
         if (tmp != SOCK_ESTABLISHED)
 8005a08:	7bfb      	ldrb	r3, [r7, #15]
 8005a0a:	2b17      	cmp	r3, #23
 8005a0c:	d026      	beq.n	8005a5c <recv+0xe8>
         {
            if(tmp == SOCK_CLOSE_WAIT)
 8005a0e:	7bfb      	ldrb	r3, [r7, #15]
 8005a10:	2b1c      	cmp	r3, #28
 8005a12:	d11c      	bne.n	8005a4e <recv+0xda>
            {
               if(recvsize != 0) break;
 8005a14:	89bb      	ldrh	r3, [r7, #12]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d133      	bne.n	8005a82 <recv+0x10e>
               else if(getSn_TX_FSR(sn) == getSn_TxMAX(sn))
 8005a1a:	79fb      	ldrb	r3, [r7, #7]
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	f7ff fa97 	bl	8004f50 <getSn_TX_FSR>
 8005a22:	4603      	mov	r3, r0
 8005a24:	461c      	mov	r4, r3
 8005a26:	79fb      	ldrb	r3, [r7, #7]
 8005a28:	009b      	lsls	r3, r3, #2
 8005a2a:	3301      	adds	r3, #1
 8005a2c:	00db      	lsls	r3, r3, #3
 8005a2e:	f503 53f8 	add.w	r3, r3, #7936	@ 0x1f00
 8005a32:	4618      	mov	r0, r3
 8005a34:	f7ff f932 	bl	8004c9c <WIZCHIP_READ>
 8005a38:	4603      	mov	r3, r0
 8005a3a:	029b      	lsls	r3, r3, #10
 8005a3c:	429c      	cmp	r4, r3
 8005a3e:	d10d      	bne.n	8005a5c <recv+0xe8>
               {
                  close(sn);
 8005a40:	79fb      	ldrb	r3, [r7, #7]
 8005a42:	4618      	mov	r0, r3
 8005a44:	f7ff fcde 	bl	8005404 <close>
                  return SOCKERR_SOCKSTATUS;
 8005a48:	f06f 0306 	mvn.w	r3, #6
 8005a4c:	e040      	b.n	8005ad0 <recv+0x15c>
               }
            }
            else
            {
               close(sn);
 8005a4e:	79fb      	ldrb	r3, [r7, #7]
 8005a50:	4618      	mov	r0, r3
 8005a52:	f7ff fcd7 	bl	8005404 <close>
               return SOCKERR_SOCKSTATUS;
 8005a56:	f06f 0306 	mvn.w	r3, #6
 8005a5a:	e039      	b.n	8005ad0 <recv+0x15c>
            }
         }
         if((sock_io_mode & (1<<sn)) && (recvsize == 0)) return SOCK_BUSY;
 8005a5c:	4b1e      	ldr	r3, [pc, #120]	@ (8005ad8 <recv+0x164>)
 8005a5e:	881b      	ldrh	r3, [r3, #0]
 8005a60:	461a      	mov	r2, r3
 8005a62:	79fb      	ldrb	r3, [r7, #7]
 8005a64:	fa42 f303 	asr.w	r3, r2, r3
 8005a68:	f003 0301 	and.w	r3, r3, #1
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d004      	beq.n	8005a7a <recv+0x106>
 8005a70:	89bb      	ldrh	r3, [r7, #12]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d101      	bne.n	8005a7a <recv+0x106>
 8005a76:	2300      	movs	r3, #0
 8005a78:	e02a      	b.n	8005ad0 <recv+0x15c>
         if(recvsize != 0) break;
 8005a7a:	89bb      	ldrh	r3, [r7, #12]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d102      	bne.n	8005a86 <recv+0x112>
         recvsize = getSn_RX_RSR(sn);
 8005a80:	e7b1      	b.n	80059e6 <recv+0x72>
               if(recvsize != 0) break;
 8005a82:	bf00      	nop
 8005a84:	e000      	b.n	8005a88 <recv+0x114>
         if(recvsize != 0) break;
 8005a86:	bf00      	nop
   }
   else sock_pack_info[sn] = PACK_COMPLETED;
   if(getSn_MR(sn) & Sn_MR_ALIGN) sock_remained_size[sn] = 0;
   //len = recvsize;
#else   
   if(recvsize < len) len = recvsize;   
 8005a88:	89ba      	ldrh	r2, [r7, #12]
 8005a8a:	88bb      	ldrh	r3, [r7, #4]
 8005a8c:	429a      	cmp	r2, r3
 8005a8e:	d201      	bcs.n	8005a94 <recv+0x120>
 8005a90:	89bb      	ldrh	r3, [r7, #12]
 8005a92:	80bb      	strh	r3, [r7, #4]
   wiz_recv_data(sn, buf, len);
 8005a94:	88ba      	ldrh	r2, [r7, #4]
 8005a96:	79fb      	ldrb	r3, [r7, #7]
 8005a98:	6839      	ldr	r1, [r7, #0]
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	f7ff fb44 	bl	8005128 <wiz_recv_data>
   setSn_CR(sn,Sn_CR_RECV);
 8005aa0:	79fb      	ldrb	r3, [r7, #7]
 8005aa2:	009b      	lsls	r3, r3, #2
 8005aa4:	3301      	adds	r3, #1
 8005aa6:	00db      	lsls	r3, r3, #3
 8005aa8:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8005aac:	2140      	movs	r1, #64	@ 0x40
 8005aae:	4618      	mov	r0, r3
 8005ab0:	f7ff f940 	bl	8004d34 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8005ab4:	bf00      	nop
 8005ab6:	79fb      	ldrb	r3, [r7, #7]
 8005ab8:	009b      	lsls	r3, r3, #2
 8005aba:	3301      	adds	r3, #1
 8005abc:	00db      	lsls	r3, r3, #3
 8005abe:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	f7ff f8ea 	bl	8004c9c <WIZCHIP_READ>
 8005ac8:	4603      	mov	r3, r0
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d1f3      	bne.n	8005ab6 <recv+0x142>
#endif
     
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 8005ace:	88bb      	ldrh	r3, [r7, #4]
}
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	3714      	adds	r7, #20
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	bd90      	pop	{r4, r7, pc}
 8005ad8:	200009fc 	.word	0x200009fc

08005adc <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_enter(void)           {};
void 	  wizchip_cris_enter(void)           {}
 8005adc:	b480      	push	{r7}
 8005ade:	af00      	add	r7, sp, #0
 8005ae0:	bf00      	nop
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae8:	4770      	bx	lr

08005aea <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_exit(void)          {};
void 	  wizchip_cris_exit(void)          {}
 8005aea:	b480      	push	{r7}
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	bf00      	nop
 8005af0:	46bd      	mov	sp, r7
 8005af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af6:	4770      	bx	lr

08005af8 <wizchip_cs_select>:
 * @brief Default function to select chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_select(void)            {};
void 	wizchip_cs_select(void)            {}
 8005af8:	b480      	push	{r7}
 8005afa:	af00      	add	r7, sp, #0
 8005afc:	bf00      	nop
 8005afe:	46bd      	mov	sp, r7
 8005b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b04:	4770      	bx	lr

08005b06 <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_deselect(void)          {};
void 	wizchip_cs_deselect(void)          {}
 8005b06:	b480      	push	{r7}
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	bf00      	nop
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b12:	4770      	bx	lr

08005b14 <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 8005b14:	b480      	push	{r7}
 8005b16:	b083      	sub	sp, #12
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	781b      	ldrb	r3, [r3, #0]
 8005b20:	b2db      	uxtb	r3, r3
 8005b22:	4618      	mov	r0, r3
 8005b24:	370c      	adds	r7, #12
 8005b26:	46bd      	mov	sp, r7
 8005b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2c:	4770      	bx	lr

08005b2e <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void 	wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 8005b2e:	b480      	push	{r7}
 8005b30:	b083      	sub	sp, #12
 8005b32:	af00      	add	r7, sp, #0
 8005b34:	6078      	str	r0, [r7, #4]
 8005b36:	460b      	mov	r3, r1
 8005b38:	70fb      	strb	r3, [r7, #3]
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	78fa      	ldrb	r2, [r7, #3]
 8005b3e:	701a      	strb	r2, [r3, #0]
 8005b40:	bf00      	nop
 8005b42:	370c      	adds	r7, #12
 8005b44:	46bd      	mov	sp, r7
 8005b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4a:	4770      	bx	lr

08005b4c <wizchip_spi_readbyte>:
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//uint8_t wizchip_spi_readbyte(void)        {return 0;};
uint8_t wizchip_spi_readbyte(void)        {return 0;}
 8005b4c:	b480      	push	{r7}
 8005b4e:	af00      	add	r7, sp, #0
 8005b50:	2300      	movs	r3, #0
 8005b52:	4618      	mov	r0, r3
 8005b54:	46bd      	mov	sp, r7
 8005b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5a:	4770      	bx	lr

08005b5c <wizchip_spi_writebyte>:
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writebyte(uint8_t wb) {};
void 	wizchip_spi_writebyte(uint8_t wb) {}
 8005b5c:	b480      	push	{r7}
 8005b5e:	b083      	sub	sp, #12
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	4603      	mov	r3, r0
 8005b64:	71fb      	strb	r3, [r7, #7]
 8005b66:	bf00      	nop
 8005b68:	370c      	adds	r7, #12
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b70:	4770      	bx	lr

08005b72 <wizchip_spi_readburst>:
 * @brief Default function to burst read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_readburst(uint8_t* pBuf, uint16_t len) 	{}; 
void 	wizchip_spi_readburst(uint8_t* pBuf, uint16_t len) 	{}
 8005b72:	b480      	push	{r7}
 8005b74:	b083      	sub	sp, #12
 8005b76:	af00      	add	r7, sp, #0
 8005b78:	6078      	str	r0, [r7, #4]
 8005b7a:	460b      	mov	r3, r1
 8005b7c:	807b      	strh	r3, [r7, #2]
 8005b7e:	bf00      	nop
 8005b80:	370c      	adds	r7, #12
 8005b82:	46bd      	mov	sp, r7
 8005b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b88:	4770      	bx	lr

08005b8a <wizchip_spi_writeburst>:
 * @brief Default function to burst write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {};
void 	wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {}
 8005b8a:	b480      	push	{r7}
 8005b8c:	b083      	sub	sp, #12
 8005b8e:	af00      	add	r7, sp, #0
 8005b90:	6078      	str	r0, [r7, #4]
 8005b92:	460b      	mov	r3, r1
 8005b94:	807b      	strh	r3, [r7, #2]
 8005b96:	bf00      	nop
 8005b98:	370c      	adds	r7, #12
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba0:	4770      	bx	lr
	...

08005ba4 <reg_wizchip_cris_cbfunc>:

static uint8_t    _DNS_[4];      // DNS server ip address
static dhcp_mode  _DHCP_;        // DHCP mode

void reg_wizchip_cris_cbfunc(void(*cris_en)(void), void(*cris_ex)(void))
{
 8005ba4:	b480      	push	{r7}
 8005ba6:	b083      	sub	sp, #12
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
 8005bac:	6039      	str	r1, [r7, #0]
   if(!cris_en || !cris_ex)
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d002      	beq.n	8005bba <reg_wizchip_cris_cbfunc+0x16>
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d106      	bne.n	8005bc8 <reg_wizchip_cris_cbfunc+0x24>
   {
      WIZCHIP.CRIS._enter = wizchip_cris_enter;
 8005bba:	4b0a      	ldr	r3, [pc, #40]	@ (8005be4 <reg_wizchip_cris_cbfunc+0x40>)
 8005bbc:	4a0a      	ldr	r2, [pc, #40]	@ (8005be8 <reg_wizchip_cris_cbfunc+0x44>)
 8005bbe:	60da      	str	r2, [r3, #12]
      WIZCHIP.CRIS._exit  = wizchip_cris_exit;
 8005bc0:	4b08      	ldr	r3, [pc, #32]	@ (8005be4 <reg_wizchip_cris_cbfunc+0x40>)
 8005bc2:	4a0a      	ldr	r2, [pc, #40]	@ (8005bec <reg_wizchip_cris_cbfunc+0x48>)
 8005bc4:	611a      	str	r2, [r3, #16]
 8005bc6:	e006      	b.n	8005bd6 <reg_wizchip_cris_cbfunc+0x32>
   }
   else
   {
      WIZCHIP.CRIS._enter = cris_en;
 8005bc8:	4a06      	ldr	r2, [pc, #24]	@ (8005be4 <reg_wizchip_cris_cbfunc+0x40>)
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	60d3      	str	r3, [r2, #12]
      WIZCHIP.CRIS._exit  = cris_ex;
 8005bce:	4a05      	ldr	r2, [pc, #20]	@ (8005be4 <reg_wizchip_cris_cbfunc+0x40>)
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	6113      	str	r3, [r2, #16]
   }
}
 8005bd4:	bf00      	nop
 8005bd6:	bf00      	nop
 8005bd8:	370c      	adds	r7, #12
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be0:	4770      	bx	lr
 8005be2:	bf00      	nop
 8005be4:	20000018 	.word	0x20000018
 8005be8:	08005add 	.word	0x08005add
 8005bec:	08005aeb 	.word	0x08005aeb

08005bf0 <reg_wizchip_cs_cbfunc>:

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
 8005bf0:	b480      	push	{r7}
 8005bf2:	b083      	sub	sp, #12
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
 8005bf8:	6039      	str	r1, [r7, #0]
   if(!cs_sel || !cs_desel)
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d002      	beq.n	8005c06 <reg_wizchip_cs_cbfunc+0x16>
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d106      	bne.n	8005c14 <reg_wizchip_cs_cbfunc+0x24>
   {
      WIZCHIP.CS._select   = wizchip_cs_select;
 8005c06:	4b0a      	ldr	r3, [pc, #40]	@ (8005c30 <reg_wizchip_cs_cbfunc+0x40>)
 8005c08:	4a0a      	ldr	r2, [pc, #40]	@ (8005c34 <reg_wizchip_cs_cbfunc+0x44>)
 8005c0a:	615a      	str	r2, [r3, #20]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 8005c0c:	4b08      	ldr	r3, [pc, #32]	@ (8005c30 <reg_wizchip_cs_cbfunc+0x40>)
 8005c0e:	4a0a      	ldr	r2, [pc, #40]	@ (8005c38 <reg_wizchip_cs_cbfunc+0x48>)
 8005c10:	619a      	str	r2, [r3, #24]
 8005c12:	e006      	b.n	8005c22 <reg_wizchip_cs_cbfunc+0x32>
   }
   else
   {
      WIZCHIP.CS._select   = cs_sel;
 8005c14:	4a06      	ldr	r2, [pc, #24]	@ (8005c30 <reg_wizchip_cs_cbfunc+0x40>)
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	6153      	str	r3, [r2, #20]
      WIZCHIP.CS._deselect = cs_desel;
 8005c1a:	4a05      	ldr	r2, [pc, #20]	@ (8005c30 <reg_wizchip_cs_cbfunc+0x40>)
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	6193      	str	r3, [r2, #24]
   }
}
 8005c20:	bf00      	nop
 8005c22:	bf00      	nop
 8005c24:	370c      	adds	r7, #12
 8005c26:	46bd      	mov	sp, r7
 8005c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2c:	4770      	bx	lr
 8005c2e:	bf00      	nop
 8005c30:	20000018 	.word	0x20000018
 8005c34:	08005af9 	.word	0x08005af9
 8005c38:	08005b07 	.word	0x08005b07

08005c3c <reg_wizchip_spi_cbfunc>:
      WIZCHIP.IF.BUS._write_data  = bus_wb;
   }
}

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
 8005c3c:	b480      	push	{r7}
 8005c3e:	b083      	sub	sp, #12
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
 8005c44:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 8005c46:	bf00      	nop
 8005c48:	4b0f      	ldr	r3, [pc, #60]	@ (8005c88 <reg_wizchip_spi_cbfunc+0x4c>)
 8005c4a:	881b      	ldrh	r3, [r3, #0]
 8005c4c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d0f9      	beq.n	8005c48 <reg_wizchip_spi_cbfunc+0xc>
   
   if(!spi_rb || !spi_wb)
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d002      	beq.n	8005c60 <reg_wizchip_spi_cbfunc+0x24>
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d106      	bne.n	8005c6e <reg_wizchip_spi_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
 8005c60:	4b09      	ldr	r3, [pc, #36]	@ (8005c88 <reg_wizchip_spi_cbfunc+0x4c>)
 8005c62:	4a0a      	ldr	r2, [pc, #40]	@ (8005c8c <reg_wizchip_spi_cbfunc+0x50>)
 8005c64:	61da      	str	r2, [r3, #28]
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
 8005c66:	4b08      	ldr	r3, [pc, #32]	@ (8005c88 <reg_wizchip_spi_cbfunc+0x4c>)
 8005c68:	4a09      	ldr	r2, [pc, #36]	@ (8005c90 <reg_wizchip_spi_cbfunc+0x54>)
 8005c6a:	621a      	str	r2, [r3, #32]
 8005c6c:	e006      	b.n	8005c7c <reg_wizchip_spi_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
 8005c6e:	4a06      	ldr	r2, [pc, #24]	@ (8005c88 <reg_wizchip_spi_cbfunc+0x4c>)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	61d3      	str	r3, [r2, #28]
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
 8005c74:	4a04      	ldr	r2, [pc, #16]	@ (8005c88 <reg_wizchip_spi_cbfunc+0x4c>)
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	6213      	str	r3, [r2, #32]
   }
}
 8005c7a:	bf00      	nop
 8005c7c:	bf00      	nop
 8005c7e:	370c      	adds	r7, #12
 8005c80:	46bd      	mov	sp, r7
 8005c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c86:	4770      	bx	lr
 8005c88:	20000018 	.word	0x20000018
 8005c8c:	08005b4d 	.word	0x08005b4d
 8005c90:	08005b5d 	.word	0x08005b5d

08005c94 <reg_wizchip_spiburst_cbfunc>:

// 20140626 Eric Added for SPI burst operations
void reg_wizchip_spiburst_cbfunc(void (*spi_rb)(uint8_t* pBuf, uint16_t len), void (*spi_wb)(uint8_t* pBuf, uint16_t len))
{
 8005c94:	b480      	push	{r7}
 8005c96:	b083      	sub	sp, #12
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
 8005c9c:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 8005c9e:	bf00      	nop
 8005ca0:	4b0f      	ldr	r3, [pc, #60]	@ (8005ce0 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8005ca2:	881b      	ldrh	r3, [r3, #0]
 8005ca4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d0f9      	beq.n	8005ca0 <reg_wizchip_spiburst_cbfunc+0xc>

   if(!spi_rb || !spi_wb)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d002      	beq.n	8005cb8 <reg_wizchip_spiburst_cbfunc+0x24>
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d106      	bne.n	8005cc6 <reg_wizchip_spiburst_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_burst   = wizchip_spi_readburst;
 8005cb8:	4b09      	ldr	r3, [pc, #36]	@ (8005ce0 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8005cba:	4a0a      	ldr	r2, [pc, #40]	@ (8005ce4 <reg_wizchip_spiburst_cbfunc+0x50>)
 8005cbc:	625a      	str	r2, [r3, #36]	@ 0x24
      WIZCHIP.IF.SPI._write_burst  = wizchip_spi_writeburst;
 8005cbe:	4b08      	ldr	r3, [pc, #32]	@ (8005ce0 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8005cc0:	4a09      	ldr	r2, [pc, #36]	@ (8005ce8 <reg_wizchip_spiburst_cbfunc+0x54>)
 8005cc2:	629a      	str	r2, [r3, #40]	@ 0x28
 8005cc4:	e006      	b.n	8005cd4 <reg_wizchip_spiburst_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_burst   = spi_rb;
 8005cc6:	4a06      	ldr	r2, [pc, #24]	@ (8005ce0 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	6253      	str	r3, [r2, #36]	@ 0x24
      WIZCHIP.IF.SPI._write_burst  = spi_wb;
 8005ccc:	4a04      	ldr	r2, [pc, #16]	@ (8005ce0 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	6293      	str	r3, [r2, #40]	@ 0x28
   }
}
 8005cd2:	bf00      	nop
 8005cd4:	bf00      	nop
 8005cd6:	370c      	adds	r7, #12
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cde:	4770      	bx	lr
 8005ce0:	20000018 	.word	0x20000018
 8005ce4:	08005b73 	.word	0x08005b73
 8005ce8:	08005b8b 	.word	0x08005b8b

08005cec <ctlwizchip>:

int8_t ctlwizchip(ctlwizchip_type cwtype, void* arg)
{
 8005cec:	b590      	push	{r4, r7, lr}
 8005cee:	b087      	sub	sp, #28
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	4603      	mov	r3, r0
 8005cf4:	6039      	str	r1, [r7, #0]
 8005cf6:	71fb      	strb	r3, [r7, #7]
#if	_WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
   uint8_t tmp = 0;
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	75fb      	strb	r3, [r7, #23]
#endif
   uint8_t* ptmp[2] = {0,0};
 8005cfc:	2300      	movs	r3, #0
 8005cfe:	60fb      	str	r3, [r7, #12]
 8005d00:	2300      	movs	r3, #0
 8005d02:	613b      	str	r3, [r7, #16]
   switch(cwtype)
 8005d04:	79fb      	ldrb	r3, [r7, #7]
 8005d06:	2b0f      	cmp	r3, #15
 8005d08:	f200 80c5 	bhi.w	8005e96 <ctlwizchip+0x1aa>
 8005d0c:	a201      	add	r2, pc, #4	@ (adr r2, 8005d14 <ctlwizchip+0x28>)
 8005d0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d12:	bf00      	nop
 8005d14:	08005d55 	.word	0x08005d55
 8005d18:	08005d5b 	.word	0x08005d5b
 8005d1c:	08005d87 	.word	0x08005d87
 8005d20:	08005d7b 	.word	0x08005d7b
 8005d24:	08005d95 	.word	0x08005d95
 8005d28:	08005da1 	.word	0x08005da1
 8005d2c:	08005daf 	.word	0x08005daf
 8005d30:	08005dd5 	.word	0x08005dd5
 8005d34:	08005df7 	.word	0x08005df7
 8005d38:	08005e3b 	.word	0x08005e3b
 8005d3c:	08005e41 	.word	0x08005e41
 8005d40:	08005e49 	.word	0x08005e49
 8005d44:	08005e9d 	.word	0x08005e9d
 8005d48:	08005e51 	.word	0x08005e51
 8005d4c:	08005e5f 	.word	0x08005e5f
 8005d50:	08005e7b 	.word	0x08005e7b
   {
      case CW_RESET_WIZCHIP:
         wizchip_sw_reset();
 8005d54:	f000 f8e8 	bl	8005f28 <wizchip_sw_reset>
         break;
 8005d58:	e0a1      	b.n	8005e9e <ctlwizchip+0x1b2>
      case CW_INIT_WIZCHIP:
         if(arg != 0) 
 8005d5a:	683b      	ldr	r3, [r7, #0]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d004      	beq.n	8005d6a <ctlwizchip+0x7e>
         {
            ptmp[0] = (uint8_t*)arg;
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	60fb      	str	r3, [r7, #12]
            ptmp[1] = ptmp[0] + _WIZCHIP_SOCK_NUM_;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	3308      	adds	r3, #8
 8005d68:	613b      	str	r3, [r7, #16]
         }
         return wizchip_init(ptmp[0], ptmp[1]);
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	693a      	ldr	r2, [r7, #16]
 8005d6e:	4611      	mov	r1, r2
 8005d70:	4618      	mov	r0, r3
 8005d72:	f000 f925 	bl	8005fc0 <wizchip_init>
 8005d76:	4603      	mov	r3, r0
 8005d78:	e092      	b.n	8005ea0 <ctlwizchip+0x1b4>
      case CW_CLR_INTERRUPT:
         wizchip_clrinterrupt(*((intr_kind*)arg));
 8005d7a:	683b      	ldr	r3, [r7, #0]
 8005d7c:	881b      	ldrh	r3, [r3, #0]
 8005d7e:	4618      	mov	r0, r3
 8005d80:	f000 f9aa 	bl	80060d8 <wizchip_clrinterrupt>
         break;
 8005d84:	e08b      	b.n	8005e9e <ctlwizchip+0x1b2>
      case CW_GET_INTERRUPT:
        *((intr_kind*)arg) = wizchip_getinterrupt();
 8005d86:	f000 f9db 	bl	8006140 <wizchip_getinterrupt>
 8005d8a:	4603      	mov	r3, r0
 8005d8c:	461a      	mov	r2, r3
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	801a      	strh	r2, [r3, #0]
         break;
 8005d92:	e084      	b.n	8005e9e <ctlwizchip+0x1b2>
      case CW_SET_INTRMASK:
         wizchip_setinterruptmask(*((intr_kind*)arg));
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	881b      	ldrh	r3, [r3, #0]
 8005d98:	4618      	mov	r0, r3
 8005d9a:	f000 f9f6 	bl	800618a <wizchip_setinterruptmask>
         break;         
 8005d9e:	e07e      	b.n	8005e9e <ctlwizchip+0x1b2>
      case CW_GET_INTRMASK:
         *((intr_kind*)arg) = wizchip_getinterruptmask();
 8005da0:	f000 fa0e 	bl	80061c0 <wizchip_getinterruptmask>
 8005da4:	4603      	mov	r3, r0
 8005da6:	461a      	mov	r2, r3
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	801a      	strh	r2, [r3, #0]
         break;
 8005dac:	e077      	b.n	8005e9e <ctlwizchip+0x1b2>
   //M20150601 : This can be supported by W5200, W5500
   //#if _WIZCHIP_ > W5100
   #if (_WIZCHIP_ == W5200 || _WIZCHIP_ == W5500)
      case CW_SET_INTRTIME:
         setINTLEVEL(*(uint16_t*)arg);
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	881b      	ldrh	r3, [r3, #0]
 8005db2:	0a1b      	lsrs	r3, r3, #8
 8005db4:	b29b      	uxth	r3, r3
 8005db6:	b2db      	uxtb	r3, r3
 8005db8:	4619      	mov	r1, r3
 8005dba:	f44f 5098 	mov.w	r0, #4864	@ 0x1300
 8005dbe:	f7fe ffb9 	bl	8004d34 <WIZCHIP_WRITE>
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	881b      	ldrh	r3, [r3, #0]
 8005dc6:	b2db      	uxtb	r3, r3
 8005dc8:	4619      	mov	r1, r3
 8005dca:	f44f 50a0 	mov.w	r0, #5120	@ 0x1400
 8005dce:	f7fe ffb1 	bl	8004d34 <WIZCHIP_WRITE>
         break;
 8005dd2:	e064      	b.n	8005e9e <ctlwizchip+0x1b2>
      case CW_GET_INTRTIME:
         *(uint16_t*)arg = getINTLEVEL();
 8005dd4:	f44f 5098 	mov.w	r0, #4864	@ 0x1300
 8005dd8:	f7fe ff60 	bl	8004c9c <WIZCHIP_READ>
 8005ddc:	4603      	mov	r3, r0
 8005dde:	021b      	lsls	r3, r3, #8
 8005de0:	b29c      	uxth	r4, r3
 8005de2:	f44f 50a0 	mov.w	r0, #5120	@ 0x1400
 8005de6:	f7fe ff59 	bl	8004c9c <WIZCHIP_READ>
 8005dea:	4603      	mov	r3, r0
 8005dec:	4423      	add	r3, r4
 8005dee:	b29a      	uxth	r2, r3
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	801a      	strh	r2, [r3, #0]
         break;
 8005df4:	e053      	b.n	8005e9e <ctlwizchip+0x1b2>
   #endif
      case CW_GET_ID:
         ((uint8_t*)arg)[0] = WIZCHIP.id[0];
 8005df6:	4b2c      	ldr	r3, [pc, #176]	@ (8005ea8 <ctlwizchip+0x1bc>)
 8005df8:	789a      	ldrb	r2, [r3, #2]
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[1] = WIZCHIP.id[1];
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	3301      	adds	r3, #1
 8005e02:	4a29      	ldr	r2, [pc, #164]	@ (8005ea8 <ctlwizchip+0x1bc>)
 8005e04:	78d2      	ldrb	r2, [r2, #3]
 8005e06:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[2] = WIZCHIP.id[2];
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	3302      	adds	r3, #2
 8005e0c:	4a26      	ldr	r2, [pc, #152]	@ (8005ea8 <ctlwizchip+0x1bc>)
 8005e0e:	7912      	ldrb	r2, [r2, #4]
 8005e10:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[3] = WIZCHIP.id[3];
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	3303      	adds	r3, #3
 8005e16:	4a24      	ldr	r2, [pc, #144]	@ (8005ea8 <ctlwizchip+0x1bc>)
 8005e18:	7952      	ldrb	r2, [r2, #5]
 8005e1a:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[4] = WIZCHIP.id[4];
 8005e1c:	683b      	ldr	r3, [r7, #0]
 8005e1e:	3304      	adds	r3, #4
 8005e20:	4a21      	ldr	r2, [pc, #132]	@ (8005ea8 <ctlwizchip+0x1bc>)
 8005e22:	7992      	ldrb	r2, [r2, #6]
 8005e24:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[5] = WIZCHIP.id[5];
 8005e26:	683b      	ldr	r3, [r7, #0]
 8005e28:	3305      	adds	r3, #5
 8005e2a:	4a1f      	ldr	r2, [pc, #124]	@ (8005ea8 <ctlwizchip+0x1bc>)
 8005e2c:	79d2      	ldrb	r2, [r2, #7]
 8005e2e:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[6] = 0;
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	3306      	adds	r3, #6
 8005e34:	2200      	movs	r2, #0
 8005e36:	701a      	strb	r2, [r3, #0]
         break;
 8005e38:	e031      	b.n	8005e9e <ctlwizchip+0x1b2>
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5500
      case CW_RESET_PHY:
         wizphy_reset();
 8005e3a:	f000 fa13 	bl	8006264 <wizphy_reset>
         break;
 8005e3e:	e02e      	b.n	8005e9e <ctlwizchip+0x1b2>
      case CW_SET_PHYCONF:
         wizphy_setphyconf((wiz_PhyConf*)arg);
 8005e40:	6838      	ldr	r0, [r7, #0]
 8005e42:	f000 fa36 	bl	80062b2 <wizphy_setphyconf>
         break;
 8005e46:	e02a      	b.n	8005e9e <ctlwizchip+0x1b2>
      case CW_GET_PHYCONF:
         wizphy_getphyconf((wiz_PhyConf*)arg);
 8005e48:	6838      	ldr	r0, [r7, #0]
 8005e4a:	f000 fa75 	bl	8006338 <wizphy_getphyconf>
         break;
 8005e4e:	e026      	b.n	8005e9e <ctlwizchip+0x1b2>
      case CW_GET_PHYSTATUS:
         break;
      case CW_SET_PHYPOWMODE:
         return wizphy_setphypmode(*(uint8_t*)arg);
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	781b      	ldrb	r3, [r3, #0]
 8005e54:	4618      	mov	r0, r3
 8005e56:	f000 fad9 	bl	800640c <wizphy_setphypmode>
 8005e5a:	4603      	mov	r3, r0
 8005e5c:	e020      	b.n	8005ea0 <ctlwizchip+0x1b4>
   #endif
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
      case CW_GET_PHYPOWMODE:
         tmp = wizphy_getphypmode();
 8005e5e:	f000 f9e8 	bl	8006232 <wizphy_getphypmode>
 8005e62:	4603      	mov	r3, r0
 8005e64:	75fb      	strb	r3, [r7, #23]
         if((int8_t)tmp == -1) return -1;
 8005e66:	7dfb      	ldrb	r3, [r7, #23]
 8005e68:	2bff      	cmp	r3, #255	@ 0xff
 8005e6a:	d102      	bne.n	8005e72 <ctlwizchip+0x186>
 8005e6c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005e70:	e016      	b.n	8005ea0 <ctlwizchip+0x1b4>
         *(uint8_t*)arg = tmp;
 8005e72:	683b      	ldr	r3, [r7, #0]
 8005e74:	7dfa      	ldrb	r2, [r7, #23]
 8005e76:	701a      	strb	r2, [r3, #0]
         break;
 8005e78:	e011      	b.n	8005e9e <ctlwizchip+0x1b2>
      case CW_GET_PHYLINK:
         tmp = wizphy_getphylink();
 8005e7a:	f000 f9c4 	bl	8006206 <wizphy_getphylink>
 8005e7e:	4603      	mov	r3, r0
 8005e80:	75fb      	strb	r3, [r7, #23]
         if((int8_t)tmp == -1) return -1;
 8005e82:	7dfb      	ldrb	r3, [r7, #23]
 8005e84:	2bff      	cmp	r3, #255	@ 0xff
 8005e86:	d102      	bne.n	8005e8e <ctlwizchip+0x1a2>
 8005e88:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005e8c:	e008      	b.n	8005ea0 <ctlwizchip+0x1b4>
         *(uint8_t*)arg = tmp;
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	7dfa      	ldrb	r2, [r7, #23]
 8005e92:	701a      	strb	r2, [r3, #0]
         break;
 8005e94:	e003      	b.n	8005e9e <ctlwizchip+0x1b2>
   #endif      
      default:
         return -1;
 8005e96:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005e9a:	e001      	b.n	8005ea0 <ctlwizchip+0x1b4>
         break;
 8005e9c:	bf00      	nop
   }
   return 0;
 8005e9e:	2300      	movs	r3, #0
}
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	371c      	adds	r7, #28
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	bd90      	pop	{r4, r7, pc}
 8005ea8:	20000018 	.word	0x20000018

08005eac <ctlnetwork>:


int8_t ctlnetwork(ctlnetwork_type cntype, void* arg)
{
 8005eac:	b580      	push	{r7, lr}
 8005eae:	b082      	sub	sp, #8
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	4603      	mov	r3, r0
 8005eb4:	6039      	str	r1, [r7, #0]
 8005eb6:	71fb      	strb	r3, [r7, #7]
   
   switch(cntype)
 8005eb8:	79fb      	ldrb	r3, [r7, #7]
 8005eba:	2b05      	cmp	r3, #5
 8005ebc:	d82c      	bhi.n	8005f18 <ctlnetwork+0x6c>
 8005ebe:	a201      	add	r2, pc, #4	@ (adr r2, 8005ec4 <ctlnetwork+0x18>)
 8005ec0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ec4:	08005edd 	.word	0x08005edd
 8005ec8:	08005ee5 	.word	0x08005ee5
 8005ecc:	08005eed 	.word	0x08005eed
 8005ed0:	08005efb 	.word	0x08005efb
 8005ed4:	08005f09 	.word	0x08005f09
 8005ed8:	08005f11 	.word	0x08005f11
   {
      case CN_SET_NETINFO:
         wizchip_setnetinfo((wiz_NetInfo*)arg);
 8005edc:	6838      	ldr	r0, [r7, #0]
 8005ede:	f000 fadf 	bl	80064a0 <wizchip_setnetinfo>
         break;
 8005ee2:	e01c      	b.n	8005f1e <ctlnetwork+0x72>
      case CN_GET_NETINFO:
         wizchip_getnetinfo((wiz_NetInfo*)arg);
 8005ee4:	6838      	ldr	r0, [r7, #0]
 8005ee6:	f000 fb1b 	bl	8006520 <wizchip_getnetinfo>
         break;
 8005eea:	e018      	b.n	8005f1e <ctlnetwork+0x72>
      case CN_SET_NETMODE:
         return wizchip_setnetmode(*(netmode_type*)arg);
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	781b      	ldrb	r3, [r3, #0]
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	f000 fb55 	bl	80065a0 <wizchip_setnetmode>
 8005ef6:	4603      	mov	r3, r0
 8005ef8:	e012      	b.n	8005f20 <ctlnetwork+0x74>
      case CN_GET_NETMODE:
         *(netmode_type*)arg = wizchip_getnetmode();
 8005efa:	f000 fb73 	bl	80065e4 <wizchip_getnetmode>
 8005efe:	4603      	mov	r3, r0
 8005f00:	461a      	mov	r2, r3
 8005f02:	683b      	ldr	r3, [r7, #0]
 8005f04:	701a      	strb	r2, [r3, #0]
         break;
 8005f06:	e00a      	b.n	8005f1e <ctlnetwork+0x72>
      case CN_SET_TIMEOUT:
         wizchip_settimeout((wiz_NetTimeout*)arg);
 8005f08:	6838      	ldr	r0, [r7, #0]
 8005f0a:	f000 fb73 	bl	80065f4 <wizchip_settimeout>
         break;
 8005f0e:	e006      	b.n	8005f1e <ctlnetwork+0x72>
      case CN_GET_TIMEOUT:
         wizchip_gettimeout((wiz_NetTimeout*)arg);
 8005f10:	6838      	ldr	r0, [r7, #0]
 8005f12:	f000 fb90 	bl	8006636 <wizchip_gettimeout>
         break;
 8005f16:	e002      	b.n	8005f1e <ctlnetwork+0x72>
      default:
         return -1;
 8005f18:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005f1c:	e000      	b.n	8005f20 <ctlnetwork+0x74>
   }
   return 0;
 8005f1e:	2300      	movs	r3, #0
}
 8005f20:	4618      	mov	r0, r3
 8005f22:	3708      	adds	r7, #8
 8005f24:	46bd      	mov	sp, r7
 8005f26:	bd80      	pop	{r7, pc}

08005f28 <wizchip_sw_reset>:

void wizchip_sw_reset(void)
{
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	b086      	sub	sp, #24
 8005f2c:	af00      	add	r7, sp, #0
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 8005f2e:	1d3b      	adds	r3, r7, #4
 8005f30:	2206      	movs	r2, #6
 8005f32:	4619      	mov	r1, r3
 8005f34:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 8005f38:	f7fe ff4a 	bl	8004dd0 <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 8005f3c:	f107 0314 	add.w	r3, r7, #20
 8005f40:	2204      	movs	r2, #4
 8005f42:	4619      	mov	r1, r3
 8005f44:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8005f48:	f7fe ff42 	bl	8004dd0 <WIZCHIP_READ_BUF>
 8005f4c:	f107 0310 	add.w	r3, r7, #16
 8005f50:	2204      	movs	r2, #4
 8005f52:	4619      	mov	r1, r3
 8005f54:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 8005f58:	f7fe ff3a 	bl	8004dd0 <WIZCHIP_READ_BUF>
 8005f5c:	f107 030c 	add.w	r3, r7, #12
 8005f60:	2204      	movs	r2, #4
 8005f62:	4619      	mov	r1, r3
 8005f64:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 8005f68:	f7fe ff32 	bl	8004dd0 <WIZCHIP_READ_BUF>
   setMR(MR_RST);
 8005f6c:	2180      	movs	r1, #128	@ 0x80
 8005f6e:	2000      	movs	r0, #0
 8005f70:	f7fe fee0 	bl	8004d34 <WIZCHIP_WRITE>
   getMR(); // for delay
 8005f74:	2000      	movs	r0, #0
 8005f76:	f7fe fe91 	bl	8004c9c <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 8005f7a:	1d3b      	adds	r3, r7, #4
 8005f7c:	2206      	movs	r2, #6
 8005f7e:	4619      	mov	r1, r3
 8005f80:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 8005f84:	f7fe ff84 	bl	8004e90 <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 8005f88:	f107 0314 	add.w	r3, r7, #20
 8005f8c:	2204      	movs	r2, #4
 8005f8e:	4619      	mov	r1, r3
 8005f90:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8005f94:	f7fe ff7c 	bl	8004e90 <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 8005f98:	f107 0310 	add.w	r3, r7, #16
 8005f9c:	2204      	movs	r2, #4
 8005f9e:	4619      	mov	r1, r3
 8005fa0:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 8005fa4:	f7fe ff74 	bl	8004e90 <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 8005fa8:	f107 030c 	add.w	r3, r7, #12
 8005fac:	2204      	movs	r2, #4
 8005fae:	4619      	mov	r1, r3
 8005fb0:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 8005fb4:	f7fe ff6c 	bl	8004e90 <WIZCHIP_WRITE_BUF>
}
 8005fb8:	bf00      	nop
 8005fba:	3718      	adds	r7, #24
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	bd80      	pop	{r7, pc}

08005fc0 <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	b084      	sub	sp, #16
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
 8005fc8:	6039      	str	r1, [r7, #0]
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
 8005fca:	2300      	movs	r3, #0
 8005fcc:	73bb      	strb	r3, [r7, #14]
   wizchip_sw_reset();
 8005fce:	f7ff ffab 	bl	8005f28 <wizchip_sw_reset>
   if(txsize)
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d03b      	beq.n	8006050 <wizchip_init+0x90>
   {
      tmp = 0;
 8005fd8:	2300      	movs	r3, #0
 8005fda:	73bb      	strb	r3, [r7, #14]
			tmp += txsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
#else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8005fdc:	2300      	movs	r3, #0
 8005fde:	73fb      	strb	r3, [r7, #15]
 8005fe0:	e015      	b.n	800600e <wizchip_init+0x4e>
		{
			tmp += txsize[i];
 8005fe2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005fe6:	687a      	ldr	r2, [r7, #4]
 8005fe8:	4413      	add	r3, r2
 8005fea:	781a      	ldrb	r2, [r3, #0]
 8005fec:	7bbb      	ldrb	r3, [r7, #14]
 8005fee:	4413      	add	r3, r2
 8005ff0:	b2db      	uxtb	r3, r3
 8005ff2:	73bb      	strb	r3, [r7, #14]

#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
#else
			if(tmp > 16) return -1;
 8005ff4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005ff8:	2b10      	cmp	r3, #16
 8005ffa:	dd02      	ble.n	8006002 <wizchip_init+0x42>
 8005ffc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006000:	e066      	b.n	80060d0 <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8006002:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006006:	b2db      	uxtb	r3, r3
 8006008:	3301      	adds	r3, #1
 800600a:	b2db      	uxtb	r3, r3
 800600c:	73fb      	strb	r3, [r7, #15]
 800600e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006012:	2b07      	cmp	r3, #7
 8006014:	dde5      	ble.n	8005fe2 <wizchip_init+0x22>
#endif
		}
#endif
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8006016:	2300      	movs	r3, #0
 8006018:	73fb      	strb	r3, [r7, #15]
 800601a:	e015      	b.n	8006048 <wizchip_init+0x88>
#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100
			j = 0;
			while((txsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_TXBUF_SIZE(i, j);
#else
			setSn_TXBUF_SIZE(i, txsize[i]);
 800601c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006020:	009b      	lsls	r3, r3, #2
 8006022:	3301      	adds	r3, #1
 8006024:	00db      	lsls	r3, r3, #3
 8006026:	f503 53f8 	add.w	r3, r3, #7936	@ 0x1f00
 800602a:	4618      	mov	r0, r3
 800602c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006030:	687a      	ldr	r2, [r7, #4]
 8006032:	4413      	add	r3, r2
 8006034:	781b      	ldrb	r3, [r3, #0]
 8006036:	4619      	mov	r1, r3
 8006038:	f7fe fe7c 	bl	8004d34 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800603c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006040:	b2db      	uxtb	r3, r3
 8006042:	3301      	adds	r3, #1
 8006044:	b2db      	uxtb	r3, r3
 8006046:	73fb      	strb	r3, [r7, #15]
 8006048:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800604c:	2b07      	cmp	r3, #7
 800604e:	dde5      	ble.n	800601c <wizchip_init+0x5c>
#endif
		}	
   }

   if(rxsize)
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d03b      	beq.n	80060ce <wizchip_init+0x10e>
   {
      tmp = 0;
 8006056:	2300      	movs	r3, #0
 8006058:	73bb      	strb	r3, [r7, #14]
			tmp += rxsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
#else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800605a:	2300      	movs	r3, #0
 800605c:	73fb      	strb	r3, [r7, #15]
 800605e:	e015      	b.n	800608c <wizchip_init+0xcc>
		{
			tmp += rxsize[i];
 8006060:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006064:	683a      	ldr	r2, [r7, #0]
 8006066:	4413      	add	r3, r2
 8006068:	781a      	ldrb	r2, [r3, #0]
 800606a:	7bbb      	ldrb	r3, [r7, #14]
 800606c:	4413      	add	r3, r2
 800606e:	b2db      	uxtb	r3, r3
 8006070:	73bb      	strb	r3, [r7, #14]
#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
#else
			if(tmp > 16) return -1;
 8006072:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006076:	2b10      	cmp	r3, #16
 8006078:	dd02      	ble.n	8006080 <wizchip_init+0xc0>
 800607a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800607e:	e027      	b.n	80060d0 <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8006080:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006084:	b2db      	uxtb	r3, r3
 8006086:	3301      	adds	r3, #1
 8006088:	b2db      	uxtb	r3, r3
 800608a:	73fb      	strb	r3, [r7, #15]
 800608c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006090:	2b07      	cmp	r3, #7
 8006092:	dde5      	ble.n	8006060 <wizchip_init+0xa0>
#endif
		}
#endif
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8006094:	2300      	movs	r3, #0
 8006096:	73fb      	strb	r3, [r7, #15]
 8006098:	e015      	b.n	80060c6 <wizchip_init+0x106>
#if _WIZCHIP_ < W5200	// add condition for w5100
			j = 0;
			while((rxsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_RXBUF_SIZE(i, j);
#else
			setSn_RXBUF_SIZE(i, rxsize[i]);
 800609a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800609e:	009b      	lsls	r3, r3, #2
 80060a0:	3301      	adds	r3, #1
 80060a2:	00db      	lsls	r3, r3, #3
 80060a4:	f503 53f0 	add.w	r3, r3, #7680	@ 0x1e00
 80060a8:	4618      	mov	r0, r3
 80060aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80060ae:	683a      	ldr	r2, [r7, #0]
 80060b0:	4413      	add	r3, r2
 80060b2:	781b      	ldrb	r3, [r3, #0]
 80060b4:	4619      	mov	r1, r3
 80060b6:	f7fe fe3d 	bl	8004d34 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80060ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80060be:	b2db      	uxtb	r3, r3
 80060c0:	3301      	adds	r3, #1
 80060c2:	b2db      	uxtb	r3, r3
 80060c4:	73fb      	strb	r3, [r7, #15]
 80060c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80060ca:	2b07      	cmp	r3, #7
 80060cc:	dde5      	ble.n	800609a <wizchip_init+0xda>
#endif
		}
   }
   return 0;
 80060ce:	2300      	movs	r3, #0
}
 80060d0:	4618      	mov	r0, r3
 80060d2:	3710      	adds	r7, #16
 80060d4:	46bd      	mov	sp, r7
 80060d6:	bd80      	pop	{r7, pc}

080060d8 <wizchip_clrinterrupt>:

void wizchip_clrinterrupt(intr_kind intr)
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b084      	sub	sp, #16
 80060dc:	af00      	add	r7, sp, #0
 80060de:	4603      	mov	r3, r0
 80060e0:	80fb      	strh	r3, [r7, #6]
   uint8_t ir  = (uint8_t)intr;
 80060e2:	88fb      	ldrh	r3, [r7, #6]
 80060e4:	73fb      	strb	r3, [r7, #15]
   uint8_t sir = (uint8_t)((uint16_t)intr >> 8);
 80060e6:	88fb      	ldrh	r3, [r7, #6]
 80060e8:	0a1b      	lsrs	r3, r3, #8
 80060ea:	b29b      	uxth	r3, r3
 80060ec:	73bb      	strb	r3, [r7, #14]
   setIR(ir);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIR( ((((uint16_t)ir) << 8) | (((uint16_t)sir) & 0x00FF)) );
#else
   setIR(ir);
 80060ee:	7bfb      	ldrb	r3, [r7, #15]
 80060f0:	f023 030f 	bic.w	r3, r3, #15
 80060f4:	b2db      	uxtb	r3, r3
 80060f6:	4619      	mov	r1, r3
 80060f8:	f44f 50a8 	mov.w	r0, #5376	@ 0x1500
 80060fc:	f7fe fe1a 	bl	8004d34 <WIZCHIP_WRITE>
//M20200227 : For clear
   //setSIR(sir);
   for(ir=0; ir<8; ir++){
 8006100:	2300      	movs	r3, #0
 8006102:	73fb      	strb	r3, [r7, #15]
 8006104:	e014      	b.n	8006130 <wizchip_clrinterrupt+0x58>
       if(sir & (0x01 <<ir) ) setSn_IR(ir, 0xff);
 8006106:	7bba      	ldrb	r2, [r7, #14]
 8006108:	7bfb      	ldrb	r3, [r7, #15]
 800610a:	fa42 f303 	asr.w	r3, r2, r3
 800610e:	f003 0301 	and.w	r3, r3, #1
 8006112:	2b00      	cmp	r3, #0
 8006114:	d009      	beq.n	800612a <wizchip_clrinterrupt+0x52>
 8006116:	7bfb      	ldrb	r3, [r7, #15]
 8006118:	009b      	lsls	r3, r3, #2
 800611a:	3301      	adds	r3, #1
 800611c:	00db      	lsls	r3, r3, #3
 800611e:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8006122:	211f      	movs	r1, #31
 8006124:	4618      	mov	r0, r3
 8006126:	f7fe fe05 	bl	8004d34 <WIZCHIP_WRITE>
   for(ir=0; ir<8; ir++){
 800612a:	7bfb      	ldrb	r3, [r7, #15]
 800612c:	3301      	adds	r3, #1
 800612e:	73fb      	strb	r3, [r7, #15]
 8006130:	7bfb      	ldrb	r3, [r7, #15]
 8006132:	2b07      	cmp	r3, #7
 8006134:	d9e7      	bls.n	8006106 <wizchip_clrinterrupt+0x2e>
   }

#endif   
}
 8006136:	bf00      	nop
 8006138:	bf00      	nop
 800613a:	3710      	adds	r7, #16
 800613c:	46bd      	mov	sp, r7
 800613e:	bd80      	pop	{r7, pc}

08006140 <wizchip_getinterrupt>:

intr_kind wizchip_getinterrupt(void)
{
 8006140:	b580      	push	{r7, lr}
 8006142:	b082      	sub	sp, #8
 8006144:	af00      	add	r7, sp, #0
   uint8_t ir  = 0;
 8006146:	2300      	movs	r3, #0
 8006148:	71fb      	strb	r3, [r7, #7]
   uint8_t sir = 0;
 800614a:	2300      	movs	r3, #0
 800614c:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 800614e:	2300      	movs	r3, #0
 8006150:	80bb      	strh	r3, [r7, #4]
#elif _WIZCHIP_  == W5300
   ret = getIR();
   ir = (uint8_t)(ret >> 8);
   sir = (uint8_t)ret;
#else
   ir  = getIR();
 8006152:	f44f 50a8 	mov.w	r0, #5376	@ 0x1500
 8006156:	f7fe fda1 	bl	8004c9c <WIZCHIP_READ>
 800615a:	4603      	mov	r3, r0
 800615c:	f023 030f 	bic.w	r3, r3, #15
 8006160:	71fb      	strb	r3, [r7, #7]
   sir = getSIR();
 8006162:	f44f 50b8 	mov.w	r0, #5888	@ 0x1700
 8006166:	f7fe fd99 	bl	8004c9c <WIZCHIP_READ>
 800616a:	4603      	mov	r3, r0
 800616c:	71bb      	strb	r3, [r7, #6]
   ir &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   ir &= ~(1 << 6);
#endif
  ret = sir;
 800616e:	79bb      	ldrb	r3, [r7, #6]
 8006170:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + ir;
 8006172:	88bb      	ldrh	r3, [r7, #4]
 8006174:	021b      	lsls	r3, r3, #8
 8006176:	b29a      	uxth	r2, r3
 8006178:	79fb      	ldrb	r3, [r7, #7]
 800617a:	b29b      	uxth	r3, r3
 800617c:	4413      	add	r3, r2
 800617e:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 8006180:	88bb      	ldrh	r3, [r7, #4]
}
 8006182:	4618      	mov	r0, r3
 8006184:	3708      	adds	r7, #8
 8006186:	46bd      	mov	sp, r7
 8006188:	bd80      	pop	{r7, pc}

0800618a <wizchip_setinterruptmask>:

void wizchip_setinterruptmask(intr_kind intr)
{
 800618a:	b580      	push	{r7, lr}
 800618c:	b084      	sub	sp, #16
 800618e:	af00      	add	r7, sp, #0
 8006190:	4603      	mov	r3, r0
 8006192:	80fb      	strh	r3, [r7, #6]
   uint8_t imr  = (uint8_t)intr;
 8006194:	88fb      	ldrh	r3, [r7, #6]
 8006196:	73fb      	strb	r3, [r7, #15]
   uint8_t simr = (uint8_t)((uint16_t)intr >> 8);
 8006198:	88fb      	ldrh	r3, [r7, #6]
 800619a:	0a1b      	lsrs	r3, r3, #8
 800619c:	b29b      	uxth	r3, r3
 800619e:	73bb      	strb	r3, [r7, #14]
   setIMR(imr);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIMR( ((((uint16_t)imr) << 8) | (((uint16_t)simr) & 0x00FF)) );
#else
   setIMR(imr);
 80061a0:	7bfb      	ldrb	r3, [r7, #15]
 80061a2:	4619      	mov	r1, r3
 80061a4:	f44f 50b0 	mov.w	r0, #5632	@ 0x1600
 80061a8:	f7fe fdc4 	bl	8004d34 <WIZCHIP_WRITE>
   setSIMR(simr);
 80061ac:	7bbb      	ldrb	r3, [r7, #14]
 80061ae:	4619      	mov	r1, r3
 80061b0:	f44f 50c0 	mov.w	r0, #6144	@ 0x1800
 80061b4:	f7fe fdbe 	bl	8004d34 <WIZCHIP_WRITE>
#endif   
}
 80061b8:	bf00      	nop
 80061ba:	3710      	adds	r7, #16
 80061bc:	46bd      	mov	sp, r7
 80061be:	bd80      	pop	{r7, pc}

080061c0 <wizchip_getinterruptmask>:

intr_kind wizchip_getinterruptmask(void)
{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b082      	sub	sp, #8
 80061c4:	af00      	add	r7, sp, #0
   uint8_t imr  = 0;
 80061c6:	2300      	movs	r3, #0
 80061c8:	71fb      	strb	r3, [r7, #7]
   uint8_t simr = 0;
 80061ca:	2300      	movs	r3, #0
 80061cc:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 80061ce:	2300      	movs	r3, #0
 80061d0:	80bb      	strh	r3, [r7, #4]
#elif _WIZCHIP_ == W5300
   ret = getIMR();
   imr = (uint8_t)(ret >> 8);
   simr = (uint8_t)ret;
#else
   imr  = getIMR();
 80061d2:	f44f 50b0 	mov.w	r0, #5632	@ 0x1600
 80061d6:	f7fe fd61 	bl	8004c9c <WIZCHIP_READ>
 80061da:	4603      	mov	r3, r0
 80061dc:	71fb      	strb	r3, [r7, #7]
   simr = getSIMR();
 80061de:	f44f 50c0 	mov.w	r0, #6144	@ 0x1800
 80061e2:	f7fe fd5b 	bl	8004c9c <WIZCHIP_READ>
 80061e6:	4603      	mov	r3, r0
 80061e8:	71bb      	strb	r3, [r7, #6]
   imr &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   imr &= ~(1 << 6);  // IK_DEST_UNREACH
#endif
  ret = simr;
 80061ea:	79bb      	ldrb	r3, [r7, #6]
 80061ec:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + imr;
 80061ee:	88bb      	ldrh	r3, [r7, #4]
 80061f0:	021b      	lsls	r3, r3, #8
 80061f2:	b29a      	uxth	r2, r3
 80061f4:	79fb      	ldrb	r3, [r7, #7]
 80061f6:	b29b      	uxth	r3, r3
 80061f8:	4413      	add	r3, r2
 80061fa:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 80061fc:	88bb      	ldrh	r3, [r7, #4]
}
 80061fe:	4618      	mov	r0, r3
 8006200:	3708      	adds	r7, #8
 8006202:	46bd      	mov	sp, r7
 8006204:	bd80      	pop	{r7, pc}

08006206 <wizphy_getphylink>:

int8_t wizphy_getphylink(void)
{
 8006206:	b580      	push	{r7, lr}
 8006208:	b082      	sub	sp, #8
 800620a:	af00      	add	r7, sp, #0
   int8_t tmp = PHY_LINK_OFF;
 800620c:	2300      	movs	r3, #0
 800620e:	71fb      	strb	r3, [r7, #7]
	   tmp = PHY_LINK_ON;
#elif   _WIZCHIP_ == W5200
   if(getPHYSTATUS() & PHYSTATUS_LINK)
      tmp = PHY_LINK_ON;
#elif _WIZCHIP_ == W5500
   if(getPHYCFGR() & PHYCFGR_LNK_ON)
 8006210:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8006214:	f7fe fd42 	bl	8004c9c <WIZCHIP_READ>
 8006218:	4603      	mov	r3, r0
 800621a:	f003 0301 	and.w	r3, r3, #1
 800621e:	2b00      	cmp	r3, #0
 8006220:	d001      	beq.n	8006226 <wizphy_getphylink+0x20>
      tmp = PHY_LINK_ON;
 8006222:	2301      	movs	r3, #1
 8006224:	71fb      	strb	r3, [r7, #7]

#else
   tmp = -1;
#endif
   return tmp;
 8006226:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 800622a:	4618      	mov	r0, r3
 800622c:	3708      	adds	r7, #8
 800622e:	46bd      	mov	sp, r7
 8006230:	bd80      	pop	{r7, pc}

08006232 <wizphy_getphypmode>:

#if _WIZCHIP_ > W5100

int8_t wizphy_getphypmode(void)
{
 8006232:	b580      	push	{r7, lr}
 8006234:	b082      	sub	sp, #8
 8006236:	af00      	add	r7, sp, #0
   int8_t tmp = 0;
 8006238:	2300      	movs	r3, #0
 800623a:	71fb      	strb	r3, [r7, #7]
      if(getPHYSTATUS() & PHYSTATUS_POWERDOWN)
         tmp = PHY_POWER_DOWN;
      else          
         tmp = PHY_POWER_NORM;
   #elif _WIZCHIP_ == 5500
      if((getPHYCFGR() & PHYCFGR_OPMDC_ALLA) == PHYCFGR_OPMDC_PDOWN)
 800623c:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8006240:	f7fe fd2c 	bl	8004c9c <WIZCHIP_READ>
 8006244:	4603      	mov	r3, r0
 8006246:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800624a:	2b30      	cmp	r3, #48	@ 0x30
 800624c:	d102      	bne.n	8006254 <wizphy_getphypmode+0x22>
         tmp = PHY_POWER_DOWN;
 800624e:	2301      	movs	r3, #1
 8006250:	71fb      	strb	r3, [r7, #7]
 8006252:	e001      	b.n	8006258 <wizphy_getphypmode+0x26>
      else 
         tmp = PHY_POWER_NORM;
 8006254:	2300      	movs	r3, #0
 8006256:	71fb      	strb	r3, [r7, #7]
   #else
      tmp = -1;
   #endif
   return tmp;
 8006258:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 800625c:	4618      	mov	r0, r3
 800625e:	3708      	adds	r7, #8
 8006260:	46bd      	mov	sp, r7
 8006262:	bd80      	pop	{r7, pc}

08006264 <wizphy_reset>:
}

#endif
#if _WIZCHIP_ == W5500
void wizphy_reset(void)
{
 8006264:	b580      	push	{r7, lr}
 8006266:	b082      	sub	sp, #8
 8006268:	af00      	add	r7, sp, #0
   uint8_t tmp = getPHYCFGR();
 800626a:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 800626e:	f7fe fd15 	bl	8004c9c <WIZCHIP_READ>
 8006272:	4603      	mov	r3, r0
 8006274:	71fb      	strb	r3, [r7, #7]
   tmp &= PHYCFGR_RST;
 8006276:	79fb      	ldrb	r3, [r7, #7]
 8006278:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800627c:	71fb      	strb	r3, [r7, #7]
   setPHYCFGR(tmp);
 800627e:	79fb      	ldrb	r3, [r7, #7]
 8006280:	4619      	mov	r1, r3
 8006282:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8006286:	f7fe fd55 	bl	8004d34 <WIZCHIP_WRITE>
   tmp = getPHYCFGR();
 800628a:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 800628e:	f7fe fd05 	bl	8004c9c <WIZCHIP_READ>
 8006292:	4603      	mov	r3, r0
 8006294:	71fb      	strb	r3, [r7, #7]
   tmp |= ~PHYCFGR_RST;
 8006296:	79fb      	ldrb	r3, [r7, #7]
 8006298:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800629c:	71fb      	strb	r3, [r7, #7]
   setPHYCFGR(tmp);
 800629e:	79fb      	ldrb	r3, [r7, #7]
 80062a0:	4619      	mov	r1, r3
 80062a2:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 80062a6:	f7fe fd45 	bl	8004d34 <WIZCHIP_WRITE>
}
 80062aa:	bf00      	nop
 80062ac:	3708      	adds	r7, #8
 80062ae:	46bd      	mov	sp, r7
 80062b0:	bd80      	pop	{r7, pc}

080062b2 <wizphy_setphyconf>:

void wizphy_setphyconf(wiz_PhyConf* phyconf)
{
 80062b2:	b580      	push	{r7, lr}
 80062b4:	b084      	sub	sp, #16
 80062b6:	af00      	add	r7, sp, #0
 80062b8:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 80062ba:	2300      	movs	r3, #0
 80062bc:	73fb      	strb	r3, [r7, #15]
   if(phyconf->by == PHY_CONFBY_SW)
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	781b      	ldrb	r3, [r3, #0]
 80062c2:	2b01      	cmp	r3, #1
 80062c4:	d104      	bne.n	80062d0 <wizphy_setphyconf+0x1e>
      tmp |= PHYCFGR_OPMD;
 80062c6:	7bfb      	ldrb	r3, [r7, #15]
 80062c8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80062cc:	73fb      	strb	r3, [r7, #15]
 80062ce:	e003      	b.n	80062d8 <wizphy_setphyconf+0x26>
   else
      tmp &= ~PHYCFGR_OPMD;
 80062d0:	7bfb      	ldrb	r3, [r7, #15]
 80062d2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80062d6:	73fb      	strb	r3, [r7, #15]
   if(phyconf->mode == PHY_MODE_AUTONEGO)
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	785b      	ldrb	r3, [r3, #1]
 80062dc:	2b01      	cmp	r3, #1
 80062de:	d104      	bne.n	80062ea <wizphy_setphyconf+0x38>
      tmp |= PHYCFGR_OPMDC_ALLA;
 80062e0:	7bfb      	ldrb	r3, [r7, #15]
 80062e2:	f043 0338 	orr.w	r3, r3, #56	@ 0x38
 80062e6:	73fb      	strb	r3, [r7, #15]
 80062e8:	e019      	b.n	800631e <wizphy_setphyconf+0x6c>
   else
   {
      if(phyconf->duplex == PHY_DUPLEX_FULL)
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	78db      	ldrb	r3, [r3, #3]
 80062ee:	2b01      	cmp	r3, #1
 80062f0:	d10d      	bne.n	800630e <wizphy_setphyconf+0x5c>
      {
         if(phyconf->speed == PHY_SPEED_100)
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	789b      	ldrb	r3, [r3, #2]
 80062f6:	2b01      	cmp	r3, #1
 80062f8:	d104      	bne.n	8006304 <wizphy_setphyconf+0x52>
            tmp |= PHYCFGR_OPMDC_100F;
 80062fa:	7bfb      	ldrb	r3, [r7, #15]
 80062fc:	f043 0318 	orr.w	r3, r3, #24
 8006300:	73fb      	strb	r3, [r7, #15]
 8006302:	e00c      	b.n	800631e <wizphy_setphyconf+0x6c>
         else
            tmp |= PHYCFGR_OPMDC_10F;
 8006304:	7bfb      	ldrb	r3, [r7, #15]
 8006306:	f043 0308 	orr.w	r3, r3, #8
 800630a:	73fb      	strb	r3, [r7, #15]
 800630c:	e007      	b.n	800631e <wizphy_setphyconf+0x6c>
      }   
      else
      {
         if(phyconf->speed == PHY_SPEED_100)
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	789b      	ldrb	r3, [r3, #2]
 8006312:	2b01      	cmp	r3, #1
 8006314:	d103      	bne.n	800631e <wizphy_setphyconf+0x6c>
            tmp |= PHYCFGR_OPMDC_100H;
 8006316:	7bfb      	ldrb	r3, [r7, #15]
 8006318:	f043 0310 	orr.w	r3, r3, #16
 800631c:	73fb      	strb	r3, [r7, #15]
         else
            tmp |= PHYCFGR_OPMDC_10H;
      }
   }
   setPHYCFGR(tmp);
 800631e:	7bfb      	ldrb	r3, [r7, #15]
 8006320:	4619      	mov	r1, r3
 8006322:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8006326:	f7fe fd05 	bl	8004d34 <WIZCHIP_WRITE>
   wizphy_reset();
 800632a:	f7ff ff9b 	bl	8006264 <wizphy_reset>
}
 800632e:	bf00      	nop
 8006330:	3710      	adds	r7, #16
 8006332:	46bd      	mov	sp, r7
 8006334:	bd80      	pop	{r7, pc}
	...

08006338 <wizphy_getphyconf>:

void wizphy_getphyconf(wiz_PhyConf* phyconf)
{
 8006338:	b580      	push	{r7, lr}
 800633a:	b084      	sub	sp, #16
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 8006340:	2300      	movs	r3, #0
 8006342:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYCFGR();
 8006344:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8006348:	f7fe fca8 	bl	8004c9c <WIZCHIP_READ>
 800634c:	4603      	mov	r3, r0
 800634e:	73fb      	strb	r3, [r7, #15]
   phyconf->by   = (tmp & PHYCFGR_OPMD) ? PHY_CONFBY_SW : PHY_CONFBY_HW;
 8006350:	7bfb      	ldrb	r3, [r7, #15]
 8006352:	119b      	asrs	r3, r3, #6
 8006354:	b2db      	uxtb	r3, r3
 8006356:	f003 0301 	and.w	r3, r3, #1
 800635a:	b2da      	uxtb	r2, r3
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	701a      	strb	r2, [r3, #0]
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 8006360:	7bfb      	ldrb	r3, [r7, #15]
 8006362:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006366:	2b20      	cmp	r3, #32
 8006368:	d001      	beq.n	800636e <wizphy_getphyconf+0x36>
 800636a:	2b38      	cmp	r3, #56	@ 0x38
 800636c:	d103      	bne.n	8006376 <wizphy_getphyconf+0x3e>
   {
      case PHYCFGR_OPMDC_ALLA:
      case PHYCFGR_OPMDC_100FA: 
         phyconf->mode = PHY_MODE_AUTONEGO;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	2201      	movs	r2, #1
 8006372:	705a      	strb	r2, [r3, #1]
         break;
 8006374:	e003      	b.n	800637e <wizphy_getphyconf+0x46>
      default:
         phyconf->mode = PHY_MODE_MANUAL;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	2200      	movs	r2, #0
 800637a:	705a      	strb	r2, [r3, #1]
         break;
 800637c:	bf00      	nop
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 800637e:	7bfb      	ldrb	r3, [r7, #15]
 8006380:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006384:	3b10      	subs	r3, #16
 8006386:	2b10      	cmp	r3, #16
 8006388:	bf8c      	ite	hi
 800638a:	2201      	movhi	r2, #1
 800638c:	2200      	movls	r2, #0
 800638e:	b2d2      	uxtb	r2, r2
 8006390:	2a00      	cmp	r2, #0
 8006392:	d10f      	bne.n	80063b4 <wizphy_getphyconf+0x7c>
 8006394:	4a1b      	ldr	r2, [pc, #108]	@ (8006404 <wizphy_getphyconf+0xcc>)
 8006396:	fa22 f303 	lsr.w	r3, r2, r3
 800639a:	f003 0301 	and.w	r3, r3, #1
 800639e:	2b00      	cmp	r3, #0
 80063a0:	bf14      	ite	ne
 80063a2:	2301      	movne	r3, #1
 80063a4:	2300      	moveq	r3, #0
 80063a6:	b2db      	uxtb	r3, r3
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d003      	beq.n	80063b4 <wizphy_getphyconf+0x7c>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_100H:
         phyconf->speed = PHY_SPEED_100;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2201      	movs	r2, #1
 80063b0:	709a      	strb	r2, [r3, #2]
         break;
 80063b2:	e003      	b.n	80063bc <wizphy_getphyconf+0x84>
      default:
         phyconf->speed = PHY_SPEED_10;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2200      	movs	r2, #0
 80063b8:	709a      	strb	r2, [r3, #2]
         break;
 80063ba:	bf00      	nop
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 80063bc:	7bfb      	ldrb	r3, [r7, #15]
 80063be:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80063c2:	3b08      	subs	r3, #8
 80063c4:	2b18      	cmp	r3, #24
 80063c6:	bf8c      	ite	hi
 80063c8:	2201      	movhi	r2, #1
 80063ca:	2200      	movls	r2, #0
 80063cc:	b2d2      	uxtb	r2, r2
 80063ce:	2a00      	cmp	r2, #0
 80063d0:	d10f      	bne.n	80063f2 <wizphy_getphyconf+0xba>
 80063d2:	4a0d      	ldr	r2, [pc, #52]	@ (8006408 <wizphy_getphyconf+0xd0>)
 80063d4:	fa22 f303 	lsr.w	r3, r2, r3
 80063d8:	f003 0301 	and.w	r3, r3, #1
 80063dc:	2b00      	cmp	r3, #0
 80063de:	bf14      	ite	ne
 80063e0:	2301      	movne	r3, #1
 80063e2:	2300      	moveq	r3, #0
 80063e4:	b2db      	uxtb	r3, r3
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d003      	beq.n	80063f2 <wizphy_getphyconf+0xba>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_10F:
         phyconf->duplex = PHY_DUPLEX_FULL;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	2201      	movs	r2, #1
 80063ee:	70da      	strb	r2, [r3, #3]
         break;
 80063f0:	e003      	b.n	80063fa <wizphy_getphyconf+0xc2>
      default:
         phyconf->duplex = PHY_DUPLEX_HALF;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	2200      	movs	r2, #0
 80063f6:	70da      	strb	r2, [r3, #3]
         break;
 80063f8:	bf00      	nop
   }
}
 80063fa:	bf00      	nop
 80063fc:	3710      	adds	r7, #16
 80063fe:	46bd      	mov	sp, r7
 8006400:	bd80      	pop	{r7, pc}
 8006402:	bf00      	nop
 8006404:	00010101 	.word	0x00010101
 8006408:	01010001 	.word	0x01010001

0800640c <wizphy_setphypmode>:
   phyconf->duplex = (tmp & PHYCFGR_DPX_FULL) ? PHY_DUPLEX_FULL : PHY_DUPLEX_HALF;
   phyconf->speed  = (tmp & PHYCFGR_SPD_100) ? PHY_SPEED_100 : PHY_SPEED_10;
}

int8_t wizphy_setphypmode(uint8_t pmode)
{
 800640c:	b580      	push	{r7, lr}
 800640e:	b084      	sub	sp, #16
 8006410:	af00      	add	r7, sp, #0
 8006412:	4603      	mov	r3, r0
 8006414:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = 0;
 8006416:	2300      	movs	r3, #0
 8006418:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYCFGR();
 800641a:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 800641e:	f7fe fc3d 	bl	8004c9c <WIZCHIP_READ>
 8006422:	4603      	mov	r3, r0
 8006424:	73fb      	strb	r3, [r7, #15]
   if((tmp & PHYCFGR_OPMD)== 0) return -1;
 8006426:	7bfb      	ldrb	r3, [r7, #15]
 8006428:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800642c:	2b00      	cmp	r3, #0
 800642e:	d102      	bne.n	8006436 <wizphy_setphypmode+0x2a>
 8006430:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006434:	e030      	b.n	8006498 <wizphy_setphypmode+0x8c>
   tmp &= ~PHYCFGR_OPMDC_ALLA;         
 8006436:	7bfb      	ldrb	r3, [r7, #15]
 8006438:	f023 0338 	bic.w	r3, r3, #56	@ 0x38
 800643c:	73fb      	strb	r3, [r7, #15]
   if( pmode == PHY_POWER_DOWN)
 800643e:	79fb      	ldrb	r3, [r7, #7]
 8006440:	2b01      	cmp	r3, #1
 8006442:	d104      	bne.n	800644e <wizphy_setphypmode+0x42>
      tmp |= PHYCFGR_OPMDC_PDOWN;
 8006444:	7bfb      	ldrb	r3, [r7, #15]
 8006446:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 800644a:	73fb      	strb	r3, [r7, #15]
 800644c:	e003      	b.n	8006456 <wizphy_setphypmode+0x4a>
   else
      tmp |= PHYCFGR_OPMDC_ALLA;
 800644e:	7bfb      	ldrb	r3, [r7, #15]
 8006450:	f043 0338 	orr.w	r3, r3, #56	@ 0x38
 8006454:	73fb      	strb	r3, [r7, #15]
   setPHYCFGR(tmp);
 8006456:	7bfb      	ldrb	r3, [r7, #15]
 8006458:	4619      	mov	r1, r3
 800645a:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 800645e:	f7fe fc69 	bl	8004d34 <WIZCHIP_WRITE>
   wizphy_reset();
 8006462:	f7ff feff 	bl	8006264 <wizphy_reset>
   tmp = getPHYCFGR();
 8006466:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 800646a:	f7fe fc17 	bl	8004c9c <WIZCHIP_READ>
 800646e:	4603      	mov	r3, r0
 8006470:	73fb      	strb	r3, [r7, #15]
   if( pmode == PHY_POWER_DOWN)
 8006472:	79fb      	ldrb	r3, [r7, #7]
 8006474:	2b01      	cmp	r3, #1
 8006476:	d106      	bne.n	8006486 <wizphy_setphypmode+0x7a>
   {
      if(tmp & PHYCFGR_OPMDC_PDOWN) return 0;
 8006478:	7bfb      	ldrb	r3, [r7, #15]
 800647a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800647e:	2b00      	cmp	r3, #0
 8006480:	d008      	beq.n	8006494 <wizphy_setphypmode+0x88>
 8006482:	2300      	movs	r3, #0
 8006484:	e008      	b.n	8006498 <wizphy_setphypmode+0x8c>
   }
   else
   {
      if(tmp & PHYCFGR_OPMDC_ALLA) return 0;
 8006486:	7bfb      	ldrb	r3, [r7, #15]
 8006488:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800648c:	2b00      	cmp	r3, #0
 800648e:	d001      	beq.n	8006494 <wizphy_setphypmode+0x88>
 8006490:	2300      	movs	r3, #0
 8006492:	e001      	b.n	8006498 <wizphy_setphypmode+0x8c>
   }
   return -1;
 8006494:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8006498:	4618      	mov	r0, r3
 800649a:	3710      	adds	r7, #16
 800649c:	46bd      	mov	sp, r7
 800649e:	bd80      	pop	{r7, pc}

080064a0 <wizchip_setnetinfo>:
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 80064a0:	b580      	push	{r7, lr}
 80064a2:	b082      	sub	sp, #8
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
   setSHAR(pnetinfo->mac);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2206      	movs	r2, #6
 80064ac:	4619      	mov	r1, r3
 80064ae:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 80064b2:	f7fe fced 	bl	8004e90 <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	330e      	adds	r3, #14
 80064ba:	2204      	movs	r2, #4
 80064bc:	4619      	mov	r1, r3
 80064be:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80064c2:	f7fe fce5 	bl	8004e90 <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	330a      	adds	r3, #10
 80064ca:	2204      	movs	r2, #4
 80064cc:	4619      	mov	r1, r3
 80064ce:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 80064d2:	f7fe fcdd 	bl	8004e90 <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	3306      	adds	r3, #6
 80064da:	2204      	movs	r2, #4
 80064dc:	4619      	mov	r1, r3
 80064de:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 80064e2:	f7fe fcd5 	bl	8004e90 <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	7c9a      	ldrb	r2, [r3, #18]
 80064ea:	4b0b      	ldr	r3, [pc, #44]	@ (8006518 <wizchip_setnetinfo+0x78>)
 80064ec:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	7cda      	ldrb	r2, [r3, #19]
 80064f2:	4b09      	ldr	r3, [pc, #36]	@ (8006518 <wizchip_setnetinfo+0x78>)
 80064f4:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	7d1a      	ldrb	r2, [r3, #20]
 80064fa:	4b07      	ldr	r3, [pc, #28]	@ (8006518 <wizchip_setnetinfo+0x78>)
 80064fc:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	7d5a      	ldrb	r2, [r3, #21]
 8006502:	4b05      	ldr	r3, [pc, #20]	@ (8006518 <wizchip_setnetinfo+0x78>)
 8006504:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	7d9a      	ldrb	r2, [r3, #22]
 800650a:	4b04      	ldr	r3, [pc, #16]	@ (800651c <wizchip_setnetinfo+0x7c>)
 800650c:	701a      	strb	r2, [r3, #0]
}
 800650e:	bf00      	nop
 8006510:	3708      	adds	r7, #8
 8006512:	46bd      	mov	sp, r7
 8006514:	bd80      	pop	{r7, pc}
 8006516:	bf00      	nop
 8006518:	20000a18 	.word	0x20000a18
 800651c:	20000a1c 	.word	0x20000a1c

08006520 <wizchip_getnetinfo>:

void wizchip_getnetinfo(wiz_NetInfo* pnetinfo)
{
 8006520:	b580      	push	{r7, lr}
 8006522:	b082      	sub	sp, #8
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]
   getSHAR(pnetinfo->mac);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2206      	movs	r2, #6
 800652c:	4619      	mov	r1, r3
 800652e:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 8006532:	f7fe fc4d 	bl	8004dd0 <WIZCHIP_READ_BUF>
   getGAR(pnetinfo->gw);
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	330e      	adds	r3, #14
 800653a:	2204      	movs	r2, #4
 800653c:	4619      	mov	r1, r3
 800653e:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8006542:	f7fe fc45 	bl	8004dd0 <WIZCHIP_READ_BUF>
   getSUBR(pnetinfo->sn);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	330a      	adds	r3, #10
 800654a:	2204      	movs	r2, #4
 800654c:	4619      	mov	r1, r3
 800654e:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 8006552:	f7fe fc3d 	bl	8004dd0 <WIZCHIP_READ_BUF>
   getSIPR(pnetinfo->ip);
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	3306      	adds	r3, #6
 800655a:	2204      	movs	r2, #4
 800655c:	4619      	mov	r1, r3
 800655e:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 8006562:	f7fe fc35 	bl	8004dd0 <WIZCHIP_READ_BUF>
   pnetinfo->dns[0]= _DNS_[0];
 8006566:	4b0c      	ldr	r3, [pc, #48]	@ (8006598 <wizchip_getnetinfo+0x78>)
 8006568:	781a      	ldrb	r2, [r3, #0]
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	749a      	strb	r2, [r3, #18]
   pnetinfo->dns[1]= _DNS_[1];
 800656e:	4b0a      	ldr	r3, [pc, #40]	@ (8006598 <wizchip_getnetinfo+0x78>)
 8006570:	785a      	ldrb	r2, [r3, #1]
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	74da      	strb	r2, [r3, #19]
   pnetinfo->dns[2]= _DNS_[2];
 8006576:	4b08      	ldr	r3, [pc, #32]	@ (8006598 <wizchip_getnetinfo+0x78>)
 8006578:	789a      	ldrb	r2, [r3, #2]
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	751a      	strb	r2, [r3, #20]
   pnetinfo->dns[3]= _DNS_[3];
 800657e:	4b06      	ldr	r3, [pc, #24]	@ (8006598 <wizchip_getnetinfo+0x78>)
 8006580:	78da      	ldrb	r2, [r3, #3]
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	755a      	strb	r2, [r3, #21]
   pnetinfo->dhcp  = _DHCP_;
 8006586:	4b05      	ldr	r3, [pc, #20]	@ (800659c <wizchip_getnetinfo+0x7c>)
 8006588:	781a      	ldrb	r2, [r3, #0]
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	759a      	strb	r2, [r3, #22]
}
 800658e:	bf00      	nop
 8006590:	3708      	adds	r7, #8
 8006592:	46bd      	mov	sp, r7
 8006594:	bd80      	pop	{r7, pc}
 8006596:	bf00      	nop
 8006598:	20000a18 	.word	0x20000a18
 800659c:	20000a1c 	.word	0x20000a1c

080065a0 <wizchip_setnetmode>:

int8_t wizchip_setnetmode(netmode_type netmode)
{
 80065a0:	b580      	push	{r7, lr}
 80065a2:	b084      	sub	sp, #16
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	4603      	mov	r3, r0
 80065a8:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = 0;
 80065aa:	2300      	movs	r3, #0
 80065ac:	73fb      	strb	r3, [r7, #15]
#if _WIZCHIP_ != W5500
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK)) return -1;
#else
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK | NM_FORCEARP)) return -1;
 80065ae:	79fb      	ldrb	r3, [r7, #7]
 80065b0:	f023 033a 	bic.w	r3, r3, #58	@ 0x3a
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d002      	beq.n	80065be <wizchip_setnetmode+0x1e>
 80065b8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80065bc:	e00e      	b.n	80065dc <wizchip_setnetmode+0x3c>
#endif      
   tmp = getMR();
 80065be:	2000      	movs	r0, #0
 80065c0:	f7fe fb6c 	bl	8004c9c <WIZCHIP_READ>
 80065c4:	4603      	mov	r3, r0
 80065c6:	73fb      	strb	r3, [r7, #15]
   tmp |= (uint8_t)netmode;
 80065c8:	7bfa      	ldrb	r2, [r7, #15]
 80065ca:	79fb      	ldrb	r3, [r7, #7]
 80065cc:	4313      	orrs	r3, r2
 80065ce:	73fb      	strb	r3, [r7, #15]
   setMR(tmp);
 80065d0:	7bfb      	ldrb	r3, [r7, #15]
 80065d2:	4619      	mov	r1, r3
 80065d4:	2000      	movs	r0, #0
 80065d6:	f7fe fbad 	bl	8004d34 <WIZCHIP_WRITE>
   return 0;
 80065da:	2300      	movs	r3, #0
}
 80065dc:	4618      	mov	r0, r3
 80065de:	3710      	adds	r7, #16
 80065e0:	46bd      	mov	sp, r7
 80065e2:	bd80      	pop	{r7, pc}

080065e4 <wizchip_getnetmode>:

netmode_type wizchip_getnetmode(void)
{
 80065e4:	b580      	push	{r7, lr}
 80065e6:	af00      	add	r7, sp, #0
   return (netmode_type) getMR();
 80065e8:	2000      	movs	r0, #0
 80065ea:	f7fe fb57 	bl	8004c9c <WIZCHIP_READ>
 80065ee:	4603      	mov	r3, r0
}
 80065f0:	4618      	mov	r0, r3
 80065f2:	bd80      	pop	{r7, pc}

080065f4 <wizchip_settimeout>:

void wizchip_settimeout(wiz_NetTimeout* nettime)
{
 80065f4:	b580      	push	{r7, lr}
 80065f6:	b082      	sub	sp, #8
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
   setRCR(nettime->retry_cnt);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	781b      	ldrb	r3, [r3, #0]
 8006600:	4619      	mov	r1, r3
 8006602:	f44f 50d8 	mov.w	r0, #6912	@ 0x1b00
 8006606:	f7fe fb95 	bl	8004d34 <WIZCHIP_WRITE>
   setRTR(nettime->time_100us);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	885b      	ldrh	r3, [r3, #2]
 800660e:	0a1b      	lsrs	r3, r3, #8
 8006610:	b29b      	uxth	r3, r3
 8006612:	b2db      	uxtb	r3, r3
 8006614:	4619      	mov	r1, r3
 8006616:	f44f 50c8 	mov.w	r0, #6400	@ 0x1900
 800661a:	f7fe fb8b 	bl	8004d34 <WIZCHIP_WRITE>
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	885b      	ldrh	r3, [r3, #2]
 8006622:	b2db      	uxtb	r3, r3
 8006624:	4619      	mov	r1, r3
 8006626:	f44f 50d0 	mov.w	r0, #6656	@ 0x1a00
 800662a:	f7fe fb83 	bl	8004d34 <WIZCHIP_WRITE>
}
 800662e:	bf00      	nop
 8006630:	3708      	adds	r7, #8
 8006632:	46bd      	mov	sp, r7
 8006634:	bd80      	pop	{r7, pc}

08006636 <wizchip_gettimeout>:

void wizchip_gettimeout(wiz_NetTimeout* nettime)
{
 8006636:	b590      	push	{r4, r7, lr}
 8006638:	b083      	sub	sp, #12
 800663a:	af00      	add	r7, sp, #0
 800663c:	6078      	str	r0, [r7, #4]
   nettime->retry_cnt = getRCR();
 800663e:	f44f 50d8 	mov.w	r0, #6912	@ 0x1b00
 8006642:	f7fe fb2b 	bl	8004c9c <WIZCHIP_READ>
 8006646:	4603      	mov	r3, r0
 8006648:	461a      	mov	r2, r3
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	701a      	strb	r2, [r3, #0]
   nettime->time_100us = getRTR();
 800664e:	f44f 50c8 	mov.w	r0, #6400	@ 0x1900
 8006652:	f7fe fb23 	bl	8004c9c <WIZCHIP_READ>
 8006656:	4603      	mov	r3, r0
 8006658:	021b      	lsls	r3, r3, #8
 800665a:	b29c      	uxth	r4, r3
 800665c:	f44f 50d0 	mov.w	r0, #6656	@ 0x1a00
 8006660:	f7fe fb1c 	bl	8004c9c <WIZCHIP_READ>
 8006664:	4603      	mov	r3, r0
 8006666:	4423      	add	r3, r4
 8006668:	b29a      	uxth	r2, r3
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	805a      	strh	r2, [r3, #2]
}
 800666e:	bf00      	nop
 8006670:	370c      	adds	r7, #12
 8006672:	46bd      	mov	sp, r7
 8006674:	bd90      	pop	{r4, r7, pc}
	...

08006678 <DHCP_time_handler>:
	dhcp_tick_next = DHCP_WAIT_TIME;
	dhcp_retry_count = 0;
}

void DHCP_time_handler(void)
{
 8006678:	b480      	push	{r7}
 800667a:	af00      	add	r7, sp, #0
	dhcp_tick_1s++;
 800667c:	4b04      	ldr	r3, [pc, #16]	@ (8006690 <DHCP_time_handler+0x18>)
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	3301      	adds	r3, #1
 8006682:	4a03      	ldr	r2, [pc, #12]	@ (8006690 <DHCP_time_handler+0x18>)
 8006684:	6013      	str	r3, [r2, #0]
}
 8006686:	bf00      	nop
 8006688:	46bd      	mov	sp, r7
 800668a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668e:	4770      	bx	lr
 8006690:	20000a20 	.word	0x20000a20

08006694 <std>:
 8006694:	2300      	movs	r3, #0
 8006696:	b510      	push	{r4, lr}
 8006698:	4604      	mov	r4, r0
 800669a:	e9c0 3300 	strd	r3, r3, [r0]
 800669e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80066a2:	6083      	str	r3, [r0, #8]
 80066a4:	8181      	strh	r1, [r0, #12]
 80066a6:	6643      	str	r3, [r0, #100]	@ 0x64
 80066a8:	81c2      	strh	r2, [r0, #14]
 80066aa:	6183      	str	r3, [r0, #24]
 80066ac:	4619      	mov	r1, r3
 80066ae:	2208      	movs	r2, #8
 80066b0:	305c      	adds	r0, #92	@ 0x5c
 80066b2:	f000 f9f9 	bl	8006aa8 <memset>
 80066b6:	4b0d      	ldr	r3, [pc, #52]	@ (80066ec <std+0x58>)
 80066b8:	6263      	str	r3, [r4, #36]	@ 0x24
 80066ba:	4b0d      	ldr	r3, [pc, #52]	@ (80066f0 <std+0x5c>)
 80066bc:	62a3      	str	r3, [r4, #40]	@ 0x28
 80066be:	4b0d      	ldr	r3, [pc, #52]	@ (80066f4 <std+0x60>)
 80066c0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80066c2:	4b0d      	ldr	r3, [pc, #52]	@ (80066f8 <std+0x64>)
 80066c4:	6323      	str	r3, [r4, #48]	@ 0x30
 80066c6:	4b0d      	ldr	r3, [pc, #52]	@ (80066fc <std+0x68>)
 80066c8:	6224      	str	r4, [r4, #32]
 80066ca:	429c      	cmp	r4, r3
 80066cc:	d006      	beq.n	80066dc <std+0x48>
 80066ce:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80066d2:	4294      	cmp	r4, r2
 80066d4:	d002      	beq.n	80066dc <std+0x48>
 80066d6:	33d0      	adds	r3, #208	@ 0xd0
 80066d8:	429c      	cmp	r4, r3
 80066da:	d105      	bne.n	80066e8 <std+0x54>
 80066dc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80066e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80066e4:	f000 ba58 	b.w	8006b98 <__retarget_lock_init_recursive>
 80066e8:	bd10      	pop	{r4, pc}
 80066ea:	bf00      	nop
 80066ec:	080068f9 	.word	0x080068f9
 80066f0:	0800691b 	.word	0x0800691b
 80066f4:	08006953 	.word	0x08006953
 80066f8:	08006977 	.word	0x08006977
 80066fc:	20000a24 	.word	0x20000a24

08006700 <stdio_exit_handler>:
 8006700:	4a02      	ldr	r2, [pc, #8]	@ (800670c <stdio_exit_handler+0xc>)
 8006702:	4903      	ldr	r1, [pc, #12]	@ (8006710 <stdio_exit_handler+0x10>)
 8006704:	4803      	ldr	r0, [pc, #12]	@ (8006714 <stdio_exit_handler+0x14>)
 8006706:	f000 b869 	b.w	80067dc <_fwalk_sglue>
 800670a:	bf00      	nop
 800670c:	20000044 	.word	0x20000044
 8006710:	08007439 	.word	0x08007439
 8006714:	20000054 	.word	0x20000054

08006718 <cleanup_stdio>:
 8006718:	6841      	ldr	r1, [r0, #4]
 800671a:	4b0c      	ldr	r3, [pc, #48]	@ (800674c <cleanup_stdio+0x34>)
 800671c:	4299      	cmp	r1, r3
 800671e:	b510      	push	{r4, lr}
 8006720:	4604      	mov	r4, r0
 8006722:	d001      	beq.n	8006728 <cleanup_stdio+0x10>
 8006724:	f000 fe88 	bl	8007438 <_fflush_r>
 8006728:	68a1      	ldr	r1, [r4, #8]
 800672a:	4b09      	ldr	r3, [pc, #36]	@ (8006750 <cleanup_stdio+0x38>)
 800672c:	4299      	cmp	r1, r3
 800672e:	d002      	beq.n	8006736 <cleanup_stdio+0x1e>
 8006730:	4620      	mov	r0, r4
 8006732:	f000 fe81 	bl	8007438 <_fflush_r>
 8006736:	68e1      	ldr	r1, [r4, #12]
 8006738:	4b06      	ldr	r3, [pc, #24]	@ (8006754 <cleanup_stdio+0x3c>)
 800673a:	4299      	cmp	r1, r3
 800673c:	d004      	beq.n	8006748 <cleanup_stdio+0x30>
 800673e:	4620      	mov	r0, r4
 8006740:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006744:	f000 be78 	b.w	8007438 <_fflush_r>
 8006748:	bd10      	pop	{r4, pc}
 800674a:	bf00      	nop
 800674c:	20000a24 	.word	0x20000a24
 8006750:	20000a8c 	.word	0x20000a8c
 8006754:	20000af4 	.word	0x20000af4

08006758 <global_stdio_init.part.0>:
 8006758:	b510      	push	{r4, lr}
 800675a:	4b0b      	ldr	r3, [pc, #44]	@ (8006788 <global_stdio_init.part.0+0x30>)
 800675c:	4c0b      	ldr	r4, [pc, #44]	@ (800678c <global_stdio_init.part.0+0x34>)
 800675e:	4a0c      	ldr	r2, [pc, #48]	@ (8006790 <global_stdio_init.part.0+0x38>)
 8006760:	601a      	str	r2, [r3, #0]
 8006762:	4620      	mov	r0, r4
 8006764:	2200      	movs	r2, #0
 8006766:	2104      	movs	r1, #4
 8006768:	f7ff ff94 	bl	8006694 <std>
 800676c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006770:	2201      	movs	r2, #1
 8006772:	2109      	movs	r1, #9
 8006774:	f7ff ff8e 	bl	8006694 <std>
 8006778:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800677c:	2202      	movs	r2, #2
 800677e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006782:	2112      	movs	r1, #18
 8006784:	f7ff bf86 	b.w	8006694 <std>
 8006788:	20000b5c 	.word	0x20000b5c
 800678c:	20000a24 	.word	0x20000a24
 8006790:	08006701 	.word	0x08006701

08006794 <__sfp_lock_acquire>:
 8006794:	4801      	ldr	r0, [pc, #4]	@ (800679c <__sfp_lock_acquire+0x8>)
 8006796:	f000 ba00 	b.w	8006b9a <__retarget_lock_acquire_recursive>
 800679a:	bf00      	nop
 800679c:	20000b65 	.word	0x20000b65

080067a0 <__sfp_lock_release>:
 80067a0:	4801      	ldr	r0, [pc, #4]	@ (80067a8 <__sfp_lock_release+0x8>)
 80067a2:	f000 b9fb 	b.w	8006b9c <__retarget_lock_release_recursive>
 80067a6:	bf00      	nop
 80067a8:	20000b65 	.word	0x20000b65

080067ac <__sinit>:
 80067ac:	b510      	push	{r4, lr}
 80067ae:	4604      	mov	r4, r0
 80067b0:	f7ff fff0 	bl	8006794 <__sfp_lock_acquire>
 80067b4:	6a23      	ldr	r3, [r4, #32]
 80067b6:	b11b      	cbz	r3, 80067c0 <__sinit+0x14>
 80067b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80067bc:	f7ff bff0 	b.w	80067a0 <__sfp_lock_release>
 80067c0:	4b04      	ldr	r3, [pc, #16]	@ (80067d4 <__sinit+0x28>)
 80067c2:	6223      	str	r3, [r4, #32]
 80067c4:	4b04      	ldr	r3, [pc, #16]	@ (80067d8 <__sinit+0x2c>)
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d1f5      	bne.n	80067b8 <__sinit+0xc>
 80067cc:	f7ff ffc4 	bl	8006758 <global_stdio_init.part.0>
 80067d0:	e7f2      	b.n	80067b8 <__sinit+0xc>
 80067d2:	bf00      	nop
 80067d4:	08006719 	.word	0x08006719
 80067d8:	20000b5c 	.word	0x20000b5c

080067dc <_fwalk_sglue>:
 80067dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80067e0:	4607      	mov	r7, r0
 80067e2:	4688      	mov	r8, r1
 80067e4:	4614      	mov	r4, r2
 80067e6:	2600      	movs	r6, #0
 80067e8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80067ec:	f1b9 0901 	subs.w	r9, r9, #1
 80067f0:	d505      	bpl.n	80067fe <_fwalk_sglue+0x22>
 80067f2:	6824      	ldr	r4, [r4, #0]
 80067f4:	2c00      	cmp	r4, #0
 80067f6:	d1f7      	bne.n	80067e8 <_fwalk_sglue+0xc>
 80067f8:	4630      	mov	r0, r6
 80067fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80067fe:	89ab      	ldrh	r3, [r5, #12]
 8006800:	2b01      	cmp	r3, #1
 8006802:	d907      	bls.n	8006814 <_fwalk_sglue+0x38>
 8006804:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006808:	3301      	adds	r3, #1
 800680a:	d003      	beq.n	8006814 <_fwalk_sglue+0x38>
 800680c:	4629      	mov	r1, r5
 800680e:	4638      	mov	r0, r7
 8006810:	47c0      	blx	r8
 8006812:	4306      	orrs	r6, r0
 8006814:	3568      	adds	r5, #104	@ 0x68
 8006816:	e7e9      	b.n	80067ec <_fwalk_sglue+0x10>

08006818 <iprintf>:
 8006818:	b40f      	push	{r0, r1, r2, r3}
 800681a:	b507      	push	{r0, r1, r2, lr}
 800681c:	4906      	ldr	r1, [pc, #24]	@ (8006838 <iprintf+0x20>)
 800681e:	ab04      	add	r3, sp, #16
 8006820:	6808      	ldr	r0, [r1, #0]
 8006822:	f853 2b04 	ldr.w	r2, [r3], #4
 8006826:	6881      	ldr	r1, [r0, #8]
 8006828:	9301      	str	r3, [sp, #4]
 800682a:	f000 fadb 	bl	8006de4 <_vfiprintf_r>
 800682e:	b003      	add	sp, #12
 8006830:	f85d eb04 	ldr.w	lr, [sp], #4
 8006834:	b004      	add	sp, #16
 8006836:	4770      	bx	lr
 8006838:	20000050 	.word	0x20000050

0800683c <_puts_r>:
 800683c:	6a03      	ldr	r3, [r0, #32]
 800683e:	b570      	push	{r4, r5, r6, lr}
 8006840:	6884      	ldr	r4, [r0, #8]
 8006842:	4605      	mov	r5, r0
 8006844:	460e      	mov	r6, r1
 8006846:	b90b      	cbnz	r3, 800684c <_puts_r+0x10>
 8006848:	f7ff ffb0 	bl	80067ac <__sinit>
 800684c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800684e:	07db      	lsls	r3, r3, #31
 8006850:	d405      	bmi.n	800685e <_puts_r+0x22>
 8006852:	89a3      	ldrh	r3, [r4, #12]
 8006854:	0598      	lsls	r0, r3, #22
 8006856:	d402      	bmi.n	800685e <_puts_r+0x22>
 8006858:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800685a:	f000 f99e 	bl	8006b9a <__retarget_lock_acquire_recursive>
 800685e:	89a3      	ldrh	r3, [r4, #12]
 8006860:	0719      	lsls	r1, r3, #28
 8006862:	d502      	bpl.n	800686a <_puts_r+0x2e>
 8006864:	6923      	ldr	r3, [r4, #16]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d135      	bne.n	80068d6 <_puts_r+0x9a>
 800686a:	4621      	mov	r1, r4
 800686c:	4628      	mov	r0, r5
 800686e:	f000 f8c5 	bl	80069fc <__swsetup_r>
 8006872:	b380      	cbz	r0, 80068d6 <_puts_r+0x9a>
 8006874:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8006878:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800687a:	07da      	lsls	r2, r3, #31
 800687c:	d405      	bmi.n	800688a <_puts_r+0x4e>
 800687e:	89a3      	ldrh	r3, [r4, #12]
 8006880:	059b      	lsls	r3, r3, #22
 8006882:	d402      	bmi.n	800688a <_puts_r+0x4e>
 8006884:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006886:	f000 f989 	bl	8006b9c <__retarget_lock_release_recursive>
 800688a:	4628      	mov	r0, r5
 800688c:	bd70      	pop	{r4, r5, r6, pc}
 800688e:	2b00      	cmp	r3, #0
 8006890:	da04      	bge.n	800689c <_puts_r+0x60>
 8006892:	69a2      	ldr	r2, [r4, #24]
 8006894:	429a      	cmp	r2, r3
 8006896:	dc17      	bgt.n	80068c8 <_puts_r+0x8c>
 8006898:	290a      	cmp	r1, #10
 800689a:	d015      	beq.n	80068c8 <_puts_r+0x8c>
 800689c:	6823      	ldr	r3, [r4, #0]
 800689e:	1c5a      	adds	r2, r3, #1
 80068a0:	6022      	str	r2, [r4, #0]
 80068a2:	7019      	strb	r1, [r3, #0]
 80068a4:	68a3      	ldr	r3, [r4, #8]
 80068a6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80068aa:	3b01      	subs	r3, #1
 80068ac:	60a3      	str	r3, [r4, #8]
 80068ae:	2900      	cmp	r1, #0
 80068b0:	d1ed      	bne.n	800688e <_puts_r+0x52>
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	da11      	bge.n	80068da <_puts_r+0x9e>
 80068b6:	4622      	mov	r2, r4
 80068b8:	210a      	movs	r1, #10
 80068ba:	4628      	mov	r0, r5
 80068bc:	f000 f85f 	bl	800697e <__swbuf_r>
 80068c0:	3001      	adds	r0, #1
 80068c2:	d0d7      	beq.n	8006874 <_puts_r+0x38>
 80068c4:	250a      	movs	r5, #10
 80068c6:	e7d7      	b.n	8006878 <_puts_r+0x3c>
 80068c8:	4622      	mov	r2, r4
 80068ca:	4628      	mov	r0, r5
 80068cc:	f000 f857 	bl	800697e <__swbuf_r>
 80068d0:	3001      	adds	r0, #1
 80068d2:	d1e7      	bne.n	80068a4 <_puts_r+0x68>
 80068d4:	e7ce      	b.n	8006874 <_puts_r+0x38>
 80068d6:	3e01      	subs	r6, #1
 80068d8:	e7e4      	b.n	80068a4 <_puts_r+0x68>
 80068da:	6823      	ldr	r3, [r4, #0]
 80068dc:	1c5a      	adds	r2, r3, #1
 80068de:	6022      	str	r2, [r4, #0]
 80068e0:	220a      	movs	r2, #10
 80068e2:	701a      	strb	r2, [r3, #0]
 80068e4:	e7ee      	b.n	80068c4 <_puts_r+0x88>
	...

080068e8 <puts>:
 80068e8:	4b02      	ldr	r3, [pc, #8]	@ (80068f4 <puts+0xc>)
 80068ea:	4601      	mov	r1, r0
 80068ec:	6818      	ldr	r0, [r3, #0]
 80068ee:	f7ff bfa5 	b.w	800683c <_puts_r>
 80068f2:	bf00      	nop
 80068f4:	20000050 	.word	0x20000050

080068f8 <__sread>:
 80068f8:	b510      	push	{r4, lr}
 80068fa:	460c      	mov	r4, r1
 80068fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006900:	f000 f8fc 	bl	8006afc <_read_r>
 8006904:	2800      	cmp	r0, #0
 8006906:	bfab      	itete	ge
 8006908:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800690a:	89a3      	ldrhlt	r3, [r4, #12]
 800690c:	181b      	addge	r3, r3, r0
 800690e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006912:	bfac      	ite	ge
 8006914:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006916:	81a3      	strhlt	r3, [r4, #12]
 8006918:	bd10      	pop	{r4, pc}

0800691a <__swrite>:
 800691a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800691e:	461f      	mov	r7, r3
 8006920:	898b      	ldrh	r3, [r1, #12]
 8006922:	05db      	lsls	r3, r3, #23
 8006924:	4605      	mov	r5, r0
 8006926:	460c      	mov	r4, r1
 8006928:	4616      	mov	r6, r2
 800692a:	d505      	bpl.n	8006938 <__swrite+0x1e>
 800692c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006930:	2302      	movs	r3, #2
 8006932:	2200      	movs	r2, #0
 8006934:	f000 f8d0 	bl	8006ad8 <_lseek_r>
 8006938:	89a3      	ldrh	r3, [r4, #12]
 800693a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800693e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006942:	81a3      	strh	r3, [r4, #12]
 8006944:	4632      	mov	r2, r6
 8006946:	463b      	mov	r3, r7
 8006948:	4628      	mov	r0, r5
 800694a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800694e:	f000 b8e7 	b.w	8006b20 <_write_r>

08006952 <__sseek>:
 8006952:	b510      	push	{r4, lr}
 8006954:	460c      	mov	r4, r1
 8006956:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800695a:	f000 f8bd 	bl	8006ad8 <_lseek_r>
 800695e:	1c43      	adds	r3, r0, #1
 8006960:	89a3      	ldrh	r3, [r4, #12]
 8006962:	bf15      	itete	ne
 8006964:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006966:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800696a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800696e:	81a3      	strheq	r3, [r4, #12]
 8006970:	bf18      	it	ne
 8006972:	81a3      	strhne	r3, [r4, #12]
 8006974:	bd10      	pop	{r4, pc}

08006976 <__sclose>:
 8006976:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800697a:	f000 b89d 	b.w	8006ab8 <_close_r>

0800697e <__swbuf_r>:
 800697e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006980:	460e      	mov	r6, r1
 8006982:	4614      	mov	r4, r2
 8006984:	4605      	mov	r5, r0
 8006986:	b118      	cbz	r0, 8006990 <__swbuf_r+0x12>
 8006988:	6a03      	ldr	r3, [r0, #32]
 800698a:	b90b      	cbnz	r3, 8006990 <__swbuf_r+0x12>
 800698c:	f7ff ff0e 	bl	80067ac <__sinit>
 8006990:	69a3      	ldr	r3, [r4, #24]
 8006992:	60a3      	str	r3, [r4, #8]
 8006994:	89a3      	ldrh	r3, [r4, #12]
 8006996:	071a      	lsls	r2, r3, #28
 8006998:	d501      	bpl.n	800699e <__swbuf_r+0x20>
 800699a:	6923      	ldr	r3, [r4, #16]
 800699c:	b943      	cbnz	r3, 80069b0 <__swbuf_r+0x32>
 800699e:	4621      	mov	r1, r4
 80069a0:	4628      	mov	r0, r5
 80069a2:	f000 f82b 	bl	80069fc <__swsetup_r>
 80069a6:	b118      	cbz	r0, 80069b0 <__swbuf_r+0x32>
 80069a8:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80069ac:	4638      	mov	r0, r7
 80069ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80069b0:	6823      	ldr	r3, [r4, #0]
 80069b2:	6922      	ldr	r2, [r4, #16]
 80069b4:	1a98      	subs	r0, r3, r2
 80069b6:	6963      	ldr	r3, [r4, #20]
 80069b8:	b2f6      	uxtb	r6, r6
 80069ba:	4283      	cmp	r3, r0
 80069bc:	4637      	mov	r7, r6
 80069be:	dc05      	bgt.n	80069cc <__swbuf_r+0x4e>
 80069c0:	4621      	mov	r1, r4
 80069c2:	4628      	mov	r0, r5
 80069c4:	f000 fd38 	bl	8007438 <_fflush_r>
 80069c8:	2800      	cmp	r0, #0
 80069ca:	d1ed      	bne.n	80069a8 <__swbuf_r+0x2a>
 80069cc:	68a3      	ldr	r3, [r4, #8]
 80069ce:	3b01      	subs	r3, #1
 80069d0:	60a3      	str	r3, [r4, #8]
 80069d2:	6823      	ldr	r3, [r4, #0]
 80069d4:	1c5a      	adds	r2, r3, #1
 80069d6:	6022      	str	r2, [r4, #0]
 80069d8:	701e      	strb	r6, [r3, #0]
 80069da:	6962      	ldr	r2, [r4, #20]
 80069dc:	1c43      	adds	r3, r0, #1
 80069de:	429a      	cmp	r2, r3
 80069e0:	d004      	beq.n	80069ec <__swbuf_r+0x6e>
 80069e2:	89a3      	ldrh	r3, [r4, #12]
 80069e4:	07db      	lsls	r3, r3, #31
 80069e6:	d5e1      	bpl.n	80069ac <__swbuf_r+0x2e>
 80069e8:	2e0a      	cmp	r6, #10
 80069ea:	d1df      	bne.n	80069ac <__swbuf_r+0x2e>
 80069ec:	4621      	mov	r1, r4
 80069ee:	4628      	mov	r0, r5
 80069f0:	f000 fd22 	bl	8007438 <_fflush_r>
 80069f4:	2800      	cmp	r0, #0
 80069f6:	d0d9      	beq.n	80069ac <__swbuf_r+0x2e>
 80069f8:	e7d6      	b.n	80069a8 <__swbuf_r+0x2a>
	...

080069fc <__swsetup_r>:
 80069fc:	b538      	push	{r3, r4, r5, lr}
 80069fe:	4b29      	ldr	r3, [pc, #164]	@ (8006aa4 <__swsetup_r+0xa8>)
 8006a00:	4605      	mov	r5, r0
 8006a02:	6818      	ldr	r0, [r3, #0]
 8006a04:	460c      	mov	r4, r1
 8006a06:	b118      	cbz	r0, 8006a10 <__swsetup_r+0x14>
 8006a08:	6a03      	ldr	r3, [r0, #32]
 8006a0a:	b90b      	cbnz	r3, 8006a10 <__swsetup_r+0x14>
 8006a0c:	f7ff fece 	bl	80067ac <__sinit>
 8006a10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006a14:	0719      	lsls	r1, r3, #28
 8006a16:	d422      	bmi.n	8006a5e <__swsetup_r+0x62>
 8006a18:	06da      	lsls	r2, r3, #27
 8006a1a:	d407      	bmi.n	8006a2c <__swsetup_r+0x30>
 8006a1c:	2209      	movs	r2, #9
 8006a1e:	602a      	str	r2, [r5, #0]
 8006a20:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006a24:	81a3      	strh	r3, [r4, #12]
 8006a26:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006a2a:	e033      	b.n	8006a94 <__swsetup_r+0x98>
 8006a2c:	0758      	lsls	r0, r3, #29
 8006a2e:	d512      	bpl.n	8006a56 <__swsetup_r+0x5a>
 8006a30:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006a32:	b141      	cbz	r1, 8006a46 <__swsetup_r+0x4a>
 8006a34:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006a38:	4299      	cmp	r1, r3
 8006a3a:	d002      	beq.n	8006a42 <__swsetup_r+0x46>
 8006a3c:	4628      	mov	r0, r5
 8006a3e:	f000 f8af 	bl	8006ba0 <_free_r>
 8006a42:	2300      	movs	r3, #0
 8006a44:	6363      	str	r3, [r4, #52]	@ 0x34
 8006a46:	89a3      	ldrh	r3, [r4, #12]
 8006a48:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006a4c:	81a3      	strh	r3, [r4, #12]
 8006a4e:	2300      	movs	r3, #0
 8006a50:	6063      	str	r3, [r4, #4]
 8006a52:	6923      	ldr	r3, [r4, #16]
 8006a54:	6023      	str	r3, [r4, #0]
 8006a56:	89a3      	ldrh	r3, [r4, #12]
 8006a58:	f043 0308 	orr.w	r3, r3, #8
 8006a5c:	81a3      	strh	r3, [r4, #12]
 8006a5e:	6923      	ldr	r3, [r4, #16]
 8006a60:	b94b      	cbnz	r3, 8006a76 <__swsetup_r+0x7a>
 8006a62:	89a3      	ldrh	r3, [r4, #12]
 8006a64:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006a68:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006a6c:	d003      	beq.n	8006a76 <__swsetup_r+0x7a>
 8006a6e:	4621      	mov	r1, r4
 8006a70:	4628      	mov	r0, r5
 8006a72:	f000 fd2f 	bl	80074d4 <__smakebuf_r>
 8006a76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006a7a:	f013 0201 	ands.w	r2, r3, #1
 8006a7e:	d00a      	beq.n	8006a96 <__swsetup_r+0x9a>
 8006a80:	2200      	movs	r2, #0
 8006a82:	60a2      	str	r2, [r4, #8]
 8006a84:	6962      	ldr	r2, [r4, #20]
 8006a86:	4252      	negs	r2, r2
 8006a88:	61a2      	str	r2, [r4, #24]
 8006a8a:	6922      	ldr	r2, [r4, #16]
 8006a8c:	b942      	cbnz	r2, 8006aa0 <__swsetup_r+0xa4>
 8006a8e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006a92:	d1c5      	bne.n	8006a20 <__swsetup_r+0x24>
 8006a94:	bd38      	pop	{r3, r4, r5, pc}
 8006a96:	0799      	lsls	r1, r3, #30
 8006a98:	bf58      	it	pl
 8006a9a:	6962      	ldrpl	r2, [r4, #20]
 8006a9c:	60a2      	str	r2, [r4, #8]
 8006a9e:	e7f4      	b.n	8006a8a <__swsetup_r+0x8e>
 8006aa0:	2000      	movs	r0, #0
 8006aa2:	e7f7      	b.n	8006a94 <__swsetup_r+0x98>
 8006aa4:	20000050 	.word	0x20000050

08006aa8 <memset>:
 8006aa8:	4402      	add	r2, r0
 8006aaa:	4603      	mov	r3, r0
 8006aac:	4293      	cmp	r3, r2
 8006aae:	d100      	bne.n	8006ab2 <memset+0xa>
 8006ab0:	4770      	bx	lr
 8006ab2:	f803 1b01 	strb.w	r1, [r3], #1
 8006ab6:	e7f9      	b.n	8006aac <memset+0x4>

08006ab8 <_close_r>:
 8006ab8:	b538      	push	{r3, r4, r5, lr}
 8006aba:	4d06      	ldr	r5, [pc, #24]	@ (8006ad4 <_close_r+0x1c>)
 8006abc:	2300      	movs	r3, #0
 8006abe:	4604      	mov	r4, r0
 8006ac0:	4608      	mov	r0, r1
 8006ac2:	602b      	str	r3, [r5, #0]
 8006ac4:	f7fa fa55 	bl	8000f72 <_close>
 8006ac8:	1c43      	adds	r3, r0, #1
 8006aca:	d102      	bne.n	8006ad2 <_close_r+0x1a>
 8006acc:	682b      	ldr	r3, [r5, #0]
 8006ace:	b103      	cbz	r3, 8006ad2 <_close_r+0x1a>
 8006ad0:	6023      	str	r3, [r4, #0]
 8006ad2:	bd38      	pop	{r3, r4, r5, pc}
 8006ad4:	20000b60 	.word	0x20000b60

08006ad8 <_lseek_r>:
 8006ad8:	b538      	push	{r3, r4, r5, lr}
 8006ada:	4d07      	ldr	r5, [pc, #28]	@ (8006af8 <_lseek_r+0x20>)
 8006adc:	4604      	mov	r4, r0
 8006ade:	4608      	mov	r0, r1
 8006ae0:	4611      	mov	r1, r2
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	602a      	str	r2, [r5, #0]
 8006ae6:	461a      	mov	r2, r3
 8006ae8:	f7fa fa6a 	bl	8000fc0 <_lseek>
 8006aec:	1c43      	adds	r3, r0, #1
 8006aee:	d102      	bne.n	8006af6 <_lseek_r+0x1e>
 8006af0:	682b      	ldr	r3, [r5, #0]
 8006af2:	b103      	cbz	r3, 8006af6 <_lseek_r+0x1e>
 8006af4:	6023      	str	r3, [r4, #0]
 8006af6:	bd38      	pop	{r3, r4, r5, pc}
 8006af8:	20000b60 	.word	0x20000b60

08006afc <_read_r>:
 8006afc:	b538      	push	{r3, r4, r5, lr}
 8006afe:	4d07      	ldr	r5, [pc, #28]	@ (8006b1c <_read_r+0x20>)
 8006b00:	4604      	mov	r4, r0
 8006b02:	4608      	mov	r0, r1
 8006b04:	4611      	mov	r1, r2
 8006b06:	2200      	movs	r2, #0
 8006b08:	602a      	str	r2, [r5, #0]
 8006b0a:	461a      	mov	r2, r3
 8006b0c:	f7fa f9f8 	bl	8000f00 <_read>
 8006b10:	1c43      	adds	r3, r0, #1
 8006b12:	d102      	bne.n	8006b1a <_read_r+0x1e>
 8006b14:	682b      	ldr	r3, [r5, #0]
 8006b16:	b103      	cbz	r3, 8006b1a <_read_r+0x1e>
 8006b18:	6023      	str	r3, [r4, #0]
 8006b1a:	bd38      	pop	{r3, r4, r5, pc}
 8006b1c:	20000b60 	.word	0x20000b60

08006b20 <_write_r>:
 8006b20:	b538      	push	{r3, r4, r5, lr}
 8006b22:	4d07      	ldr	r5, [pc, #28]	@ (8006b40 <_write_r+0x20>)
 8006b24:	4604      	mov	r4, r0
 8006b26:	4608      	mov	r0, r1
 8006b28:	4611      	mov	r1, r2
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	602a      	str	r2, [r5, #0]
 8006b2e:	461a      	mov	r2, r3
 8006b30:	f7fa fa03 	bl	8000f3a <_write>
 8006b34:	1c43      	adds	r3, r0, #1
 8006b36:	d102      	bne.n	8006b3e <_write_r+0x1e>
 8006b38:	682b      	ldr	r3, [r5, #0]
 8006b3a:	b103      	cbz	r3, 8006b3e <_write_r+0x1e>
 8006b3c:	6023      	str	r3, [r4, #0]
 8006b3e:	bd38      	pop	{r3, r4, r5, pc}
 8006b40:	20000b60 	.word	0x20000b60

08006b44 <__errno>:
 8006b44:	4b01      	ldr	r3, [pc, #4]	@ (8006b4c <__errno+0x8>)
 8006b46:	6818      	ldr	r0, [r3, #0]
 8006b48:	4770      	bx	lr
 8006b4a:	bf00      	nop
 8006b4c:	20000050 	.word	0x20000050

08006b50 <__libc_init_array>:
 8006b50:	b570      	push	{r4, r5, r6, lr}
 8006b52:	4d0d      	ldr	r5, [pc, #52]	@ (8006b88 <__libc_init_array+0x38>)
 8006b54:	4c0d      	ldr	r4, [pc, #52]	@ (8006b8c <__libc_init_array+0x3c>)
 8006b56:	1b64      	subs	r4, r4, r5
 8006b58:	10a4      	asrs	r4, r4, #2
 8006b5a:	2600      	movs	r6, #0
 8006b5c:	42a6      	cmp	r6, r4
 8006b5e:	d109      	bne.n	8006b74 <__libc_init_array+0x24>
 8006b60:	4d0b      	ldr	r5, [pc, #44]	@ (8006b90 <__libc_init_array+0x40>)
 8006b62:	4c0c      	ldr	r4, [pc, #48]	@ (8006b94 <__libc_init_array+0x44>)
 8006b64:	f000 fd24 	bl	80075b0 <_init>
 8006b68:	1b64      	subs	r4, r4, r5
 8006b6a:	10a4      	asrs	r4, r4, #2
 8006b6c:	2600      	movs	r6, #0
 8006b6e:	42a6      	cmp	r6, r4
 8006b70:	d105      	bne.n	8006b7e <__libc_init_array+0x2e>
 8006b72:	bd70      	pop	{r4, r5, r6, pc}
 8006b74:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b78:	4798      	blx	r3
 8006b7a:	3601      	adds	r6, #1
 8006b7c:	e7ee      	b.n	8006b5c <__libc_init_array+0xc>
 8006b7e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b82:	4798      	blx	r3
 8006b84:	3601      	adds	r6, #1
 8006b86:	e7f2      	b.n	8006b6e <__libc_init_array+0x1e>
 8006b88:	080078d0 	.word	0x080078d0
 8006b8c:	080078d0 	.word	0x080078d0
 8006b90:	080078d0 	.word	0x080078d0
 8006b94:	080078d4 	.word	0x080078d4

08006b98 <__retarget_lock_init_recursive>:
 8006b98:	4770      	bx	lr

08006b9a <__retarget_lock_acquire_recursive>:
 8006b9a:	4770      	bx	lr

08006b9c <__retarget_lock_release_recursive>:
 8006b9c:	4770      	bx	lr
	...

08006ba0 <_free_r>:
 8006ba0:	b538      	push	{r3, r4, r5, lr}
 8006ba2:	4605      	mov	r5, r0
 8006ba4:	2900      	cmp	r1, #0
 8006ba6:	d041      	beq.n	8006c2c <_free_r+0x8c>
 8006ba8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006bac:	1f0c      	subs	r4, r1, #4
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	bfb8      	it	lt
 8006bb2:	18e4      	addlt	r4, r4, r3
 8006bb4:	f000 f8e0 	bl	8006d78 <__malloc_lock>
 8006bb8:	4a1d      	ldr	r2, [pc, #116]	@ (8006c30 <_free_r+0x90>)
 8006bba:	6813      	ldr	r3, [r2, #0]
 8006bbc:	b933      	cbnz	r3, 8006bcc <_free_r+0x2c>
 8006bbe:	6063      	str	r3, [r4, #4]
 8006bc0:	6014      	str	r4, [r2, #0]
 8006bc2:	4628      	mov	r0, r5
 8006bc4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006bc8:	f000 b8dc 	b.w	8006d84 <__malloc_unlock>
 8006bcc:	42a3      	cmp	r3, r4
 8006bce:	d908      	bls.n	8006be2 <_free_r+0x42>
 8006bd0:	6820      	ldr	r0, [r4, #0]
 8006bd2:	1821      	adds	r1, r4, r0
 8006bd4:	428b      	cmp	r3, r1
 8006bd6:	bf01      	itttt	eq
 8006bd8:	6819      	ldreq	r1, [r3, #0]
 8006bda:	685b      	ldreq	r3, [r3, #4]
 8006bdc:	1809      	addeq	r1, r1, r0
 8006bde:	6021      	streq	r1, [r4, #0]
 8006be0:	e7ed      	b.n	8006bbe <_free_r+0x1e>
 8006be2:	461a      	mov	r2, r3
 8006be4:	685b      	ldr	r3, [r3, #4]
 8006be6:	b10b      	cbz	r3, 8006bec <_free_r+0x4c>
 8006be8:	42a3      	cmp	r3, r4
 8006bea:	d9fa      	bls.n	8006be2 <_free_r+0x42>
 8006bec:	6811      	ldr	r1, [r2, #0]
 8006bee:	1850      	adds	r0, r2, r1
 8006bf0:	42a0      	cmp	r0, r4
 8006bf2:	d10b      	bne.n	8006c0c <_free_r+0x6c>
 8006bf4:	6820      	ldr	r0, [r4, #0]
 8006bf6:	4401      	add	r1, r0
 8006bf8:	1850      	adds	r0, r2, r1
 8006bfa:	4283      	cmp	r3, r0
 8006bfc:	6011      	str	r1, [r2, #0]
 8006bfe:	d1e0      	bne.n	8006bc2 <_free_r+0x22>
 8006c00:	6818      	ldr	r0, [r3, #0]
 8006c02:	685b      	ldr	r3, [r3, #4]
 8006c04:	6053      	str	r3, [r2, #4]
 8006c06:	4408      	add	r0, r1
 8006c08:	6010      	str	r0, [r2, #0]
 8006c0a:	e7da      	b.n	8006bc2 <_free_r+0x22>
 8006c0c:	d902      	bls.n	8006c14 <_free_r+0x74>
 8006c0e:	230c      	movs	r3, #12
 8006c10:	602b      	str	r3, [r5, #0]
 8006c12:	e7d6      	b.n	8006bc2 <_free_r+0x22>
 8006c14:	6820      	ldr	r0, [r4, #0]
 8006c16:	1821      	adds	r1, r4, r0
 8006c18:	428b      	cmp	r3, r1
 8006c1a:	bf04      	itt	eq
 8006c1c:	6819      	ldreq	r1, [r3, #0]
 8006c1e:	685b      	ldreq	r3, [r3, #4]
 8006c20:	6063      	str	r3, [r4, #4]
 8006c22:	bf04      	itt	eq
 8006c24:	1809      	addeq	r1, r1, r0
 8006c26:	6021      	streq	r1, [r4, #0]
 8006c28:	6054      	str	r4, [r2, #4]
 8006c2a:	e7ca      	b.n	8006bc2 <_free_r+0x22>
 8006c2c:	bd38      	pop	{r3, r4, r5, pc}
 8006c2e:	bf00      	nop
 8006c30:	20000b6c 	.word	0x20000b6c

08006c34 <sbrk_aligned>:
 8006c34:	b570      	push	{r4, r5, r6, lr}
 8006c36:	4e0f      	ldr	r6, [pc, #60]	@ (8006c74 <sbrk_aligned+0x40>)
 8006c38:	460c      	mov	r4, r1
 8006c3a:	6831      	ldr	r1, [r6, #0]
 8006c3c:	4605      	mov	r5, r0
 8006c3e:	b911      	cbnz	r1, 8006c46 <sbrk_aligned+0x12>
 8006c40:	f000 fca6 	bl	8007590 <_sbrk_r>
 8006c44:	6030      	str	r0, [r6, #0]
 8006c46:	4621      	mov	r1, r4
 8006c48:	4628      	mov	r0, r5
 8006c4a:	f000 fca1 	bl	8007590 <_sbrk_r>
 8006c4e:	1c43      	adds	r3, r0, #1
 8006c50:	d103      	bne.n	8006c5a <sbrk_aligned+0x26>
 8006c52:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8006c56:	4620      	mov	r0, r4
 8006c58:	bd70      	pop	{r4, r5, r6, pc}
 8006c5a:	1cc4      	adds	r4, r0, #3
 8006c5c:	f024 0403 	bic.w	r4, r4, #3
 8006c60:	42a0      	cmp	r0, r4
 8006c62:	d0f8      	beq.n	8006c56 <sbrk_aligned+0x22>
 8006c64:	1a21      	subs	r1, r4, r0
 8006c66:	4628      	mov	r0, r5
 8006c68:	f000 fc92 	bl	8007590 <_sbrk_r>
 8006c6c:	3001      	adds	r0, #1
 8006c6e:	d1f2      	bne.n	8006c56 <sbrk_aligned+0x22>
 8006c70:	e7ef      	b.n	8006c52 <sbrk_aligned+0x1e>
 8006c72:	bf00      	nop
 8006c74:	20000b68 	.word	0x20000b68

08006c78 <_malloc_r>:
 8006c78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c7c:	1ccd      	adds	r5, r1, #3
 8006c7e:	f025 0503 	bic.w	r5, r5, #3
 8006c82:	3508      	adds	r5, #8
 8006c84:	2d0c      	cmp	r5, #12
 8006c86:	bf38      	it	cc
 8006c88:	250c      	movcc	r5, #12
 8006c8a:	2d00      	cmp	r5, #0
 8006c8c:	4606      	mov	r6, r0
 8006c8e:	db01      	blt.n	8006c94 <_malloc_r+0x1c>
 8006c90:	42a9      	cmp	r1, r5
 8006c92:	d904      	bls.n	8006c9e <_malloc_r+0x26>
 8006c94:	230c      	movs	r3, #12
 8006c96:	6033      	str	r3, [r6, #0]
 8006c98:	2000      	movs	r0, #0
 8006c9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006c9e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006d74 <_malloc_r+0xfc>
 8006ca2:	f000 f869 	bl	8006d78 <__malloc_lock>
 8006ca6:	f8d8 3000 	ldr.w	r3, [r8]
 8006caa:	461c      	mov	r4, r3
 8006cac:	bb44      	cbnz	r4, 8006d00 <_malloc_r+0x88>
 8006cae:	4629      	mov	r1, r5
 8006cb0:	4630      	mov	r0, r6
 8006cb2:	f7ff ffbf 	bl	8006c34 <sbrk_aligned>
 8006cb6:	1c43      	adds	r3, r0, #1
 8006cb8:	4604      	mov	r4, r0
 8006cba:	d158      	bne.n	8006d6e <_malloc_r+0xf6>
 8006cbc:	f8d8 4000 	ldr.w	r4, [r8]
 8006cc0:	4627      	mov	r7, r4
 8006cc2:	2f00      	cmp	r7, #0
 8006cc4:	d143      	bne.n	8006d4e <_malloc_r+0xd6>
 8006cc6:	2c00      	cmp	r4, #0
 8006cc8:	d04b      	beq.n	8006d62 <_malloc_r+0xea>
 8006cca:	6823      	ldr	r3, [r4, #0]
 8006ccc:	4639      	mov	r1, r7
 8006cce:	4630      	mov	r0, r6
 8006cd0:	eb04 0903 	add.w	r9, r4, r3
 8006cd4:	f000 fc5c 	bl	8007590 <_sbrk_r>
 8006cd8:	4581      	cmp	r9, r0
 8006cda:	d142      	bne.n	8006d62 <_malloc_r+0xea>
 8006cdc:	6821      	ldr	r1, [r4, #0]
 8006cde:	1a6d      	subs	r5, r5, r1
 8006ce0:	4629      	mov	r1, r5
 8006ce2:	4630      	mov	r0, r6
 8006ce4:	f7ff ffa6 	bl	8006c34 <sbrk_aligned>
 8006ce8:	3001      	adds	r0, #1
 8006cea:	d03a      	beq.n	8006d62 <_malloc_r+0xea>
 8006cec:	6823      	ldr	r3, [r4, #0]
 8006cee:	442b      	add	r3, r5
 8006cf0:	6023      	str	r3, [r4, #0]
 8006cf2:	f8d8 3000 	ldr.w	r3, [r8]
 8006cf6:	685a      	ldr	r2, [r3, #4]
 8006cf8:	bb62      	cbnz	r2, 8006d54 <_malloc_r+0xdc>
 8006cfa:	f8c8 7000 	str.w	r7, [r8]
 8006cfe:	e00f      	b.n	8006d20 <_malloc_r+0xa8>
 8006d00:	6822      	ldr	r2, [r4, #0]
 8006d02:	1b52      	subs	r2, r2, r5
 8006d04:	d420      	bmi.n	8006d48 <_malloc_r+0xd0>
 8006d06:	2a0b      	cmp	r2, #11
 8006d08:	d917      	bls.n	8006d3a <_malloc_r+0xc2>
 8006d0a:	1961      	adds	r1, r4, r5
 8006d0c:	42a3      	cmp	r3, r4
 8006d0e:	6025      	str	r5, [r4, #0]
 8006d10:	bf18      	it	ne
 8006d12:	6059      	strne	r1, [r3, #4]
 8006d14:	6863      	ldr	r3, [r4, #4]
 8006d16:	bf08      	it	eq
 8006d18:	f8c8 1000 	streq.w	r1, [r8]
 8006d1c:	5162      	str	r2, [r4, r5]
 8006d1e:	604b      	str	r3, [r1, #4]
 8006d20:	4630      	mov	r0, r6
 8006d22:	f000 f82f 	bl	8006d84 <__malloc_unlock>
 8006d26:	f104 000b 	add.w	r0, r4, #11
 8006d2a:	1d23      	adds	r3, r4, #4
 8006d2c:	f020 0007 	bic.w	r0, r0, #7
 8006d30:	1ac2      	subs	r2, r0, r3
 8006d32:	bf1c      	itt	ne
 8006d34:	1a1b      	subne	r3, r3, r0
 8006d36:	50a3      	strne	r3, [r4, r2]
 8006d38:	e7af      	b.n	8006c9a <_malloc_r+0x22>
 8006d3a:	6862      	ldr	r2, [r4, #4]
 8006d3c:	42a3      	cmp	r3, r4
 8006d3e:	bf0c      	ite	eq
 8006d40:	f8c8 2000 	streq.w	r2, [r8]
 8006d44:	605a      	strne	r2, [r3, #4]
 8006d46:	e7eb      	b.n	8006d20 <_malloc_r+0xa8>
 8006d48:	4623      	mov	r3, r4
 8006d4a:	6864      	ldr	r4, [r4, #4]
 8006d4c:	e7ae      	b.n	8006cac <_malloc_r+0x34>
 8006d4e:	463c      	mov	r4, r7
 8006d50:	687f      	ldr	r7, [r7, #4]
 8006d52:	e7b6      	b.n	8006cc2 <_malloc_r+0x4a>
 8006d54:	461a      	mov	r2, r3
 8006d56:	685b      	ldr	r3, [r3, #4]
 8006d58:	42a3      	cmp	r3, r4
 8006d5a:	d1fb      	bne.n	8006d54 <_malloc_r+0xdc>
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	6053      	str	r3, [r2, #4]
 8006d60:	e7de      	b.n	8006d20 <_malloc_r+0xa8>
 8006d62:	230c      	movs	r3, #12
 8006d64:	6033      	str	r3, [r6, #0]
 8006d66:	4630      	mov	r0, r6
 8006d68:	f000 f80c 	bl	8006d84 <__malloc_unlock>
 8006d6c:	e794      	b.n	8006c98 <_malloc_r+0x20>
 8006d6e:	6005      	str	r5, [r0, #0]
 8006d70:	e7d6      	b.n	8006d20 <_malloc_r+0xa8>
 8006d72:	bf00      	nop
 8006d74:	20000b6c 	.word	0x20000b6c

08006d78 <__malloc_lock>:
 8006d78:	4801      	ldr	r0, [pc, #4]	@ (8006d80 <__malloc_lock+0x8>)
 8006d7a:	f7ff bf0e 	b.w	8006b9a <__retarget_lock_acquire_recursive>
 8006d7e:	bf00      	nop
 8006d80:	20000b64 	.word	0x20000b64

08006d84 <__malloc_unlock>:
 8006d84:	4801      	ldr	r0, [pc, #4]	@ (8006d8c <__malloc_unlock+0x8>)
 8006d86:	f7ff bf09 	b.w	8006b9c <__retarget_lock_release_recursive>
 8006d8a:	bf00      	nop
 8006d8c:	20000b64 	.word	0x20000b64

08006d90 <__sfputc_r>:
 8006d90:	6893      	ldr	r3, [r2, #8]
 8006d92:	3b01      	subs	r3, #1
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	b410      	push	{r4}
 8006d98:	6093      	str	r3, [r2, #8]
 8006d9a:	da08      	bge.n	8006dae <__sfputc_r+0x1e>
 8006d9c:	6994      	ldr	r4, [r2, #24]
 8006d9e:	42a3      	cmp	r3, r4
 8006da0:	db01      	blt.n	8006da6 <__sfputc_r+0x16>
 8006da2:	290a      	cmp	r1, #10
 8006da4:	d103      	bne.n	8006dae <__sfputc_r+0x1e>
 8006da6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006daa:	f7ff bde8 	b.w	800697e <__swbuf_r>
 8006dae:	6813      	ldr	r3, [r2, #0]
 8006db0:	1c58      	adds	r0, r3, #1
 8006db2:	6010      	str	r0, [r2, #0]
 8006db4:	7019      	strb	r1, [r3, #0]
 8006db6:	4608      	mov	r0, r1
 8006db8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006dbc:	4770      	bx	lr

08006dbe <__sfputs_r>:
 8006dbe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dc0:	4606      	mov	r6, r0
 8006dc2:	460f      	mov	r7, r1
 8006dc4:	4614      	mov	r4, r2
 8006dc6:	18d5      	adds	r5, r2, r3
 8006dc8:	42ac      	cmp	r4, r5
 8006dca:	d101      	bne.n	8006dd0 <__sfputs_r+0x12>
 8006dcc:	2000      	movs	r0, #0
 8006dce:	e007      	b.n	8006de0 <__sfputs_r+0x22>
 8006dd0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006dd4:	463a      	mov	r2, r7
 8006dd6:	4630      	mov	r0, r6
 8006dd8:	f7ff ffda 	bl	8006d90 <__sfputc_r>
 8006ddc:	1c43      	adds	r3, r0, #1
 8006dde:	d1f3      	bne.n	8006dc8 <__sfputs_r+0xa>
 8006de0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006de4 <_vfiprintf_r>:
 8006de4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006de8:	460d      	mov	r5, r1
 8006dea:	b09d      	sub	sp, #116	@ 0x74
 8006dec:	4614      	mov	r4, r2
 8006dee:	4698      	mov	r8, r3
 8006df0:	4606      	mov	r6, r0
 8006df2:	b118      	cbz	r0, 8006dfc <_vfiprintf_r+0x18>
 8006df4:	6a03      	ldr	r3, [r0, #32]
 8006df6:	b90b      	cbnz	r3, 8006dfc <_vfiprintf_r+0x18>
 8006df8:	f7ff fcd8 	bl	80067ac <__sinit>
 8006dfc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006dfe:	07d9      	lsls	r1, r3, #31
 8006e00:	d405      	bmi.n	8006e0e <_vfiprintf_r+0x2a>
 8006e02:	89ab      	ldrh	r3, [r5, #12]
 8006e04:	059a      	lsls	r2, r3, #22
 8006e06:	d402      	bmi.n	8006e0e <_vfiprintf_r+0x2a>
 8006e08:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006e0a:	f7ff fec6 	bl	8006b9a <__retarget_lock_acquire_recursive>
 8006e0e:	89ab      	ldrh	r3, [r5, #12]
 8006e10:	071b      	lsls	r3, r3, #28
 8006e12:	d501      	bpl.n	8006e18 <_vfiprintf_r+0x34>
 8006e14:	692b      	ldr	r3, [r5, #16]
 8006e16:	b99b      	cbnz	r3, 8006e40 <_vfiprintf_r+0x5c>
 8006e18:	4629      	mov	r1, r5
 8006e1a:	4630      	mov	r0, r6
 8006e1c:	f7ff fdee 	bl	80069fc <__swsetup_r>
 8006e20:	b170      	cbz	r0, 8006e40 <_vfiprintf_r+0x5c>
 8006e22:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006e24:	07dc      	lsls	r4, r3, #31
 8006e26:	d504      	bpl.n	8006e32 <_vfiprintf_r+0x4e>
 8006e28:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006e2c:	b01d      	add	sp, #116	@ 0x74
 8006e2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e32:	89ab      	ldrh	r3, [r5, #12]
 8006e34:	0598      	lsls	r0, r3, #22
 8006e36:	d4f7      	bmi.n	8006e28 <_vfiprintf_r+0x44>
 8006e38:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006e3a:	f7ff feaf 	bl	8006b9c <__retarget_lock_release_recursive>
 8006e3e:	e7f3      	b.n	8006e28 <_vfiprintf_r+0x44>
 8006e40:	2300      	movs	r3, #0
 8006e42:	9309      	str	r3, [sp, #36]	@ 0x24
 8006e44:	2320      	movs	r3, #32
 8006e46:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006e4a:	f8cd 800c 	str.w	r8, [sp, #12]
 8006e4e:	2330      	movs	r3, #48	@ 0x30
 8006e50:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007000 <_vfiprintf_r+0x21c>
 8006e54:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006e58:	f04f 0901 	mov.w	r9, #1
 8006e5c:	4623      	mov	r3, r4
 8006e5e:	469a      	mov	sl, r3
 8006e60:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006e64:	b10a      	cbz	r2, 8006e6a <_vfiprintf_r+0x86>
 8006e66:	2a25      	cmp	r2, #37	@ 0x25
 8006e68:	d1f9      	bne.n	8006e5e <_vfiprintf_r+0x7a>
 8006e6a:	ebba 0b04 	subs.w	fp, sl, r4
 8006e6e:	d00b      	beq.n	8006e88 <_vfiprintf_r+0xa4>
 8006e70:	465b      	mov	r3, fp
 8006e72:	4622      	mov	r2, r4
 8006e74:	4629      	mov	r1, r5
 8006e76:	4630      	mov	r0, r6
 8006e78:	f7ff ffa1 	bl	8006dbe <__sfputs_r>
 8006e7c:	3001      	adds	r0, #1
 8006e7e:	f000 80a7 	beq.w	8006fd0 <_vfiprintf_r+0x1ec>
 8006e82:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006e84:	445a      	add	r2, fp
 8006e86:	9209      	str	r2, [sp, #36]	@ 0x24
 8006e88:	f89a 3000 	ldrb.w	r3, [sl]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	f000 809f 	beq.w	8006fd0 <_vfiprintf_r+0x1ec>
 8006e92:	2300      	movs	r3, #0
 8006e94:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006e98:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006e9c:	f10a 0a01 	add.w	sl, sl, #1
 8006ea0:	9304      	str	r3, [sp, #16]
 8006ea2:	9307      	str	r3, [sp, #28]
 8006ea4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006ea8:	931a      	str	r3, [sp, #104]	@ 0x68
 8006eaa:	4654      	mov	r4, sl
 8006eac:	2205      	movs	r2, #5
 8006eae:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006eb2:	4853      	ldr	r0, [pc, #332]	@ (8007000 <_vfiprintf_r+0x21c>)
 8006eb4:	f7f9 f98c 	bl	80001d0 <memchr>
 8006eb8:	9a04      	ldr	r2, [sp, #16]
 8006eba:	b9d8      	cbnz	r0, 8006ef4 <_vfiprintf_r+0x110>
 8006ebc:	06d1      	lsls	r1, r2, #27
 8006ebe:	bf44      	itt	mi
 8006ec0:	2320      	movmi	r3, #32
 8006ec2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006ec6:	0713      	lsls	r3, r2, #28
 8006ec8:	bf44      	itt	mi
 8006eca:	232b      	movmi	r3, #43	@ 0x2b
 8006ecc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006ed0:	f89a 3000 	ldrb.w	r3, [sl]
 8006ed4:	2b2a      	cmp	r3, #42	@ 0x2a
 8006ed6:	d015      	beq.n	8006f04 <_vfiprintf_r+0x120>
 8006ed8:	9a07      	ldr	r2, [sp, #28]
 8006eda:	4654      	mov	r4, sl
 8006edc:	2000      	movs	r0, #0
 8006ede:	f04f 0c0a 	mov.w	ip, #10
 8006ee2:	4621      	mov	r1, r4
 8006ee4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006ee8:	3b30      	subs	r3, #48	@ 0x30
 8006eea:	2b09      	cmp	r3, #9
 8006eec:	d94b      	bls.n	8006f86 <_vfiprintf_r+0x1a2>
 8006eee:	b1b0      	cbz	r0, 8006f1e <_vfiprintf_r+0x13a>
 8006ef0:	9207      	str	r2, [sp, #28]
 8006ef2:	e014      	b.n	8006f1e <_vfiprintf_r+0x13a>
 8006ef4:	eba0 0308 	sub.w	r3, r0, r8
 8006ef8:	fa09 f303 	lsl.w	r3, r9, r3
 8006efc:	4313      	orrs	r3, r2
 8006efe:	9304      	str	r3, [sp, #16]
 8006f00:	46a2      	mov	sl, r4
 8006f02:	e7d2      	b.n	8006eaa <_vfiprintf_r+0xc6>
 8006f04:	9b03      	ldr	r3, [sp, #12]
 8006f06:	1d19      	adds	r1, r3, #4
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	9103      	str	r1, [sp, #12]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	bfbb      	ittet	lt
 8006f10:	425b      	neglt	r3, r3
 8006f12:	f042 0202 	orrlt.w	r2, r2, #2
 8006f16:	9307      	strge	r3, [sp, #28]
 8006f18:	9307      	strlt	r3, [sp, #28]
 8006f1a:	bfb8      	it	lt
 8006f1c:	9204      	strlt	r2, [sp, #16]
 8006f1e:	7823      	ldrb	r3, [r4, #0]
 8006f20:	2b2e      	cmp	r3, #46	@ 0x2e
 8006f22:	d10a      	bne.n	8006f3a <_vfiprintf_r+0x156>
 8006f24:	7863      	ldrb	r3, [r4, #1]
 8006f26:	2b2a      	cmp	r3, #42	@ 0x2a
 8006f28:	d132      	bne.n	8006f90 <_vfiprintf_r+0x1ac>
 8006f2a:	9b03      	ldr	r3, [sp, #12]
 8006f2c:	1d1a      	adds	r2, r3, #4
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	9203      	str	r2, [sp, #12]
 8006f32:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006f36:	3402      	adds	r4, #2
 8006f38:	9305      	str	r3, [sp, #20]
 8006f3a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007010 <_vfiprintf_r+0x22c>
 8006f3e:	7821      	ldrb	r1, [r4, #0]
 8006f40:	2203      	movs	r2, #3
 8006f42:	4650      	mov	r0, sl
 8006f44:	f7f9 f944 	bl	80001d0 <memchr>
 8006f48:	b138      	cbz	r0, 8006f5a <_vfiprintf_r+0x176>
 8006f4a:	9b04      	ldr	r3, [sp, #16]
 8006f4c:	eba0 000a 	sub.w	r0, r0, sl
 8006f50:	2240      	movs	r2, #64	@ 0x40
 8006f52:	4082      	lsls	r2, r0
 8006f54:	4313      	orrs	r3, r2
 8006f56:	3401      	adds	r4, #1
 8006f58:	9304      	str	r3, [sp, #16]
 8006f5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f5e:	4829      	ldr	r0, [pc, #164]	@ (8007004 <_vfiprintf_r+0x220>)
 8006f60:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006f64:	2206      	movs	r2, #6
 8006f66:	f7f9 f933 	bl	80001d0 <memchr>
 8006f6a:	2800      	cmp	r0, #0
 8006f6c:	d03f      	beq.n	8006fee <_vfiprintf_r+0x20a>
 8006f6e:	4b26      	ldr	r3, [pc, #152]	@ (8007008 <_vfiprintf_r+0x224>)
 8006f70:	bb1b      	cbnz	r3, 8006fba <_vfiprintf_r+0x1d6>
 8006f72:	9b03      	ldr	r3, [sp, #12]
 8006f74:	3307      	adds	r3, #7
 8006f76:	f023 0307 	bic.w	r3, r3, #7
 8006f7a:	3308      	adds	r3, #8
 8006f7c:	9303      	str	r3, [sp, #12]
 8006f7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f80:	443b      	add	r3, r7
 8006f82:	9309      	str	r3, [sp, #36]	@ 0x24
 8006f84:	e76a      	b.n	8006e5c <_vfiprintf_r+0x78>
 8006f86:	fb0c 3202 	mla	r2, ip, r2, r3
 8006f8a:	460c      	mov	r4, r1
 8006f8c:	2001      	movs	r0, #1
 8006f8e:	e7a8      	b.n	8006ee2 <_vfiprintf_r+0xfe>
 8006f90:	2300      	movs	r3, #0
 8006f92:	3401      	adds	r4, #1
 8006f94:	9305      	str	r3, [sp, #20]
 8006f96:	4619      	mov	r1, r3
 8006f98:	f04f 0c0a 	mov.w	ip, #10
 8006f9c:	4620      	mov	r0, r4
 8006f9e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006fa2:	3a30      	subs	r2, #48	@ 0x30
 8006fa4:	2a09      	cmp	r2, #9
 8006fa6:	d903      	bls.n	8006fb0 <_vfiprintf_r+0x1cc>
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d0c6      	beq.n	8006f3a <_vfiprintf_r+0x156>
 8006fac:	9105      	str	r1, [sp, #20]
 8006fae:	e7c4      	b.n	8006f3a <_vfiprintf_r+0x156>
 8006fb0:	fb0c 2101 	mla	r1, ip, r1, r2
 8006fb4:	4604      	mov	r4, r0
 8006fb6:	2301      	movs	r3, #1
 8006fb8:	e7f0      	b.n	8006f9c <_vfiprintf_r+0x1b8>
 8006fba:	ab03      	add	r3, sp, #12
 8006fbc:	9300      	str	r3, [sp, #0]
 8006fbe:	462a      	mov	r2, r5
 8006fc0:	4b12      	ldr	r3, [pc, #72]	@ (800700c <_vfiprintf_r+0x228>)
 8006fc2:	a904      	add	r1, sp, #16
 8006fc4:	4630      	mov	r0, r6
 8006fc6:	f3af 8000 	nop.w
 8006fca:	4607      	mov	r7, r0
 8006fcc:	1c78      	adds	r0, r7, #1
 8006fce:	d1d6      	bne.n	8006f7e <_vfiprintf_r+0x19a>
 8006fd0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006fd2:	07d9      	lsls	r1, r3, #31
 8006fd4:	d405      	bmi.n	8006fe2 <_vfiprintf_r+0x1fe>
 8006fd6:	89ab      	ldrh	r3, [r5, #12]
 8006fd8:	059a      	lsls	r2, r3, #22
 8006fda:	d402      	bmi.n	8006fe2 <_vfiprintf_r+0x1fe>
 8006fdc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006fde:	f7ff fddd 	bl	8006b9c <__retarget_lock_release_recursive>
 8006fe2:	89ab      	ldrh	r3, [r5, #12]
 8006fe4:	065b      	lsls	r3, r3, #25
 8006fe6:	f53f af1f 	bmi.w	8006e28 <_vfiprintf_r+0x44>
 8006fea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006fec:	e71e      	b.n	8006e2c <_vfiprintf_r+0x48>
 8006fee:	ab03      	add	r3, sp, #12
 8006ff0:	9300      	str	r3, [sp, #0]
 8006ff2:	462a      	mov	r2, r5
 8006ff4:	4b05      	ldr	r3, [pc, #20]	@ (800700c <_vfiprintf_r+0x228>)
 8006ff6:	a904      	add	r1, sp, #16
 8006ff8:	4630      	mov	r0, r6
 8006ffa:	f000 f879 	bl	80070f0 <_printf_i>
 8006ffe:	e7e4      	b.n	8006fca <_vfiprintf_r+0x1e6>
 8007000:	08007894 	.word	0x08007894
 8007004:	0800789e 	.word	0x0800789e
 8007008:	00000000 	.word	0x00000000
 800700c:	08006dbf 	.word	0x08006dbf
 8007010:	0800789a 	.word	0x0800789a

08007014 <_printf_common>:
 8007014:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007018:	4616      	mov	r6, r2
 800701a:	4698      	mov	r8, r3
 800701c:	688a      	ldr	r2, [r1, #8]
 800701e:	690b      	ldr	r3, [r1, #16]
 8007020:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007024:	4293      	cmp	r3, r2
 8007026:	bfb8      	it	lt
 8007028:	4613      	movlt	r3, r2
 800702a:	6033      	str	r3, [r6, #0]
 800702c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007030:	4607      	mov	r7, r0
 8007032:	460c      	mov	r4, r1
 8007034:	b10a      	cbz	r2, 800703a <_printf_common+0x26>
 8007036:	3301      	adds	r3, #1
 8007038:	6033      	str	r3, [r6, #0]
 800703a:	6823      	ldr	r3, [r4, #0]
 800703c:	0699      	lsls	r1, r3, #26
 800703e:	bf42      	ittt	mi
 8007040:	6833      	ldrmi	r3, [r6, #0]
 8007042:	3302      	addmi	r3, #2
 8007044:	6033      	strmi	r3, [r6, #0]
 8007046:	6825      	ldr	r5, [r4, #0]
 8007048:	f015 0506 	ands.w	r5, r5, #6
 800704c:	d106      	bne.n	800705c <_printf_common+0x48>
 800704e:	f104 0a19 	add.w	sl, r4, #25
 8007052:	68e3      	ldr	r3, [r4, #12]
 8007054:	6832      	ldr	r2, [r6, #0]
 8007056:	1a9b      	subs	r3, r3, r2
 8007058:	42ab      	cmp	r3, r5
 800705a:	dc26      	bgt.n	80070aa <_printf_common+0x96>
 800705c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007060:	6822      	ldr	r2, [r4, #0]
 8007062:	3b00      	subs	r3, #0
 8007064:	bf18      	it	ne
 8007066:	2301      	movne	r3, #1
 8007068:	0692      	lsls	r2, r2, #26
 800706a:	d42b      	bmi.n	80070c4 <_printf_common+0xb0>
 800706c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007070:	4641      	mov	r1, r8
 8007072:	4638      	mov	r0, r7
 8007074:	47c8      	blx	r9
 8007076:	3001      	adds	r0, #1
 8007078:	d01e      	beq.n	80070b8 <_printf_common+0xa4>
 800707a:	6823      	ldr	r3, [r4, #0]
 800707c:	6922      	ldr	r2, [r4, #16]
 800707e:	f003 0306 	and.w	r3, r3, #6
 8007082:	2b04      	cmp	r3, #4
 8007084:	bf02      	ittt	eq
 8007086:	68e5      	ldreq	r5, [r4, #12]
 8007088:	6833      	ldreq	r3, [r6, #0]
 800708a:	1aed      	subeq	r5, r5, r3
 800708c:	68a3      	ldr	r3, [r4, #8]
 800708e:	bf0c      	ite	eq
 8007090:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007094:	2500      	movne	r5, #0
 8007096:	4293      	cmp	r3, r2
 8007098:	bfc4      	itt	gt
 800709a:	1a9b      	subgt	r3, r3, r2
 800709c:	18ed      	addgt	r5, r5, r3
 800709e:	2600      	movs	r6, #0
 80070a0:	341a      	adds	r4, #26
 80070a2:	42b5      	cmp	r5, r6
 80070a4:	d11a      	bne.n	80070dc <_printf_common+0xc8>
 80070a6:	2000      	movs	r0, #0
 80070a8:	e008      	b.n	80070bc <_printf_common+0xa8>
 80070aa:	2301      	movs	r3, #1
 80070ac:	4652      	mov	r2, sl
 80070ae:	4641      	mov	r1, r8
 80070b0:	4638      	mov	r0, r7
 80070b2:	47c8      	blx	r9
 80070b4:	3001      	adds	r0, #1
 80070b6:	d103      	bne.n	80070c0 <_printf_common+0xac>
 80070b8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80070bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070c0:	3501      	adds	r5, #1
 80070c2:	e7c6      	b.n	8007052 <_printf_common+0x3e>
 80070c4:	18e1      	adds	r1, r4, r3
 80070c6:	1c5a      	adds	r2, r3, #1
 80070c8:	2030      	movs	r0, #48	@ 0x30
 80070ca:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80070ce:	4422      	add	r2, r4
 80070d0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80070d4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80070d8:	3302      	adds	r3, #2
 80070da:	e7c7      	b.n	800706c <_printf_common+0x58>
 80070dc:	2301      	movs	r3, #1
 80070de:	4622      	mov	r2, r4
 80070e0:	4641      	mov	r1, r8
 80070e2:	4638      	mov	r0, r7
 80070e4:	47c8      	blx	r9
 80070e6:	3001      	adds	r0, #1
 80070e8:	d0e6      	beq.n	80070b8 <_printf_common+0xa4>
 80070ea:	3601      	adds	r6, #1
 80070ec:	e7d9      	b.n	80070a2 <_printf_common+0x8e>
	...

080070f0 <_printf_i>:
 80070f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80070f4:	7e0f      	ldrb	r7, [r1, #24]
 80070f6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80070f8:	2f78      	cmp	r7, #120	@ 0x78
 80070fa:	4691      	mov	r9, r2
 80070fc:	4680      	mov	r8, r0
 80070fe:	460c      	mov	r4, r1
 8007100:	469a      	mov	sl, r3
 8007102:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007106:	d807      	bhi.n	8007118 <_printf_i+0x28>
 8007108:	2f62      	cmp	r7, #98	@ 0x62
 800710a:	d80a      	bhi.n	8007122 <_printf_i+0x32>
 800710c:	2f00      	cmp	r7, #0
 800710e:	f000 80d2 	beq.w	80072b6 <_printf_i+0x1c6>
 8007112:	2f58      	cmp	r7, #88	@ 0x58
 8007114:	f000 80b9 	beq.w	800728a <_printf_i+0x19a>
 8007118:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800711c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007120:	e03a      	b.n	8007198 <_printf_i+0xa8>
 8007122:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007126:	2b15      	cmp	r3, #21
 8007128:	d8f6      	bhi.n	8007118 <_printf_i+0x28>
 800712a:	a101      	add	r1, pc, #4	@ (adr r1, 8007130 <_printf_i+0x40>)
 800712c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007130:	08007189 	.word	0x08007189
 8007134:	0800719d 	.word	0x0800719d
 8007138:	08007119 	.word	0x08007119
 800713c:	08007119 	.word	0x08007119
 8007140:	08007119 	.word	0x08007119
 8007144:	08007119 	.word	0x08007119
 8007148:	0800719d 	.word	0x0800719d
 800714c:	08007119 	.word	0x08007119
 8007150:	08007119 	.word	0x08007119
 8007154:	08007119 	.word	0x08007119
 8007158:	08007119 	.word	0x08007119
 800715c:	0800729d 	.word	0x0800729d
 8007160:	080071c7 	.word	0x080071c7
 8007164:	08007257 	.word	0x08007257
 8007168:	08007119 	.word	0x08007119
 800716c:	08007119 	.word	0x08007119
 8007170:	080072bf 	.word	0x080072bf
 8007174:	08007119 	.word	0x08007119
 8007178:	080071c7 	.word	0x080071c7
 800717c:	08007119 	.word	0x08007119
 8007180:	08007119 	.word	0x08007119
 8007184:	0800725f 	.word	0x0800725f
 8007188:	6833      	ldr	r3, [r6, #0]
 800718a:	1d1a      	adds	r2, r3, #4
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	6032      	str	r2, [r6, #0]
 8007190:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007194:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007198:	2301      	movs	r3, #1
 800719a:	e09d      	b.n	80072d8 <_printf_i+0x1e8>
 800719c:	6833      	ldr	r3, [r6, #0]
 800719e:	6820      	ldr	r0, [r4, #0]
 80071a0:	1d19      	adds	r1, r3, #4
 80071a2:	6031      	str	r1, [r6, #0]
 80071a4:	0606      	lsls	r6, r0, #24
 80071a6:	d501      	bpl.n	80071ac <_printf_i+0xbc>
 80071a8:	681d      	ldr	r5, [r3, #0]
 80071aa:	e003      	b.n	80071b4 <_printf_i+0xc4>
 80071ac:	0645      	lsls	r5, r0, #25
 80071ae:	d5fb      	bpl.n	80071a8 <_printf_i+0xb8>
 80071b0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80071b4:	2d00      	cmp	r5, #0
 80071b6:	da03      	bge.n	80071c0 <_printf_i+0xd0>
 80071b8:	232d      	movs	r3, #45	@ 0x2d
 80071ba:	426d      	negs	r5, r5
 80071bc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80071c0:	4859      	ldr	r0, [pc, #356]	@ (8007328 <_printf_i+0x238>)
 80071c2:	230a      	movs	r3, #10
 80071c4:	e011      	b.n	80071ea <_printf_i+0xfa>
 80071c6:	6821      	ldr	r1, [r4, #0]
 80071c8:	6833      	ldr	r3, [r6, #0]
 80071ca:	0608      	lsls	r0, r1, #24
 80071cc:	f853 5b04 	ldr.w	r5, [r3], #4
 80071d0:	d402      	bmi.n	80071d8 <_printf_i+0xe8>
 80071d2:	0649      	lsls	r1, r1, #25
 80071d4:	bf48      	it	mi
 80071d6:	b2ad      	uxthmi	r5, r5
 80071d8:	2f6f      	cmp	r7, #111	@ 0x6f
 80071da:	4853      	ldr	r0, [pc, #332]	@ (8007328 <_printf_i+0x238>)
 80071dc:	6033      	str	r3, [r6, #0]
 80071de:	bf14      	ite	ne
 80071e0:	230a      	movne	r3, #10
 80071e2:	2308      	moveq	r3, #8
 80071e4:	2100      	movs	r1, #0
 80071e6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80071ea:	6866      	ldr	r6, [r4, #4]
 80071ec:	60a6      	str	r6, [r4, #8]
 80071ee:	2e00      	cmp	r6, #0
 80071f0:	bfa2      	ittt	ge
 80071f2:	6821      	ldrge	r1, [r4, #0]
 80071f4:	f021 0104 	bicge.w	r1, r1, #4
 80071f8:	6021      	strge	r1, [r4, #0]
 80071fa:	b90d      	cbnz	r5, 8007200 <_printf_i+0x110>
 80071fc:	2e00      	cmp	r6, #0
 80071fe:	d04b      	beq.n	8007298 <_printf_i+0x1a8>
 8007200:	4616      	mov	r6, r2
 8007202:	fbb5 f1f3 	udiv	r1, r5, r3
 8007206:	fb03 5711 	mls	r7, r3, r1, r5
 800720a:	5dc7      	ldrb	r7, [r0, r7]
 800720c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007210:	462f      	mov	r7, r5
 8007212:	42bb      	cmp	r3, r7
 8007214:	460d      	mov	r5, r1
 8007216:	d9f4      	bls.n	8007202 <_printf_i+0x112>
 8007218:	2b08      	cmp	r3, #8
 800721a:	d10b      	bne.n	8007234 <_printf_i+0x144>
 800721c:	6823      	ldr	r3, [r4, #0]
 800721e:	07df      	lsls	r7, r3, #31
 8007220:	d508      	bpl.n	8007234 <_printf_i+0x144>
 8007222:	6923      	ldr	r3, [r4, #16]
 8007224:	6861      	ldr	r1, [r4, #4]
 8007226:	4299      	cmp	r1, r3
 8007228:	bfde      	ittt	le
 800722a:	2330      	movle	r3, #48	@ 0x30
 800722c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007230:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8007234:	1b92      	subs	r2, r2, r6
 8007236:	6122      	str	r2, [r4, #16]
 8007238:	f8cd a000 	str.w	sl, [sp]
 800723c:	464b      	mov	r3, r9
 800723e:	aa03      	add	r2, sp, #12
 8007240:	4621      	mov	r1, r4
 8007242:	4640      	mov	r0, r8
 8007244:	f7ff fee6 	bl	8007014 <_printf_common>
 8007248:	3001      	adds	r0, #1
 800724a:	d14a      	bne.n	80072e2 <_printf_i+0x1f2>
 800724c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007250:	b004      	add	sp, #16
 8007252:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007256:	6823      	ldr	r3, [r4, #0]
 8007258:	f043 0320 	orr.w	r3, r3, #32
 800725c:	6023      	str	r3, [r4, #0]
 800725e:	4833      	ldr	r0, [pc, #204]	@ (800732c <_printf_i+0x23c>)
 8007260:	2778      	movs	r7, #120	@ 0x78
 8007262:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007266:	6823      	ldr	r3, [r4, #0]
 8007268:	6831      	ldr	r1, [r6, #0]
 800726a:	061f      	lsls	r7, r3, #24
 800726c:	f851 5b04 	ldr.w	r5, [r1], #4
 8007270:	d402      	bmi.n	8007278 <_printf_i+0x188>
 8007272:	065f      	lsls	r7, r3, #25
 8007274:	bf48      	it	mi
 8007276:	b2ad      	uxthmi	r5, r5
 8007278:	6031      	str	r1, [r6, #0]
 800727a:	07d9      	lsls	r1, r3, #31
 800727c:	bf44      	itt	mi
 800727e:	f043 0320 	orrmi.w	r3, r3, #32
 8007282:	6023      	strmi	r3, [r4, #0]
 8007284:	b11d      	cbz	r5, 800728e <_printf_i+0x19e>
 8007286:	2310      	movs	r3, #16
 8007288:	e7ac      	b.n	80071e4 <_printf_i+0xf4>
 800728a:	4827      	ldr	r0, [pc, #156]	@ (8007328 <_printf_i+0x238>)
 800728c:	e7e9      	b.n	8007262 <_printf_i+0x172>
 800728e:	6823      	ldr	r3, [r4, #0]
 8007290:	f023 0320 	bic.w	r3, r3, #32
 8007294:	6023      	str	r3, [r4, #0]
 8007296:	e7f6      	b.n	8007286 <_printf_i+0x196>
 8007298:	4616      	mov	r6, r2
 800729a:	e7bd      	b.n	8007218 <_printf_i+0x128>
 800729c:	6833      	ldr	r3, [r6, #0]
 800729e:	6825      	ldr	r5, [r4, #0]
 80072a0:	6961      	ldr	r1, [r4, #20]
 80072a2:	1d18      	adds	r0, r3, #4
 80072a4:	6030      	str	r0, [r6, #0]
 80072a6:	062e      	lsls	r6, r5, #24
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	d501      	bpl.n	80072b0 <_printf_i+0x1c0>
 80072ac:	6019      	str	r1, [r3, #0]
 80072ae:	e002      	b.n	80072b6 <_printf_i+0x1c6>
 80072b0:	0668      	lsls	r0, r5, #25
 80072b2:	d5fb      	bpl.n	80072ac <_printf_i+0x1bc>
 80072b4:	8019      	strh	r1, [r3, #0]
 80072b6:	2300      	movs	r3, #0
 80072b8:	6123      	str	r3, [r4, #16]
 80072ba:	4616      	mov	r6, r2
 80072bc:	e7bc      	b.n	8007238 <_printf_i+0x148>
 80072be:	6833      	ldr	r3, [r6, #0]
 80072c0:	1d1a      	adds	r2, r3, #4
 80072c2:	6032      	str	r2, [r6, #0]
 80072c4:	681e      	ldr	r6, [r3, #0]
 80072c6:	6862      	ldr	r2, [r4, #4]
 80072c8:	2100      	movs	r1, #0
 80072ca:	4630      	mov	r0, r6
 80072cc:	f7f8 ff80 	bl	80001d0 <memchr>
 80072d0:	b108      	cbz	r0, 80072d6 <_printf_i+0x1e6>
 80072d2:	1b80      	subs	r0, r0, r6
 80072d4:	6060      	str	r0, [r4, #4]
 80072d6:	6863      	ldr	r3, [r4, #4]
 80072d8:	6123      	str	r3, [r4, #16]
 80072da:	2300      	movs	r3, #0
 80072dc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80072e0:	e7aa      	b.n	8007238 <_printf_i+0x148>
 80072e2:	6923      	ldr	r3, [r4, #16]
 80072e4:	4632      	mov	r2, r6
 80072e6:	4649      	mov	r1, r9
 80072e8:	4640      	mov	r0, r8
 80072ea:	47d0      	blx	sl
 80072ec:	3001      	adds	r0, #1
 80072ee:	d0ad      	beq.n	800724c <_printf_i+0x15c>
 80072f0:	6823      	ldr	r3, [r4, #0]
 80072f2:	079b      	lsls	r3, r3, #30
 80072f4:	d413      	bmi.n	800731e <_printf_i+0x22e>
 80072f6:	68e0      	ldr	r0, [r4, #12]
 80072f8:	9b03      	ldr	r3, [sp, #12]
 80072fa:	4298      	cmp	r0, r3
 80072fc:	bfb8      	it	lt
 80072fe:	4618      	movlt	r0, r3
 8007300:	e7a6      	b.n	8007250 <_printf_i+0x160>
 8007302:	2301      	movs	r3, #1
 8007304:	4632      	mov	r2, r6
 8007306:	4649      	mov	r1, r9
 8007308:	4640      	mov	r0, r8
 800730a:	47d0      	blx	sl
 800730c:	3001      	adds	r0, #1
 800730e:	d09d      	beq.n	800724c <_printf_i+0x15c>
 8007310:	3501      	adds	r5, #1
 8007312:	68e3      	ldr	r3, [r4, #12]
 8007314:	9903      	ldr	r1, [sp, #12]
 8007316:	1a5b      	subs	r3, r3, r1
 8007318:	42ab      	cmp	r3, r5
 800731a:	dcf2      	bgt.n	8007302 <_printf_i+0x212>
 800731c:	e7eb      	b.n	80072f6 <_printf_i+0x206>
 800731e:	2500      	movs	r5, #0
 8007320:	f104 0619 	add.w	r6, r4, #25
 8007324:	e7f5      	b.n	8007312 <_printf_i+0x222>
 8007326:	bf00      	nop
 8007328:	080078a5 	.word	0x080078a5
 800732c:	080078b6 	.word	0x080078b6

08007330 <__sflush_r>:
 8007330:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007334:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007338:	0716      	lsls	r6, r2, #28
 800733a:	4605      	mov	r5, r0
 800733c:	460c      	mov	r4, r1
 800733e:	d454      	bmi.n	80073ea <__sflush_r+0xba>
 8007340:	684b      	ldr	r3, [r1, #4]
 8007342:	2b00      	cmp	r3, #0
 8007344:	dc02      	bgt.n	800734c <__sflush_r+0x1c>
 8007346:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007348:	2b00      	cmp	r3, #0
 800734a:	dd48      	ble.n	80073de <__sflush_r+0xae>
 800734c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800734e:	2e00      	cmp	r6, #0
 8007350:	d045      	beq.n	80073de <__sflush_r+0xae>
 8007352:	2300      	movs	r3, #0
 8007354:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007358:	682f      	ldr	r7, [r5, #0]
 800735a:	6a21      	ldr	r1, [r4, #32]
 800735c:	602b      	str	r3, [r5, #0]
 800735e:	d030      	beq.n	80073c2 <__sflush_r+0x92>
 8007360:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007362:	89a3      	ldrh	r3, [r4, #12]
 8007364:	0759      	lsls	r1, r3, #29
 8007366:	d505      	bpl.n	8007374 <__sflush_r+0x44>
 8007368:	6863      	ldr	r3, [r4, #4]
 800736a:	1ad2      	subs	r2, r2, r3
 800736c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800736e:	b10b      	cbz	r3, 8007374 <__sflush_r+0x44>
 8007370:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007372:	1ad2      	subs	r2, r2, r3
 8007374:	2300      	movs	r3, #0
 8007376:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007378:	6a21      	ldr	r1, [r4, #32]
 800737a:	4628      	mov	r0, r5
 800737c:	47b0      	blx	r6
 800737e:	1c43      	adds	r3, r0, #1
 8007380:	89a3      	ldrh	r3, [r4, #12]
 8007382:	d106      	bne.n	8007392 <__sflush_r+0x62>
 8007384:	6829      	ldr	r1, [r5, #0]
 8007386:	291d      	cmp	r1, #29
 8007388:	d82b      	bhi.n	80073e2 <__sflush_r+0xb2>
 800738a:	4a2a      	ldr	r2, [pc, #168]	@ (8007434 <__sflush_r+0x104>)
 800738c:	410a      	asrs	r2, r1
 800738e:	07d6      	lsls	r6, r2, #31
 8007390:	d427      	bmi.n	80073e2 <__sflush_r+0xb2>
 8007392:	2200      	movs	r2, #0
 8007394:	6062      	str	r2, [r4, #4]
 8007396:	04d9      	lsls	r1, r3, #19
 8007398:	6922      	ldr	r2, [r4, #16]
 800739a:	6022      	str	r2, [r4, #0]
 800739c:	d504      	bpl.n	80073a8 <__sflush_r+0x78>
 800739e:	1c42      	adds	r2, r0, #1
 80073a0:	d101      	bne.n	80073a6 <__sflush_r+0x76>
 80073a2:	682b      	ldr	r3, [r5, #0]
 80073a4:	b903      	cbnz	r3, 80073a8 <__sflush_r+0x78>
 80073a6:	6560      	str	r0, [r4, #84]	@ 0x54
 80073a8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80073aa:	602f      	str	r7, [r5, #0]
 80073ac:	b1b9      	cbz	r1, 80073de <__sflush_r+0xae>
 80073ae:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80073b2:	4299      	cmp	r1, r3
 80073b4:	d002      	beq.n	80073bc <__sflush_r+0x8c>
 80073b6:	4628      	mov	r0, r5
 80073b8:	f7ff fbf2 	bl	8006ba0 <_free_r>
 80073bc:	2300      	movs	r3, #0
 80073be:	6363      	str	r3, [r4, #52]	@ 0x34
 80073c0:	e00d      	b.n	80073de <__sflush_r+0xae>
 80073c2:	2301      	movs	r3, #1
 80073c4:	4628      	mov	r0, r5
 80073c6:	47b0      	blx	r6
 80073c8:	4602      	mov	r2, r0
 80073ca:	1c50      	adds	r0, r2, #1
 80073cc:	d1c9      	bne.n	8007362 <__sflush_r+0x32>
 80073ce:	682b      	ldr	r3, [r5, #0]
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d0c6      	beq.n	8007362 <__sflush_r+0x32>
 80073d4:	2b1d      	cmp	r3, #29
 80073d6:	d001      	beq.n	80073dc <__sflush_r+0xac>
 80073d8:	2b16      	cmp	r3, #22
 80073da:	d11e      	bne.n	800741a <__sflush_r+0xea>
 80073dc:	602f      	str	r7, [r5, #0]
 80073de:	2000      	movs	r0, #0
 80073e0:	e022      	b.n	8007428 <__sflush_r+0xf8>
 80073e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80073e6:	b21b      	sxth	r3, r3
 80073e8:	e01b      	b.n	8007422 <__sflush_r+0xf2>
 80073ea:	690f      	ldr	r7, [r1, #16]
 80073ec:	2f00      	cmp	r7, #0
 80073ee:	d0f6      	beq.n	80073de <__sflush_r+0xae>
 80073f0:	0793      	lsls	r3, r2, #30
 80073f2:	680e      	ldr	r6, [r1, #0]
 80073f4:	bf08      	it	eq
 80073f6:	694b      	ldreq	r3, [r1, #20]
 80073f8:	600f      	str	r7, [r1, #0]
 80073fa:	bf18      	it	ne
 80073fc:	2300      	movne	r3, #0
 80073fe:	eba6 0807 	sub.w	r8, r6, r7
 8007402:	608b      	str	r3, [r1, #8]
 8007404:	f1b8 0f00 	cmp.w	r8, #0
 8007408:	dde9      	ble.n	80073de <__sflush_r+0xae>
 800740a:	6a21      	ldr	r1, [r4, #32]
 800740c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800740e:	4643      	mov	r3, r8
 8007410:	463a      	mov	r2, r7
 8007412:	4628      	mov	r0, r5
 8007414:	47b0      	blx	r6
 8007416:	2800      	cmp	r0, #0
 8007418:	dc08      	bgt.n	800742c <__sflush_r+0xfc>
 800741a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800741e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007422:	81a3      	strh	r3, [r4, #12]
 8007424:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007428:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800742c:	4407      	add	r7, r0
 800742e:	eba8 0800 	sub.w	r8, r8, r0
 8007432:	e7e7      	b.n	8007404 <__sflush_r+0xd4>
 8007434:	dfbffffe 	.word	0xdfbffffe

08007438 <_fflush_r>:
 8007438:	b538      	push	{r3, r4, r5, lr}
 800743a:	690b      	ldr	r3, [r1, #16]
 800743c:	4605      	mov	r5, r0
 800743e:	460c      	mov	r4, r1
 8007440:	b913      	cbnz	r3, 8007448 <_fflush_r+0x10>
 8007442:	2500      	movs	r5, #0
 8007444:	4628      	mov	r0, r5
 8007446:	bd38      	pop	{r3, r4, r5, pc}
 8007448:	b118      	cbz	r0, 8007452 <_fflush_r+0x1a>
 800744a:	6a03      	ldr	r3, [r0, #32]
 800744c:	b90b      	cbnz	r3, 8007452 <_fflush_r+0x1a>
 800744e:	f7ff f9ad 	bl	80067ac <__sinit>
 8007452:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007456:	2b00      	cmp	r3, #0
 8007458:	d0f3      	beq.n	8007442 <_fflush_r+0xa>
 800745a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800745c:	07d0      	lsls	r0, r2, #31
 800745e:	d404      	bmi.n	800746a <_fflush_r+0x32>
 8007460:	0599      	lsls	r1, r3, #22
 8007462:	d402      	bmi.n	800746a <_fflush_r+0x32>
 8007464:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007466:	f7ff fb98 	bl	8006b9a <__retarget_lock_acquire_recursive>
 800746a:	4628      	mov	r0, r5
 800746c:	4621      	mov	r1, r4
 800746e:	f7ff ff5f 	bl	8007330 <__sflush_r>
 8007472:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007474:	07da      	lsls	r2, r3, #31
 8007476:	4605      	mov	r5, r0
 8007478:	d4e4      	bmi.n	8007444 <_fflush_r+0xc>
 800747a:	89a3      	ldrh	r3, [r4, #12]
 800747c:	059b      	lsls	r3, r3, #22
 800747e:	d4e1      	bmi.n	8007444 <_fflush_r+0xc>
 8007480:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007482:	f7ff fb8b 	bl	8006b9c <__retarget_lock_release_recursive>
 8007486:	e7dd      	b.n	8007444 <_fflush_r+0xc>

08007488 <__swhatbuf_r>:
 8007488:	b570      	push	{r4, r5, r6, lr}
 800748a:	460c      	mov	r4, r1
 800748c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007490:	2900      	cmp	r1, #0
 8007492:	b096      	sub	sp, #88	@ 0x58
 8007494:	4615      	mov	r5, r2
 8007496:	461e      	mov	r6, r3
 8007498:	da0d      	bge.n	80074b6 <__swhatbuf_r+0x2e>
 800749a:	89a3      	ldrh	r3, [r4, #12]
 800749c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80074a0:	f04f 0100 	mov.w	r1, #0
 80074a4:	bf14      	ite	ne
 80074a6:	2340      	movne	r3, #64	@ 0x40
 80074a8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80074ac:	2000      	movs	r0, #0
 80074ae:	6031      	str	r1, [r6, #0]
 80074b0:	602b      	str	r3, [r5, #0]
 80074b2:	b016      	add	sp, #88	@ 0x58
 80074b4:	bd70      	pop	{r4, r5, r6, pc}
 80074b6:	466a      	mov	r2, sp
 80074b8:	f000 f848 	bl	800754c <_fstat_r>
 80074bc:	2800      	cmp	r0, #0
 80074be:	dbec      	blt.n	800749a <__swhatbuf_r+0x12>
 80074c0:	9901      	ldr	r1, [sp, #4]
 80074c2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80074c6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80074ca:	4259      	negs	r1, r3
 80074cc:	4159      	adcs	r1, r3
 80074ce:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80074d2:	e7eb      	b.n	80074ac <__swhatbuf_r+0x24>

080074d4 <__smakebuf_r>:
 80074d4:	898b      	ldrh	r3, [r1, #12]
 80074d6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80074d8:	079d      	lsls	r5, r3, #30
 80074da:	4606      	mov	r6, r0
 80074dc:	460c      	mov	r4, r1
 80074de:	d507      	bpl.n	80074f0 <__smakebuf_r+0x1c>
 80074e0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80074e4:	6023      	str	r3, [r4, #0]
 80074e6:	6123      	str	r3, [r4, #16]
 80074e8:	2301      	movs	r3, #1
 80074ea:	6163      	str	r3, [r4, #20]
 80074ec:	b003      	add	sp, #12
 80074ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80074f0:	ab01      	add	r3, sp, #4
 80074f2:	466a      	mov	r2, sp
 80074f4:	f7ff ffc8 	bl	8007488 <__swhatbuf_r>
 80074f8:	9f00      	ldr	r7, [sp, #0]
 80074fa:	4605      	mov	r5, r0
 80074fc:	4639      	mov	r1, r7
 80074fe:	4630      	mov	r0, r6
 8007500:	f7ff fbba 	bl	8006c78 <_malloc_r>
 8007504:	b948      	cbnz	r0, 800751a <__smakebuf_r+0x46>
 8007506:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800750a:	059a      	lsls	r2, r3, #22
 800750c:	d4ee      	bmi.n	80074ec <__smakebuf_r+0x18>
 800750e:	f023 0303 	bic.w	r3, r3, #3
 8007512:	f043 0302 	orr.w	r3, r3, #2
 8007516:	81a3      	strh	r3, [r4, #12]
 8007518:	e7e2      	b.n	80074e0 <__smakebuf_r+0xc>
 800751a:	89a3      	ldrh	r3, [r4, #12]
 800751c:	6020      	str	r0, [r4, #0]
 800751e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007522:	81a3      	strh	r3, [r4, #12]
 8007524:	9b01      	ldr	r3, [sp, #4]
 8007526:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800752a:	b15b      	cbz	r3, 8007544 <__smakebuf_r+0x70>
 800752c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007530:	4630      	mov	r0, r6
 8007532:	f000 f81d 	bl	8007570 <_isatty_r>
 8007536:	b128      	cbz	r0, 8007544 <__smakebuf_r+0x70>
 8007538:	89a3      	ldrh	r3, [r4, #12]
 800753a:	f023 0303 	bic.w	r3, r3, #3
 800753e:	f043 0301 	orr.w	r3, r3, #1
 8007542:	81a3      	strh	r3, [r4, #12]
 8007544:	89a3      	ldrh	r3, [r4, #12]
 8007546:	431d      	orrs	r5, r3
 8007548:	81a5      	strh	r5, [r4, #12]
 800754a:	e7cf      	b.n	80074ec <__smakebuf_r+0x18>

0800754c <_fstat_r>:
 800754c:	b538      	push	{r3, r4, r5, lr}
 800754e:	4d07      	ldr	r5, [pc, #28]	@ (800756c <_fstat_r+0x20>)
 8007550:	2300      	movs	r3, #0
 8007552:	4604      	mov	r4, r0
 8007554:	4608      	mov	r0, r1
 8007556:	4611      	mov	r1, r2
 8007558:	602b      	str	r3, [r5, #0]
 800755a:	f7f9 fd16 	bl	8000f8a <_fstat>
 800755e:	1c43      	adds	r3, r0, #1
 8007560:	d102      	bne.n	8007568 <_fstat_r+0x1c>
 8007562:	682b      	ldr	r3, [r5, #0]
 8007564:	b103      	cbz	r3, 8007568 <_fstat_r+0x1c>
 8007566:	6023      	str	r3, [r4, #0]
 8007568:	bd38      	pop	{r3, r4, r5, pc}
 800756a:	bf00      	nop
 800756c:	20000b60 	.word	0x20000b60

08007570 <_isatty_r>:
 8007570:	b538      	push	{r3, r4, r5, lr}
 8007572:	4d06      	ldr	r5, [pc, #24]	@ (800758c <_isatty_r+0x1c>)
 8007574:	2300      	movs	r3, #0
 8007576:	4604      	mov	r4, r0
 8007578:	4608      	mov	r0, r1
 800757a:	602b      	str	r3, [r5, #0]
 800757c:	f7f9 fd15 	bl	8000faa <_isatty>
 8007580:	1c43      	adds	r3, r0, #1
 8007582:	d102      	bne.n	800758a <_isatty_r+0x1a>
 8007584:	682b      	ldr	r3, [r5, #0]
 8007586:	b103      	cbz	r3, 800758a <_isatty_r+0x1a>
 8007588:	6023      	str	r3, [r4, #0]
 800758a:	bd38      	pop	{r3, r4, r5, pc}
 800758c:	20000b60 	.word	0x20000b60

08007590 <_sbrk_r>:
 8007590:	b538      	push	{r3, r4, r5, lr}
 8007592:	4d06      	ldr	r5, [pc, #24]	@ (80075ac <_sbrk_r+0x1c>)
 8007594:	2300      	movs	r3, #0
 8007596:	4604      	mov	r4, r0
 8007598:	4608      	mov	r0, r1
 800759a:	602b      	str	r3, [r5, #0]
 800759c:	f7f9 fd1e 	bl	8000fdc <_sbrk>
 80075a0:	1c43      	adds	r3, r0, #1
 80075a2:	d102      	bne.n	80075aa <_sbrk_r+0x1a>
 80075a4:	682b      	ldr	r3, [r5, #0]
 80075a6:	b103      	cbz	r3, 80075aa <_sbrk_r+0x1a>
 80075a8:	6023      	str	r3, [r4, #0]
 80075aa:	bd38      	pop	{r3, r4, r5, pc}
 80075ac:	20000b60 	.word	0x20000b60

080075b0 <_init>:
 80075b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075b2:	bf00      	nop
 80075b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80075b6:	bc08      	pop	{r3}
 80075b8:	469e      	mov	lr, r3
 80075ba:	4770      	bx	lr

080075bc <_fini>:
 80075bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075be:	bf00      	nop
 80075c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80075c2:	bc08      	pop	{r3}
 80075c4:	469e      	mov	lr, r3
 80075c6:	4770      	bx	lr
